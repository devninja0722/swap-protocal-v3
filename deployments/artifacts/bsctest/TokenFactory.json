{
  "address": "0x8B26d272F2533561FcBc402a06774d10cF5aD4eD",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1549856b5d75e27a3fc13597e74115fe1410fdbb2214144088fd0b36e6254a60",
  "receipt": {
    "to": null,
    "from": "0x3A54802752fEFDc1aF2CD0b6DFA4F24694bDEE33",
    "contractAddress": "0x8B26d272F2533561FcBc402a06774d10cF5aD4eD",
    "transactionIndex": 3,
    "gasUsed": "1873302",
    "logsBloom": "0x
    "blockHash": "0xf8961115c64bbda0cc207e9729c9006a3790c3766fce1eea16eaec01bd141df9",
    "transactionHash": "0x1549856b5d75e27a3fc13597e74115fe1410fdbb2214144088fd0b36e6254a60",
    "logs": [],
    "blockNumber": 20298880,
    "cumulativeGasUsed": "2314292",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9be518e37de930f4cb2c00751324c113",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n// solhint-disable\\r\\n\\r\\n/**\\r\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\r\\n * supported.\\r\\n */\\r\\nfunction _require(bool condition, uint256 errorCode) pure {\\r\\n    if (!condition) _revert(errorCode);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\r\\n */\\r\\nfunction _revert(uint256 errorCode) pure {\\r\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\r\\n    // 'BAL#{errorCode}'\\r\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\r\\n    //\\r\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\r\\n    // number (8 to 16 bits) than the individual string characters.\\r\\n    //\\r\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\r\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\r\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\r\\n    assembly {\\r\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\r\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\r\\n        // the '0' character.\\r\\n\\r\\n        let units := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        errorCode := div(errorCode, 10)\\r\\n        let tenths := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        errorCode := div(errorCode, 10)\\r\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\r\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\r\\n        // characters to it, each shifted by a multiple of 8.\\r\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\r\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\r\\n        // array).\\r\\n\\r\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\r\\n\\r\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\r\\n        // message will have the following layout:\\r\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\r\\n\\r\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\r\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\r\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\r\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\r\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\r\\n        // The string length is fixed: 7 characters.\\r\\n        mstore(0x24, 7)\\r\\n        // Finally, the string itself is stored.\\r\\n        mstore(0x44, revertReason)\\r\\n\\r\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\r\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\r\\n        revert(0, 100)\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Errors {\\r\\n    // Math\\r\\n    uint256 internal constant ADD_OVERFLOW = 0;\\r\\n    uint256 internal constant SUB_OVERFLOW = 1;\\r\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\r\\n    uint256 internal constant MUL_OVERFLOW = 3;\\r\\n    uint256 internal constant ZERO_DIVISION = 4;\\r\\n    uint256 internal constant DIV_INTERNAL = 5;\\r\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\r\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\r\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\r\\n    uint256 internal constant INVALID_EXPONENT = 9;\\r\\n\\r\\n    // Input\\r\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\r\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\r\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\r\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\r\\n    uint256 internal constant ZERO_TOKEN = 104;\\r\\n\\r\\n    // Shared pools\\r\\n    uint256 internal constant MIN_TOKENS = 200;\\r\\n    uint256 internal constant MAX_TOKENS = 201;\\r\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\r\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\r\\n    uint256 internal constant MINIMUM_BPT = 204;\\r\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\r\\n    uint256 internal constant UNINITIALIZED = 206;\\r\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\r\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\r\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\r\\n\\r\\n    // Pools\\r\\n    uint256 internal constant MIN_AMP = 300;\\r\\n    uint256 internal constant MAX_AMP = 301;\\r\\n    uint256 internal constant MIN_WEIGHT = 302;\\r\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\r\\n    uint256 internal constant MAX_IN_RATIO = 304;\\r\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\r\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\r\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\r\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\r\\n    uint256 internal constant INVALID_TOKEN = 309;\\r\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\r\\n    uint256 internal constant ZERO_INVARIANT = 311;\\r\\n\\r\\n    // Lib\\r\\n    uint256 internal constant REENTRANCY = 400;\\r\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\r\\n    uint256 internal constant PAUSED = 402;\\r\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\r\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\r\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\r\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\r\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\r\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\r\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\r\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\r\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\r\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\r\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\r\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\r\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\r\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\r\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\r\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\r\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\r\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\r\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\r\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\r\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\r\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\r\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\r\\n\\r\\n    // Vault\\r\\n    uint256 internal constant INVALID_POOL_ID = 500;\\r\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\r\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\r\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\r\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\r\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\r\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\r\\n    uint256 internal constant SWAP_LIMIT = 507;\\r\\n    uint256 internal constant SWAP_DEADLINE = 508;\\r\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\r\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\r\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\r\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\r\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\r\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\r\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\r\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\r\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\r\\n    uint256 internal constant ETH_TRANSFER = 518;\\r\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\r\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\r\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\r\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\r\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\r\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\r\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\r\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\r\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\r\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\r\\n\\r\\n    // Fees\\r\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\r\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\r\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\r\\n}\\r\\n\",\"keccak256\":\"0x86ae8423356e088207b199c8958ddcc6238d48ca8844c55706b8e88a599c16c8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/openzeppelin/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    struct RoleData {\\r\\n        EnumerableSet.AddressSet members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\r\\n        return _roles[role].members.contains(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of accounts that have `role`. Can be used\\r\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n     */\\r\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\r\\n        return _roles[role].members.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n     *\\r\\n     * Role bearers are not sorted in any particular way, and their ordering may\\r\\n     * change at any point.\\r\\n     *\\r\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n     * you perform all queries on the same block. See the following\\r\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n     * for more information.\\r\\n     */\\r\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\r\\n        return _roles[role].members.at(index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual {\\r\\n        _require(hasRole(_roles[role].adminRole, msg.sender), Errors.GRANT_SENDER_NOT_ADMIN);\\r\\n\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had already been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual {\\r\\n        _require(hasRole(_roles[role].adminRole, msg.sender), Errors.REVOKE_SENDER_NOT_ADMIN);\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual {\\r\\n        _require(account == msg.sender, Errors.RENOUNCE_SENDER_NOT_ALLOWED);\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n    }\\r\\n\\r\\n    function _grantRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.add(account)) {\\r\\n            emit RoleGranted(role, account, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revokeRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.remove(account)) {\\r\\n            emit RoleRevoked(role, account, msg.sender);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa60e5428f7e63ffcd1095ba7bf4c7015307a544d2526ad3cdeda530594fb5972\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        _require(address(this).balance >= amount, Errors.ADDRESS_INSUFFICIENT_BALANCE);\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        _require(success, Errors.ADDRESS_CANNOT_SEND_VALUE);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fd978a158a050a4ffd1581d4631227272649a9e2d83fc8890244aed4cc9d136\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\r\\n * `CREATE2` can be used to compute in advance the address where a smart\\r\\n * contract will be deployed, which allows for interesting new mechanisms known\\r\\n * as 'counterfactual interactions'.\\r\\n *\\r\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\r\\n * information.\\r\\n */\\r\\nlibrary Create2 {\\r\\n    /**\\r\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\r\\n     * will be deployed can be known in advance via {computeAddress}.\\r\\n     *\\r\\n     * The bytecode for a contract can be obtained from Solidity with\\r\\n     * `type(contractName).creationCode`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `bytecode` must not be empty.\\r\\n     * - `salt` must have not been used for `bytecode` already.\\r\\n     * - the factory must have a balance of at least `amount`.\\r\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\r\\n     */\\r\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\r\\n        address addr;\\r\\n        require(address(this).balance >= amount, 'CREATE2_INSUFFICIENT_BALANCE');\\r\\n        require(bytecode.length != 0, 'CREATE2_BYTECODE_ZERO');\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\r\\n        }\\r\\n        require(addr != address(0), 'CREATE2_DEPLOY_FAILED');\\r\\n        return addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\r\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\r\\n     */\\r\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\r\\n        return computeAddress(salt, bytecodeHash, address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\r\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\r\\n     */\\r\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\r\\n        bytes32 _data = keccak256(\\r\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\r\\n        );\\r\\n        return address(uint256(_data));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4b8c72c4e5c57d881dc2cf6e27b0a2ad52b9591d06824a9b394ce786bcb5e400\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            msg.sender,\\r\\n            _allowances[sender][msg.sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender].sub(subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        _require(sender != address(0), Errors.ERC20_TRANSFER_FROM_ZERO_ADDRESS);\\r\\n        _require(recipient != address(0), Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS);\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_BALANCE);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        _require(account != address(0), Errors.ERC20_MINT_TO_ZERO_ADDRESS);\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        _require(account != address(0), Errors.ERC20_BURN_FROM_ZERO_ADDRESS);\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        _require(owner != address(0), Errors.ERC20_APPROVE_FROM_ZERO_ADDRESS);\\r\\n        _require(spender != address(0), Errors.ERC20_APPROVE_TO_ZERO_ADDRESS);\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0xb61ac3228d69413be9c238cf15617b3f9d9eb900439d44455f0c4e6bde29dcc5\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\nabstract contract ERC20Burnable is ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) public virtual {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) public virtual {\\r\\n        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\r\\n\\r\\n        _approve(account, msg.sender, decreasedAllowance);\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x354da71a1024970dcf1b59e0dfca977598ac0804d6e9b10409db8a6b0e6a7636\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\n// Based on the EnumerableSet library from OpenZeppelin contracts, altered to remove the base private functions that\\r\\n// work on bytes32, replacing them with a native implementation for address values, to reduce bytecode size and runtime\\r\\n// costs.\\r\\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\\r\\n    // AddressSet, which uses address keys natively, resulting in more dense bytecode.\\r\\n\\r\\n    struct AddressSet {\\r\\n        // Storage of set values\\r\\n        address[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(address => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        if (!contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\r\\n\\r\\n            address lastValue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastValue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        _require(set._values.length > index, Errors.OUT_OF_BOUNDS);\\r\\n        return unchecked_at(set, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\r\\n     * than {length}). O(1).\\r\\n     *\\r\\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\r\\n     * within bounds.\\r\\n     */\\r\\n    function unchecked_at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc6f6b7bb4e516ce59661403feb9534d05bebd70f2165dfba93f8f1ffe8c06c6b\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x1a55047baff95c6f63e55168d5767462a1ef6f12e131b2ad56f30b3df97b7d0e\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, uint256 errorCode) internal pure returns (uint256) {\\r\\n        _require(b <= a, errorCode);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdd69c9145331a82b4f2a762ae75a062693085f78d4db60551733d3fd427172a8\",\"license\":\"MIT\"},\"contracts/test/TestToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../lib/openzeppelin/ERC20.sol\\\";\\r\\nimport \\\"../lib/openzeppelin/ERC20Burnable.sol\\\";\\r\\nimport \\\"../lib/openzeppelin/AccessControl.sol\\\";\\r\\n\\r\\ncontract TestToken is AccessControl, ERC20, ERC20Burnable {\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    constructor(\\r\\n        address admin,\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint8 decimals\\r\\n    ) ERC20(name, symbol) {\\r\\n        _setupDecimals(decimals);\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n        _setupRole(MINTER_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    function mint(address recipient, uint256 amount) external {\\r\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"NOT_MINTER\\\");\\r\\n        _mint(recipient, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x64aff46d0ae89ef123f1a476ead856b7fcb6a5e189c45426d82cf7e7b83b1f79\",\"license\":\"GPL-3.0-or-later\"},\"contracts/test/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../lib/openzeppelin/Address.sol\\\";\\r\\nimport \\\"../lib/openzeppelin/Create2.sol\\\";\\r\\n\\r\\nimport \\\"./TestToken.sol\\\";\\r\\n\\r\\ncontract TokenFactory {\\r\\n    using Address for address;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    EnumerableSet.AddressSet private _tokens;\\r\\n\\r\\n    event TokenCreated(address indexed token);\\r\\n\\r\\n    constructor() {\\r\\n        // solhint-disable-previous-line no-empty-blocks\\r\\n    }\\r\\n\\r\\n    function getTotalTokens() external view returns (uint256) {\\r\\n        return _tokens.length();\\r\\n    }\\r\\n\\r\\n    function getTokens(uint256 start, uint256 end) external view returns (address[] memory) {\\r\\n        require((end >= start) && (end - start) <= _tokens.length(), \\\"OUT_OF_BOUNDS\\\");\\r\\n\\r\\n        address[] memory token = new address[](end - start);\\r\\n        for (uint256 i = 0; i < token.length; ++i) {\\r\\n            token[i] = _tokens.at(i + start);\\r\\n        }\\r\\n\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    function create(\\r\\n        address admin,\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint8 decimals\\r\\n    ) external returns (address) {\\r\\n        bytes memory creationCode = abi.encodePacked(\\r\\n            type(TestToken).creationCode,\\r\\n            abi.encode(admin, name, symbol, decimals)\\r\\n        );\\r\\n\\r\\n        address expectedToken = Create2.computeAddress(0, keccak256(creationCode));\\r\\n\\r\\n        if (expectedToken.isContract()) {\\r\\n            return expectedToken;\\r\\n        } else {\\r\\n            address token = Create2.deploy(0, 0, creationCode);\\r\\n            assert(token == expectedToken);\\r\\n\\r\\n            _tokens.add(token);\\r\\n            emit TokenCreated(token);\\r\\n\\r\\n            return token;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf19083460e6778c90a24412d227471bae53622440bddd75d34f3eb73dacf0e19\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061210a806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c8063494cfc6c146200004b578063ecbfd4b6146200007a578063f08b82e614620000a0575b600080fd5b620000626200005c3660046200074a565b620000b9565b604051620000719190620008ac565b60405180910390f35b620000916200008b3660046200069e565b620001c6565b60405162000071919062000831565b620000aa6200032c565b604051620000719190620009e4565b6060828210158015620000d95750620000d360006200033f565b83830311155b6200011b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001129062000908565b60405180910390fd5b606083830367ffffffffffffffff811180156200013757600080fd5b5060405190808252806020026020018201604052801562000162578160200160208202803683370190505b50905060005b8151811015620001bc5762000181600082870162000343565b8282815181106200018e57fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010162000168565b5090505b92915050565b6000606060405180602001620001dc906200060e565b601f1982820381018352601f9091011660408190526200020790889088908890889060200162000852565b60408051601f1981840301815290829052620002279291602001620007fe565b60405160208183030381529060405290506000620002506000801b83805190602001206200036a565b9050620002738173ffffffffffffffffffffffffffffffffffffffff1662000379565b1562000283579150620003249050565b6000620002928180856200037f565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620002ca57fe5b620002d760008262000455565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907f2e2b3f61b70d2d131b2a807371103cc98d51adcaa5e9a8f9c32658ad8426e74e90600090a2925062000324915050565b949350505050565b60006200033a60006200033f565b905090565b5490565b8154600090620003579083106064620004e2565b620003638383620004f7565b9392505050565b60006200036383833062000532565b3b151590565b60008084471015620003bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000112906200093f565b8251620003fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200011290620009ad565b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff811662000324576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001129062000976565b600062000463838362000573565b620004d957508154600180820184556000848152602080822090930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915585549082528286019093526040902091909155620001c0565b506000620001c0565b81620004f357620004f381620005a1565b5050565b60008260000182815481106200050957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169392505050565b60008060ff60f81b8386866040516020016200055294939291906200079a565b60408051808303601f19018152919052805160209091012095945050505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001919091016020526040902054151590565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6116b48062000a2183390190565b600082601f8301126200062d578081fd5b813567ffffffffffffffff8082111562000645578283fd5b6040516020601f19601f850116820101818110838211171562000666578485fd5b6040528281529250828483016020018610156200068257600080fd5b8260208601602083013760006020848301015250505092915050565b60008060008060808587031215620006b4578384fd5b843573ffffffffffffffffffffffffffffffffffffffff81168114620006d8578485fd5b9350602085013567ffffffffffffffff80821115620006f5578485fd5b62000703888389016200061c565b9450604087013591508082111562000719578384fd5b5062000728878288016200061c565b925050606085013560ff811681146200073f578182fd5b939692955090935050565b600080604083850312156200075d578182fd5b50508035926020909101359150565b6000815180845262000786816020860160208601620009ed565b601f01601f19169290920160200192915050565b7fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b6000835162000812818460208801620009ed565b83519083019062000828818360208801620009ed565b01949350505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff86168252608060208301526200088360808301866200076c565b82810360408401526200089781866200076c565b91505060ff8316606083015295945050505050565b6020808252825182820181905260009190848201906040850190845b81811015620008fc57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101620008c8565b50909695505050505050565b6020808252600d908201527f4f55545f4f465f424f554e445300000000000000000000000000000000000000604082015260600190565b6020808252601c908201527f435245415445325f494e53554646494349454e545f42414c414e434500000000604082015260600190565b60208082526015908201527f435245415445325f4445504c4f595f4641494c45440000000000000000000000604082015260600190565b60208082526015908201527f435245415445325f42595445434f44455f5a45524f0000000000000000000000604082015260600190565b90815260200190565b60005b8381101562000a0a578181015183820152602001620009f0565b8381111562000a1a576000848401525b5050505056fe60806040523480156200001157600080fd5b50604051620016b4380380620016b4833981810160405260808110156200003757600080fd5b8151602083018051604051929492938301929190846401000000008211156200005f57600080fd5b9083019060208201858111156200007557600080fd5b82516401000000008111828201881017156200009057600080fd5b82525081516020918201929091019080838360005b83811015620000bf578181015183820152602001620000a5565b50505050905090810190601f168015620000ed5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011157600080fd5b9083019060208201858111156200012757600080fd5b82516401000000008111828201881017156200014257600080fd5b82525081516020918201929091019080838360005b838110156200017157818101518382015260200162000157565b50505050905090810190601f1680156200019f5780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001c4916004918501906200034f565b508051620001da9060059060208401906200034f565b50506006805460ff1916601217905550620001f58162000238565b620002026000856200024e565b6200022e7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6856200024e565b50505050620003eb565b6006805460ff191660ff92909216919091179055565b6200025a82826200025e565b5050565b6000828152602081815260409091206200028391839062000aad620002c5821b17901c565b156200025a5760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000620002d383836200032e565b6200032457508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b0386169081179091558554908252828601909352604090209190915562000328565b5060005b92915050565b6001600160a01b031660009081526001919091016020526040902054151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200039257805160ff1916838001178555620003c2565b82800160010185558215620003c2579182015b82811115620003c2578251825591602001919060010190620003a5565b50620003d0929150620003d4565b5090565b5b80821115620003d05760008155600101620003d5565b6112b980620003fb6000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806370a08231116100e3578063a457c2d71161008c578063d539139311610066578063d539139314610587578063d547741f1461058f578063dd62ed3e146105c85761018d565b8063a457c2d7146104f8578063a9059cbb14610531578063ca15c8731461056a5761018d565b806391d14854116100bd57806391d14854146104af57806395d89b41146104e8578063a217fddf146104f05761018d565b806370a08231146103f757806379cc67901461042a5780639010d07c146104635761018d565b80632f2ff15d11610145578063395093511161011f578063395093511461036857806340c10f19146103a157806342966c68146103da5761018d565b80632f2ff15d146102d6578063313ce5671461031157806336568abe1461032f5761018d565b806318160ddd1161017657806318160ddd1461025c57806323b872dd14610276578063248a9ca3146102b95761018d565b806306fdde0314610192578063095ea7b31461020f575b600080fd5b61019a610603565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d45781810151838201526020016101bc565b50505050905090810190601f1680156102015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102486004803603604081101561022557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356106b7565b604080519115158252519081900360200190f35b6102646106ce565b60408051918252519081900360200190f35b6102486004803603606081101561028c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356106d4565b610264600480360360208110156102cf57600080fd5b5035610735565b61030f600480360360408110156102ec57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff1661074a565b005b610319610780565b6040805160ff9092168252519081900360200190f35b61030f6004803603604081101561034557600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610789565b6102486004803603604081101561037e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107b7565b61030f600480360360408110156103b757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107fa565b61030f600480360360208110156103f057600080fd5b5035610899565b6102646004803603602081101561040d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108a6565b61030f6004803603604081101561044057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356108ce565b6104866004803603604081101561047957600080fd5b5080359060200135610904565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610248600480360360408110156104c557600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610923565b61019a61093b565b6102646109ba565b6102486004803603604081101561050e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109bf565b6102486004803603604081101561054757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a05565b6102646004803603602081101561058057600080fd5b5035610a12565b610264610a29565b61030f600480360360408110156105a557600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610a4d565b610264600480360360408110156105de57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610a75565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106ad5780601f10610682576101008083540402835291602001916106ad565b820191906000526020600020905b81548152906001019060200180831161069057829003601f168201915b5050505050905090565b60006106c4338484610b35565b5060015b92915050565b60035490565b60006106e1848484610bec565b73ffffffffffffffffffffffffffffffffffffffff841660009081526002602090815260408083203380855292529091205461072b918691610726908661019e610d17565b610b35565b5060019392505050565b60009081526020819052604090206002015490565b6000828152602081905260409020600201546107729061076a9033610923565b6101a6610d2d565b61077c8282610d3b565b5050565b60065460ff1690565b6107ad73ffffffffffffffffffffffffffffffffffffffff821633146101a8610d2d565b61077c8282610da1565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916106c49185906107269086610e07565b6108247f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610923565b61088f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f4d494e54455200000000000000000000000000000000000000000000604482015290519081900360640190fd5b61077c8282610e19565b6108a33382610eee565b50565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b60006108e8826101a16108e18633610a75565b9190610d17565b90506108f5833383610b35565b6108ff8383610eee565b505050565b600082815260208190526040812061091c9083610fd9565b9392505050565b600082815260208190526040812061091c9083610ff5565b60058054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106ad5780601f10610682576101008083540402835291602001916106ad565b600081565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916106c4918590610726908661019f610d17565b60006106c4338484610bec565b60008181526020819052604081206106c890611023565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6000828152602081905260409020600201546107ad90610a6d9033610923565b6101a7610d2d565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205490565b6000610ab98383610ff5565b610b2d57508154600180820184556000848152602080822090930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616908117909155855490825282860190935260409020919091556106c8565b5060006106c8565b610b5973ffffffffffffffffffffffffffffffffffffffff8416151561019c610d2d565b610b7d73ffffffffffffffffffffffffffffffffffffffff8316151561019d610d2d565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b610c1073ffffffffffffffffffffffffffffffffffffffff84161515610198610d2d565b610c3473ffffffffffffffffffffffffffffffffffffffff83161515610199610d2d565b610c3f8383836108ff565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054610c7290826101a0610d17565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054610cae9082610e07565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000610d268484111583610d2d565b5050900390565b8161077c5761077c81611027565b6000828152602081905260409020610d539082610aad565b1561077c57604051339073ffffffffffffffffffffffffffffffffffffffff83169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000828152602081905260409020610db99082611094565b1561077c57604051339073ffffffffffffffffffffffffffffffffffffffff83169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b600082820161091c8482101583610d2d565b610e3d73ffffffffffffffffffffffffffffffffffffffff8316151561019a610d2d565b610e49600083836108ff565b600354610e569082610e07565b60035573ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054610e899082610e07565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610f1273ffffffffffffffffffffffffffffffffffffffff8316151561019b610d2d565b610f1e826000836108ff565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054610f5190826101a1610d17565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902055600354610f84908261123b565b60035560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b8154600090610feb9083106064610d2d565b61091c8383611249565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001919091016020526040902054151590565b5490565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205480156112315783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80830191908101906000908790839081106110fc57fe5b600091825260209091200154875473ffffffffffffffffffffffffffffffffffffffff9091169150819088908590811061113257fe5b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559183168152600189810190925260409020908401905586548790806111a057fe5b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff881682526001898101909152604082209190915594506106c89350505050565b60009150506106c8565b600061091c83836001610d17565b600082600001828154811061125a57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16939250505056fea2646970667358221220c07e82c3e3c9994106db119c7cfd3b0f17217311542f8b4be57e7e5b98371afb64736f6c63430007010033a26469706673582212201b63377e846cf419a6c1536ca88a66b5962869b87662f2e6845a1722a7fa0be664736f6c63430007010033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c8063494cfc6c146200004b578063ecbfd4b6146200007a578063f08b82e614620000a0575b600080fd5b620000626200005c3660046200074a565b620000b9565b604051620000719190620008ac565b60405180910390f35b620000916200008b3660046200069e565b620001c6565b60405162000071919062000831565b620000aa6200032c565b604051620000719190620009e4565b6060828210158015620000d95750620000d360006200033f565b83830311155b6200011b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001129062000908565b60405180910390fd5b606083830367ffffffffffffffff811180156200013757600080fd5b5060405190808252806020026020018201604052801562000162578160200160208202803683370190505b50905060005b8151811015620001bc5762000181600082870162000343565b8282815181106200018e57fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010162000168565b5090505b92915050565b6000606060405180602001620001dc906200060e565b601f1982820381018352601f9091011660408190526200020790889088908890889060200162000852565b60408051601f1981840301815290829052620002279291602001620007fe565b60405160208183030381529060405290506000620002506000801b83805190602001206200036a565b9050620002738173ffffffffffffffffffffffffffffffffffffffff1662000379565b1562000283579150620003249050565b6000620002928180856200037f565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620002ca57fe5b620002d760008262000455565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907f2e2b3f61b70d2d131b2a807371103cc98d51adcaa5e9a8f9c32658ad8426e74e90600090a2925062000324915050565b949350505050565b60006200033a60006200033f565b905090565b5490565b8154600090620003579083106064620004e2565b620003638383620004f7565b9392505050565b60006200036383833062000532565b3b151590565b60008084471015620003bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000112906200093f565b8251620003fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200011290620009ad565b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff811662000324576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001129062000976565b600062000463838362000573565b620004d957508154600180820184556000848152602080822090930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915585549082528286019093526040902091909155620001c0565b506000620001c0565b81620004f357620004f381620005a1565b5050565b60008260000182815481106200050957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169392505050565b60008060ff60f81b8386866040516020016200055294939291906200079a565b60408051808303601f19018152919052805160209091012095945050505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001919091016020526040902054151590565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6116b48062000a2183390190565b600082601f8301126200062d578081fd5b813567ffffffffffffffff8082111562000645578283fd5b6040516020601f19601f850116820101818110838211171562000666578485fd5b6040528281529250828483016020018610156200068257600080fd5b8260208601602083013760006020848301015250505092915050565b60008060008060808587031215620006b4578384fd5b843573ffffffffffffffffffffffffffffffffffffffff81168114620006d8578485fd5b9350602085013567ffffffffffffffff80821115620006f5578485fd5b62000703888389016200061c565b9450604087013591508082111562000719578384fd5b5062000728878288016200061c565b925050606085013560ff811681146200073f578182fd5b939692955090935050565b600080604083850312156200075d578182fd5b50508035926020909101359150565b6000815180845262000786816020860160208601620009ed565b601f01601f19169290920160200192915050565b7fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b6000835162000812818460208801620009ed565b83519083019062000828818360208801620009ed565b01949350505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff86168252608060208301526200088360808301866200076c565b82810360408401526200089781866200076c565b91505060ff8316606083015295945050505050565b6020808252825182820181905260009190848201906040850190845b81811015620008fc57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101620008c8565b50909695505050505050565b6020808252600d908201527f4f55545f4f465f424f554e445300000000000000000000000000000000000000604082015260600190565b6020808252601c908201527f435245415445325f494e53554646494349454e545f42414c414e434500000000604082015260600190565b60208082526015908201527f435245415445325f4445504c4f595f4641494c45440000000000000000000000604082015260600190565b60208082526015908201527f435245415445325f42595445434f44455f5a45524f0000000000000000000000604082015260600190565b90815260200190565b60005b8381101562000a0a578181015183820152602001620009f0565b8381111562000a1a576000848401525b5050505056fe60806040523480156200001157600080fd5b50604051620016b4380380620016b4833981810160405260808110156200003757600080fd5b8151602083018051604051929492938301929190846401000000008211156200005f57600080fd5b9083019060208201858111156200007557600080fd5b82516401000000008111828201881017156200009057600080fd5b82525081516020918201929091019080838360005b83811015620000bf578181015183820152602001620000a5565b50505050905090810190601f168015620000ed5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011157600080fd5b9083019060208201858111156200012757600080fd5b82516401000000008111828201881017156200014257600080fd5b82525081516020918201929091019080838360005b838110156200017157818101518382015260200162000157565b50505050905090810190601f1680156200019f5780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001c4916004918501906200034f565b508051620001da9060059060208401906200034f565b50506006805460ff1916601217905550620001f58162000238565b620002026000856200024e565b6200022e7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6856200024e565b50505050620003eb565b6006805460ff191660ff92909216919091179055565b6200025a82826200025e565b5050565b6000828152602081815260409091206200028391839062000aad620002c5821b17901c565b156200025a5760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000620002d383836200032e565b6200032457508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b0386169081179091558554908252828601909352604090209190915562000328565b5060005b92915050565b6001600160a01b031660009081526001919091016020526040902054151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200039257805160ff1916838001178555620003c2565b82800160010185558215620003c2579182015b82811115620003c2578251825591602001919060010190620003a5565b50620003d0929150620003d4565b5090565b5b80821115620003d05760008155600101620003d5565b6112b980620003fb6000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806370a08231116100e3578063a457c2d71161008c578063d539139311610066578063d539139314610587578063d547741f1461058f578063dd62ed3e146105c85761018d565b8063a457c2d7146104f8578063a9059cbb14610531578063ca15c8731461056a5761018d565b806391d14854116100bd57806391d14854146104af57806395d89b41146104e8578063a217fddf146104f05761018d565b806370a08231146103f757806379cc67901461042a5780639010d07c146104635761018d565b80632f2ff15d11610145578063395093511161011f578063395093511461036857806340c10f19146103a157806342966c68146103da5761018d565b80632f2ff15d146102d6578063313ce5671461031157806336568abe1461032f5761018d565b806318160ddd1161017657806318160ddd1461025c57806323b872dd14610276578063248a9ca3146102b95761018d565b806306fdde0314610192578063095ea7b31461020f575b600080fd5b61019a610603565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d45781810151838201526020016101bc565b50505050905090810190601f1680156102015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102486004803603604081101561022557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356106b7565b604080519115158252519081900360200190f35b6102646106ce565b60408051918252519081900360200190f35b6102486004803603606081101561028c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356106d4565b610264600480360360208110156102cf57600080fd5b5035610735565b61030f600480360360408110156102ec57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff1661074a565b005b610319610780565b6040805160ff9092168252519081900360200190f35b61030f6004803603604081101561034557600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610789565b6102486004803603604081101561037e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107b7565b61030f600480360360408110156103b757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107fa565b61030f600480360360208110156103f057600080fd5b5035610899565b6102646004803603602081101561040d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108a6565b61030f6004803603604081101561044057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356108ce565b6104866004803603604081101561047957600080fd5b5080359060200135610904565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610248600480360360408110156104c557600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610923565b61019a61093b565b6102646109ba565b6102486004803603604081101561050e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109bf565b6102486004803603604081101561054757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a05565b6102646004803603602081101561058057600080fd5b5035610a12565b610264610a29565b61030f600480360360408110156105a557600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610a4d565b610264600480360360408110156105de57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610a75565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106ad5780601f10610682576101008083540402835291602001916106ad565b820191906000526020600020905b81548152906001019060200180831161069057829003601f168201915b5050505050905090565b60006106c4338484610b35565b5060015b92915050565b60035490565b60006106e1848484610bec565b73ffffffffffffffffffffffffffffffffffffffff841660009081526002602090815260408083203380855292529091205461072b918691610726908661019e610d17565b610b35565b5060019392505050565b60009081526020819052604090206002015490565b6000828152602081905260409020600201546107729061076a9033610923565b6101a6610d2d565b61077c8282610d3b565b5050565b60065460ff1690565b6107ad73ffffffffffffffffffffffffffffffffffffffff821633146101a8610d2d565b61077c8282610da1565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916106c49185906107269086610e07565b6108247f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610923565b61088f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f4d494e54455200000000000000000000000000000000000000000000604482015290519081900360640190fd5b61077c8282610e19565b6108a33382610eee565b50565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b60006108e8826101a16108e18633610a75565b9190610d17565b90506108f5833383610b35565b6108ff8383610eee565b505050565b600082815260208190526040812061091c9083610fd9565b9392505050565b600082815260208190526040812061091c9083610ff5565b60058054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106ad5780601f10610682576101008083540402835291602001916106ad565b600081565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916106c4918590610726908661019f610d17565b60006106c4338484610bec565b60008181526020819052604081206106c890611023565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6000828152602081905260409020600201546107ad90610a6d9033610923565b6101a7610d2d565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205490565b6000610ab98383610ff5565b610b2d57508154600180820184556000848152602080822090930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616908117909155855490825282860190935260409020919091556106c8565b5060006106c8565b610b5973ffffffffffffffffffffffffffffffffffffffff8416151561019c610d2d565b610b7d73ffffffffffffffffffffffffffffffffffffffff8316151561019d610d2d565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b610c1073ffffffffffffffffffffffffffffffffffffffff84161515610198610d2d565b610c3473ffffffffffffffffffffffffffffffffffffffff83161515610199610d2d565b610c3f8383836108ff565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054610c7290826101a0610d17565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054610cae9082610e07565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000610d268484111583610d2d565b5050900390565b8161077c5761077c81611027565b6000828152602081905260409020610d539082610aad565b1561077c57604051339073ffffffffffffffffffffffffffffffffffffffff83169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000828152602081905260409020610db99082611094565b1561077c57604051339073ffffffffffffffffffffffffffffffffffffffff83169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b600082820161091c8482101583610d2d565b610e3d73ffffffffffffffffffffffffffffffffffffffff8316151561019a610d2d565b610e49600083836108ff565b600354610e569082610e07565b60035573ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054610e899082610e07565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610f1273ffffffffffffffffffffffffffffffffffffffff8316151561019b610d2d565b610f1e826000836108ff565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054610f5190826101a1610d17565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902055600354610f84908261123b565b60035560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b8154600090610feb9083106064610d2d565b61091c8383611249565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001919091016020526040902054151590565b5490565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205480156112315783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80830191908101906000908790839081106110fc57fe5b600091825260209091200154875473ffffffffffffffffffffffffffffffffffffffff9091169150819088908590811061113257fe5b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559183168152600189810190925260409020908401905586548790806111a057fe5b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff881682526001898101909152604082209190915594506106c89350505050565b60009150506106c8565b600061091c83836001610d17565b600082600001828154811061125a57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16939250505056fea2646970667358221220c07e82c3e3c9994106db119c7cfd3b0f17217311542f8b4be57e7e5b98371afb64736f6c63430007010033a26469706673582212201b63377e846cf419a6c1536ca88a66b5962869b87662f2e6845a1722a7fa0be664736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15460,
        "contract": "contracts/test/TokenFactory.sol:TokenFactory",
        "label": "_tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)4722_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4722_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4717,
            "contract": "contracts/test/TokenFactory.sol:TokenFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4721,
            "contract": "contracts/test/TokenFactory.sol:TokenFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}