{
  "language": "Solidity",
  "sources": {
    "contracts/vault/Vault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./interfaces/IAuthorizer.sol\";\r\nimport \"./interfaces/IWETH.sol\";\r\n\r\nimport \"./VaultAuthorization.sol\";\r\nimport \"./FlashLoans.sol\";\r\nimport \"./Swaps.sol\";\r\n\r\n/**\r\n * @dev The `Vault` is Balancer V2's core contract. A single instance of it exists for the entire network, and it is the\r\n * entity used to interact with Pools by Liquidity Providers who join and exit them, Traders who swap, and Asset\r\n * Managers who withdraw and deposit tokens.\r\n *\r\n * The `Vault`'s source code is split among a number of sub-contracts, with the goal of improving readability and making\r\n * understanding the system easier. Most sub-contracts have been marked as `abstract` to explicitly indicate that only\r\n * the full `Vault` is meant to be deployed.\r\n *\r\n * Roughly speaking, these are the contents of each sub-contract:\r\n *\r\n *  - `AssetManagers`: Pool token Asset Manager registry, and Asset Manager interactions.\r\n *  - `Fees`: set and compute protocol fees.\r\n *  - `FlashLoans`: flash loan transfers and fees.\r\n *  - `PoolBalances`: Pool joins and exits.\r\n *  - `PoolRegistry`: Pool registration, ID management, and basic queries.\r\n *  - `PoolTokens`: Pool token registration and registration, and balance queries.\r\n *  - `Swaps`: Pool swaps.\r\n *  - `UserBalance`: manage user balances (Internal Balance operations and external balance transfers)\r\n *  - `VaultAuthorization`: access control, relayers and signature validation.\r\n *\r\n * Additionally, the different Pool specializations are handled by the `GeneralPoolsBalance`,\r\n * `MinimalSwapInfoPoolsBalance` and `TwoTokenPoolsBalance` sub-contracts, which in turn make use of the\r\n * `BalanceAllocation` library.\r\n *\r\n * The most important goal of the `Vault` is to make token swaps use as little gas as possible. This is reflected in a\r\n * multitude of design decisions, from minor things like the format used to store Pool IDs, to major features such as\r\n * the different Pool specialization settings.\r\n *\r\n * Finally, the large number of tasks carried out by the Vault means its bytecode is very large, close to exceeding\r\n * the contract size limit imposed by EIP 170 (https://eips.ethereum.org/EIPS/eip-170). Manual tuning of the source code\r\n * was required to improve code generation and bring the bytecode size below this limit. This includes extensive\r\n * utilization of `internal` functions (particularly inside modifiers), usage of named return arguments, dedicated\r\n * storage access methods, dynamic revert reason generation, and usage of inline assembly, to name a few.\r\n */\r\ncontract Vault is VaultAuthorization, FlashLoans, Swaps {\r\n    constructor(\r\n        IAuthorizer authorizer,\r\n        IWETH weth,\r\n        uint256 pauseWindowDuration,\r\n        uint256 bufferPeriodDuration\r\n    ) VaultAuthorization(authorizer) AssetHelpers(weth) TemporarilyPausable(pauseWindowDuration, bufferPeriodDuration) {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    function setPaused(bool paused) external override nonReentrant authenticate {\r\n        _setPaused(paused);\r\n    }\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function WETH() external view override returns (IWETH) {\r\n        return _WETH();\r\n    }\r\n}\r\n"
    },
    "contracts/vault/interfaces/IAuthorizer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IAuthorizer {\r\n    /**\r\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\r\n     */\r\n    function canPerform(\r\n        bytes32 actionId,\r\n        address account,\r\n        address where\r\n    ) external view returns (bool);\r\n}\r\n"
    },
    "contracts/vault/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../../lib/openzeppelin/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\r\n * sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\r\n */\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n"
    },
    "contracts/vault/VaultAuthorization.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/helpers/Authentication.sol\";\r\nimport \"../lib/helpers/TemporarilyPausable.sol\";\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/helpers/SignaturesValidator.sol\";\r\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\r\n\r\nimport \"./interfaces/IVault.sol\";\r\nimport \"./interfaces/IAuthorizer.sol\";\r\n\r\n/**\r\n * @dev Manages access control of Vault permissioned functions by relying on the Authorizer and signature validation.\r\n *\r\n * Additionally handles relayer access and approval.\r\n */\r\nabstract contract VaultAuthorization is\r\n    IVault,\r\n    ReentrancyGuard,\r\n    Authentication,\r\n    SignaturesValidator,\r\n    TemporarilyPausable\r\n{\r\n    // Ideally, we'd store the type hashes as immutable state variables to avoid computing the hash at runtime, but\r\n    // unfortunately immutable variables cannot be used in assembly, so we just keep the precomputed hashes instead.\r\n\r\n    // _JOIN_TYPE_HASH = keccak256(\"JoinPool(bytes calldata,address sender,uint256 nonce,uint256 deadline)\");\r\n    bytes32 private constant _JOIN_TYPE_HASH = 0x3f7b71252bd19113ff48c19c6e004a9bcfcca320a0d74d58e85877cbd7dcae58;\r\n\r\n    // _EXIT_TYPE_HASH = keccak256(\"ExitPool(bytes calldata,address sender,uint256 nonce,uint256 deadline)\");\r\n    bytes32 private constant _EXIT_TYPE_HASH = 0x8bbc57f66ea936902f50a71ce12b92c43f3c5340bb40c27c4e90ab84eeae3353;\r\n\r\n    // _SWAP_TYPE_HASH = keccak256(\"Swap(bytes calldata,address sender,uint256 nonce,uint256 deadline)\");\r\n    bytes32 private constant _SWAP_TYPE_HASH = 0xe192dcbc143b1e244ad73b813fd3c097b832ad260a157340b4e5e5beda067abe;\r\n\r\n    // _BATCH_SWAP_TYPE_HASH = keccak256(\"BatchSwap(bytes calldata,address sender,uint256 nonce,uint256 deadline)\");\r\n    bytes32 private constant _BATCH_SWAP_TYPE_HASH = 0x9bfc43a4d98313c6766986ffd7c916c7481566d9f224c6819af0a53388aced3a;\r\n\r\n    // _SET_RELAYER_TYPE_HASH =\r\n    //     keccak256(\"SetRelayerApproval(bytes calldata,address sender,uint256 nonce,uint256 deadline)\");\r\n    bytes32\r\n        private constant _SET_RELAYER_TYPE_HASH = 0xa3f865aa351e51cfeb40f5178d1564bb629fe9030b83caf6361d1baaf5b90b5a;\r\n\r\n    IAuthorizer private _authorizer;\r\n    mapping(address => mapping(address => bool)) private _approvedRelayers;\r\n\r\n    /**\r\n     * @dev Reverts unless `user` is the caller, or the caller is approved by the Authorizer to call this function (that\r\n     * is, it is a relayer for that function), and either:\r\n     *  a) `user` approved the caller as a relayer (via `setRelayerApproval`), or\r\n     *  b) a valid signature from them was appended to the calldata.\r\n     *\r\n     * Should only be applied to external functions.\r\n     */\r\n    modifier authenticateFor(address user) {\r\n        _authenticateFor(user);\r\n        _;\r\n    }\r\n\r\n    constructor(IAuthorizer authorizer)\r\n        // The Vault is a singleton, so it simply uses its own address to disambiguate action identifiers.\r\n        Authentication(bytes32(uint256(address(this))))\r\n        SignaturesValidator(\"Balancer V2 Vault\")\r\n    {\r\n        _setAuthorizer(authorizer);\r\n    }\r\n\r\n    function setAuthorizer(IAuthorizer newAuthorizer) external override nonReentrant authenticate {\r\n        _setAuthorizer(newAuthorizer);\r\n    }\r\n\r\n    function _setAuthorizer(IAuthorizer newAuthorizer) private {\r\n        emit AuthorizerChanged(newAuthorizer);\r\n        _authorizer = newAuthorizer;\r\n    }\r\n\r\n    function getAuthorizer() external view override returns (IAuthorizer) {\r\n        return _authorizer;\r\n    }\r\n\r\n    function setRelayerApproval(\r\n        address sender,\r\n        address relayer,\r\n        bool approved\r\n    ) external override nonReentrant whenNotPaused authenticateFor(sender) {\r\n        _approvedRelayers[sender][relayer] = approved;\r\n        emit RelayerApprovalChanged(relayer, sender, approved);\r\n    }\r\n\r\n    function hasApprovedRelayer(address user, address relayer) external view override returns (bool) {\r\n        return _hasApprovedRelayer(user, relayer);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts unless `user` is the caller, or the caller is approved by the Authorizer to call the entry point\r\n     * function (that is, it is a relayer for that function) and either:\r\n     *  a) `user` approved the caller as a relayer (via `setRelayerApproval`), or\r\n     *  b) a valid signature from them was appended to the calldata.\r\n     */\r\n    function _authenticateFor(address user) internal {\r\n        if (msg.sender != user) {\r\n            // In this context, 'permission to call a function' means 'being a relayer for a function'.\r\n            _authenticateCaller();\r\n\r\n            // Being a relayer is not sufficient: `user` must have also approved the caller either via\r\n            // `setRelayerApproval`, or by providing a signature appended to the calldata.\r\n            if (!_hasApprovedRelayer(user, msg.sender)) {\r\n                _validateSignature(user, Errors.USER_DOESNT_ALLOW_RELAYER);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `user` approved `relayer` to act as a relayer for them.\r\n     */\r\n    function _hasApprovedRelayer(address user, address relayer) internal view returns (bool) {\r\n        return _approvedRelayers[user][relayer];\r\n    }\r\n\r\n    function _canPerform(bytes32 actionId, address user) internal view override returns (bool) {\r\n        // Access control is delegated to the Authorizer.\r\n        return _authorizer.canPerform(actionId, user, address(this));\r\n    }\r\n\r\n    function _typeHash() internal pure override returns (bytes32 hash) {\r\n        // This is a simple switch-case statement, trivially written in Solidity by chaining else-if statements, but the\r\n        // assembly implementation results in much denser bytecode.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // The function selector is located at the first 4 bytes of calldata. We copy the first full calldata\r\n            // 256 word, and then perform a logical shift to the right, moving the selector to the least significant\r\n            // 4 bytes.\r\n            let selector := shr(224, calldataload(0))\r\n\r\n            // With the selector in the least significant 4 bytes, we can use 4 byte literals with leading zeros,\r\n            // resulting in dense bytecode (PUSH4 opcodes).\r\n            switch selector\r\n                case 0xb95cac28 {\r\n                    hash := _JOIN_TYPE_HASH\r\n                }\r\n                case 0x8bdb3913 {\r\n                    hash := _EXIT_TYPE_HASH\r\n                }\r\n                case 0x52bbbe29 {\r\n                    hash := _SWAP_TYPE_HASH\r\n                }\r\n                case 0x945bcec9 {\r\n                    hash := _BATCH_SWAP_TYPE_HASH\r\n                }\r\n                case 0xfa6e671d {\r\n                    hash := _SET_RELAYER_TYPE_HASH\r\n                }\r\n                default {\r\n                    hash := 0x0000000000000000000000000000000000000000000000000000000000000000\r\n                }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/vault/FlashLoans.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n// This flash loan provider was based on the Aave protocol's open source\r\n// implementation and terminology and interfaces are intentionally kept\r\n// similar\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/openzeppelin/IERC20.sol\";\r\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\r\nimport \"../lib/openzeppelin/SafeERC20.sol\";\r\n\r\nimport \"./Fees.sol\";\r\nimport \"./interfaces/IFlashLoanRecipient.sol\";\r\n\r\n/**\r\n * @dev Handles Flash Loans through the Vault. Calls the `receiveFlashLoan` hook on the flash loan recipient\r\n * contract, which implements the `IFlashLoanRecipient` interface.\r\n */\r\nabstract contract FlashLoans is Fees, ReentrancyGuard, TemporarilyPausable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function flashLoan(\r\n        IFlashLoanRecipient recipient,\r\n        IERC20[] memory tokens,\r\n        uint256[] memory amounts,\r\n        bytes memory userData\r\n    ) external override nonReentrant whenNotPaused {\r\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\r\n\r\n        uint256[] memory feeAmounts = new uint256[](tokens.length);\r\n        uint256[] memory preLoanBalances = new uint256[](tokens.length);\r\n\r\n        // Used to ensure `tokens` is sorted in ascending order, which ensures token uniqueness.\r\n        IERC20 previousToken = IERC20(0);\r\n\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            IERC20 token = tokens[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            _require(token > previousToken, token == IERC20(0) ? Errors.ZERO_TOKEN : Errors.UNSORTED_TOKENS);\r\n            previousToken = token;\r\n\r\n            preLoanBalances[i] = token.balanceOf(address(this));\r\n            feeAmounts[i] = _calculateFlashLoanFeeAmount(amount);\r\n\r\n            _require(preLoanBalances[i] >= amount, Errors.INSUFFICIENT_FLASH_LOAN_BALANCE);\r\n            token.safeTransfer(address(recipient), amount);\r\n        }\r\n\r\n        recipient.receiveFlashLoan(tokens, amounts, feeAmounts, userData);\r\n\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            IERC20 token = tokens[i];\r\n            uint256 preLoanBalance = preLoanBalances[i];\r\n\r\n            // Checking for loan repayment first (without accounting for fees) makes for simpler debugging, and results\r\n            // in more accurate revert reasons if the flash loan protocol fee percentage is zero.\r\n            uint256 postLoanBalance = token.balanceOf(address(this));\r\n            _require(postLoanBalance >= preLoanBalance, Errors.INVALID_POST_LOAN_BALANCE);\r\n\r\n            // No need for checked arithmetic since we know the loan was fully repaid.\r\n            uint256 receivedFeeAmount = postLoanBalance - preLoanBalance;\r\n            _require(receivedFeeAmount >= feeAmounts[i], Errors.INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT);\r\n\r\n            _payFeeAmount(token, receivedFeeAmount);\r\n            emit FlashLoan(recipient, token, amounts[i], receivedFeeAmount);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/vault/Swaps.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/math/Math.sol\";\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/helpers/InputHelpers.sol\";\r\nimport \"../lib/openzeppelin/EnumerableMap.sol\";\r\nimport \"../lib/openzeppelin/EnumerableSet.sol\";\r\nimport \"../lib/openzeppelin/IERC20.sol\";\r\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\r\nimport \"../lib/openzeppelin/SafeCast.sol\";\r\nimport \"../lib/openzeppelin/SafeERC20.sol\";\r\n\r\nimport \"./PoolBalances.sol\";\r\nimport \"./interfaces/IPoolSwapStructs.sol\";\r\nimport \"./interfaces/IGeneralPool.sol\";\r\nimport \"./interfaces/IMinimalSwapInfoPool.sol\";\r\nimport \"./balances/BalanceAllocation.sol\";\r\n\r\n/**\r\n * Implements the Vault's high-level swap functionality.\r\n *\r\n * Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. They need not trust the Pool\r\n * contracts to do this: all security checks are made by the Vault.\r\n *\r\n * The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\r\n * In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\r\n * and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\r\n * More complex swaps, such as one 'token in' to multiple tokens out can be achieved by batching together\r\n * individual swaps.\r\n */\r\nabstract contract Swaps is ReentrancyGuard, PoolBalances {\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using EnumerableMap for EnumerableMap.IERC20ToBytes32Map;\r\n\r\n    using Math for int256;\r\n    using Math for uint256;\r\n    using SafeCast for uint256;\r\n    using BalanceAllocation for bytes32;\r\n\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        override\r\n        nonReentrant\r\n        whenNotPaused\r\n        authenticateFor(funds.sender)\r\n        returns (uint256 amountCalculated)\r\n    {\r\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\r\n        // solhint-disable-next-line not-rely-on-time\r\n        _require(block.timestamp <= deadline, Errors.SWAP_DEADLINE);\r\n\r\n        // This revert reason is for consistency with `batchSwap`: an equivalent `swap` performed using that function\r\n        // would result in this error.\r\n        _require(singleSwap.amount > 0, Errors.UNKNOWN_AMOUNT_IN_FIRST_SWAP);\r\n\r\n        IERC20 tokenIn = _translateToIERC20(singleSwap.assetIn);\r\n        IERC20 tokenOut = _translateToIERC20(singleSwap.assetOut);\r\n        _require(tokenIn != tokenOut, Errors.CANNOT_SWAP_SAME_TOKEN);\r\n\r\n        // Initializing each struct field one-by-one uses less gas than setting all at once.\r\n        IPoolSwapStructs.SwapRequest memory poolRequest;\r\n        poolRequest.poolId = singleSwap.poolId;\r\n        poolRequest.kind = singleSwap.kind;\r\n        poolRequest.tokenIn = tokenIn;\r\n        poolRequest.tokenOut = tokenOut;\r\n        poolRequest.amount = singleSwap.amount;\r\n        poolRequest.userData = singleSwap.userData;\r\n        poolRequest.from = funds.sender;\r\n        poolRequest.to = funds.recipient;\r\n        // The lastChangeBlock field is left uninitialized.\r\n\r\n        uint256 amountIn;\r\n        uint256 amountOut;\r\n\r\n        (amountCalculated, amountIn, amountOut) = _swapWithPool(poolRequest);\r\n        _require(singleSwap.kind == SwapKind.GIVEN_IN ? amountOut >= limit : amountIn <= limit, Errors.SWAP_LIMIT);\r\n\r\n        _receiveAsset(singleSwap.assetIn, amountIn, funds.sender, funds.fromInternalBalance);\r\n        _sendAsset(singleSwap.assetOut, amountOut, funds.recipient, funds.toInternalBalance);\r\n\r\n        // If the asset in is ETH, then `amountIn` ETH was wrapped into WETH.\r\n        _handleRemainingEth(_isETH(singleSwap.assetIn) ? amountIn : 0);\r\n    }\r\n\r\n    function batchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds,\r\n        int256[] memory limits,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        override\r\n        nonReentrant\r\n        whenNotPaused\r\n        authenticateFor(funds.sender)\r\n        returns (int256[] memory assetDeltas)\r\n    {\r\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\r\n        // solhint-disable-next-line not-rely-on-time\r\n        _require(block.timestamp <= deadline, Errors.SWAP_DEADLINE);\r\n\r\n        InputHelpers.ensureInputLengthMatch(assets.length, limits.length);\r\n\r\n        // Perform the swaps, updating the Pool token balances and computing the net Vault asset deltas.\r\n        assetDeltas = _swapWithPools(swaps, assets, funds, kind);\r\n\r\n        // Process asset deltas, by either transferring assets from the sender (for positive deltas) or to the recipient\r\n        // (for negative deltas).\r\n        uint256 wrappedEth = 0;\r\n        for (uint256 i = 0; i < assets.length; ++i) {\r\n            IAsset asset = assets[i];\r\n            int256 delta = assetDeltas[i];\r\n            _require(delta <= limits[i], Errors.SWAP_LIMIT);\r\n\r\n            if (delta > 0) {\r\n                uint256 toReceive = uint256(delta);\r\n                _receiveAsset(asset, toReceive, funds.sender, funds.fromInternalBalance);\r\n\r\n                if (_isETH(asset)) {\r\n                    wrappedEth = wrappedEth.add(toReceive);\r\n                }\r\n            } else if (delta < 0) {\r\n                uint256 toSend = uint256(-delta);\r\n                _sendAsset(asset, toSend, funds.recipient, funds.toInternalBalance);\r\n            }\r\n        }\r\n\r\n        // Handle any used and remaining ETH.\r\n        _handleRemainingEth(wrappedEth);\r\n    }\r\n\r\n    // For `_swapWithPools` to handle both 'given in' and 'given out' swaps, it internally tracks the 'given' amount\r\n    // (supplied by the caller), and the 'calculated' amount (returned by the Pool in response to the swap request).\r\n\r\n    /**\r\n     * @dev Given the two swap tokens and the swap kind, returns which one is the 'given' token (the token whose\r\n     * amount is supplied by the caller).\r\n     */\r\n    function _tokenGiven(\r\n        SwapKind kind,\r\n        IERC20 tokenIn,\r\n        IERC20 tokenOut\r\n    ) private pure returns (IERC20) {\r\n        return kind == SwapKind.GIVEN_IN ? tokenIn : tokenOut;\r\n    }\r\n\r\n    /**\r\n     * @dev Given the two swap tokens and the swap kind, returns which one is the 'calculated' token (the token whose\r\n     * amount is calculated by the Pool).\r\n     */\r\n    function _tokenCalculated(\r\n        SwapKind kind,\r\n        IERC20 tokenIn,\r\n        IERC20 tokenOut\r\n    ) private pure returns (IERC20) {\r\n        return kind == SwapKind.GIVEN_IN ? tokenOut : tokenIn;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an ordered pair (amountIn, amountOut) given the 'given' and 'calculated' amounts, and the swap kind.\r\n     */\r\n    function _getAmounts(\r\n        SwapKind kind,\r\n        uint256 amountGiven,\r\n        uint256 amountCalculated\r\n    ) private pure returns (uint256 amountIn, uint256 amountOut) {\r\n        if (kind == SwapKind.GIVEN_IN) {\r\n            (amountIn, amountOut) = (amountGiven, amountCalculated);\r\n        } else {\r\n            // SwapKind.GIVEN_OUT\r\n            (amountIn, amountOut) = (amountCalculated, amountGiven);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs all `swaps`, calling swap hooks on the Pool contracts and updating their balances. Does not cause\r\n     * any transfer of tokens - instead it returns the net Vault token deltas: positive if the Vault should receive\r\n     * tokens, and negative if it should send them.\r\n     */\r\n    function _swapWithPools(\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds,\r\n        SwapKind kind\r\n    ) private returns (int256[] memory assetDeltas) {\r\n        assetDeltas = new int256[](assets.length);\r\n\r\n        // These variables could be declared inside the loop, but that causes the compiler to allocate memory on each\r\n        // loop iteration, increasing gas costs.\r\n        BatchSwapStep memory batchSwapStep;\r\n        IPoolSwapStructs.SwapRequest memory poolRequest;\r\n\r\n        // These store data about the previous swap here to implement multihop logic across swaps.\r\n        IERC20 previousTokenCalculated;\r\n        uint256 previousAmountCalculated;\r\n\r\n        for (uint256 i = 0; i < swaps.length; ++i) {\r\n            batchSwapStep = swaps[i];\r\n\r\n            bool withinBounds = batchSwapStep.assetInIndex < assets.length &&\r\n                batchSwapStep.assetOutIndex < assets.length;\r\n            _require(withinBounds, Errors.OUT_OF_BOUNDS);\r\n\r\n            IERC20 tokenIn = _translateToIERC20(assets[batchSwapStep.assetInIndex]);\r\n            IERC20 tokenOut = _translateToIERC20(assets[batchSwapStep.assetOutIndex]);\r\n            _require(tokenIn != tokenOut, Errors.CANNOT_SWAP_SAME_TOKEN);\r\n\r\n            // Sentinel value for multihop logic\r\n            if (batchSwapStep.amount == 0) {\r\n                // When the amount given is zero, we use the calculated amount for the previous swap, as long as the\r\n                // current swap's given token is the previous calculated token. This makes it possible to swap a\r\n                // given amount of token A for token B, and then use the resulting token B amount to swap for token C.\r\n                _require(i > 0, Errors.UNKNOWN_AMOUNT_IN_FIRST_SWAP);\r\n                bool usingPreviousToken = previousTokenCalculated == _tokenGiven(kind, tokenIn, tokenOut);\r\n                _require(usingPreviousToken, Errors.MALCONSTRUCTED_MULTIHOP_SWAP);\r\n                batchSwapStep.amount = previousAmountCalculated;\r\n            }\r\n\r\n            // Initializing each struct field one-by-one uses less gas than setting all at once\r\n            poolRequest.poolId = batchSwapStep.poolId;\r\n            poolRequest.kind = kind;\r\n            poolRequest.tokenIn = tokenIn;\r\n            poolRequest.tokenOut = tokenOut;\r\n            poolRequest.amount = batchSwapStep.amount;\r\n            poolRequest.userData = batchSwapStep.userData;\r\n            poolRequest.from = funds.sender;\r\n            poolRequest.to = funds.recipient;\r\n            // The lastChangeBlock field is left uninitialized\r\n\r\n            uint256 amountIn;\r\n            uint256 amountOut;\r\n            (previousAmountCalculated, amountIn, amountOut) = _swapWithPool(poolRequest);\r\n\r\n            previousTokenCalculated = _tokenCalculated(kind, tokenIn, tokenOut);\r\n\r\n            // Accumulate Vault deltas across swaps\r\n            assetDeltas[batchSwapStep.assetInIndex] = assetDeltas[batchSwapStep.assetInIndex].add(amountIn.toInt256());\r\n            assetDeltas[batchSwapStep.assetOutIndex] = assetDeltas[batchSwapStep.assetOutIndex].sub(\r\n                amountOut.toInt256()\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a swap according to the parameters specified in `request`, calling the Pool's contract hook and\r\n     * updating the Pool's balance.\r\n     *\r\n     * Returns the amount of tokens going into or out of the Vault as a result of this swap, depending on the swap kind.\r\n     */\r\n    function _swapWithPool(IPoolSwapStructs.SwapRequest memory request)\r\n        private\r\n        returns (\r\n            uint256 amountCalculated,\r\n            uint256 amountIn,\r\n            uint256 amountOut\r\n        )\r\n    {\r\n        // Get the calculated amount from the Pool and update its balances\r\n        address pool = _getPoolAddress(request.poolId);\r\n        PoolSpecialization specialization = _getPoolSpecialization(request.poolId);\r\n\r\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\r\n            amountCalculated = _processTwoTokenPoolSwapRequest(request, IMinimalSwapInfoPool(pool));\r\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\r\n            amountCalculated = _processMinimalSwapInfoPoolSwapRequest(request, IMinimalSwapInfoPool(pool));\r\n        } else {\r\n            // PoolSpecialization.GENERAL\r\n            amountCalculated = _processGeneralPoolSwapRequest(request, IGeneralPool(pool));\r\n        }\r\n\r\n        (amountIn, amountOut) = _getAmounts(request.kind, request.amount, amountCalculated);\r\n        emit Swap(request.poolId, request.tokenIn, request.tokenOut, amountIn, amountOut);\r\n    }\r\n\r\n    function _processTwoTokenPoolSwapRequest(IPoolSwapStructs.SwapRequest memory request, IMinimalSwapInfoPool pool)\r\n        private\r\n        returns (uint256 amountCalculated)\r\n    {\r\n        // For gas efficiency reasons, this function uses low-level knowledge of how Two Token Pool balances are\r\n        // stored internally, instead of using getters and setters for all operations.\r\n\r\n        (\r\n            bytes32 tokenABalance,\r\n            bytes32 tokenBBalance,\r\n            TwoTokenPoolBalances storage poolBalances\r\n        ) = _getTwoTokenPoolSharedBalances(request.poolId, request.tokenIn, request.tokenOut);\r\n\r\n        // We have the two Pool balances, but we don't know which one is 'token in' or 'token out'.\r\n        bytes32 tokenInBalance;\r\n        bytes32 tokenOutBalance;\r\n\r\n        // In Two Token Pools, token A has a smaller address than token B\r\n        if (request.tokenIn < request.tokenOut) {\r\n            // in is A, out is B\r\n            tokenInBalance = tokenABalance;\r\n            tokenOutBalance = tokenBBalance;\r\n        } else {\r\n            // in is B, out is A\r\n            tokenOutBalance = tokenABalance;\r\n            tokenInBalance = tokenBBalance;\r\n        }\r\n\r\n        // Perform the swap request and compute the new balances for 'token in' and 'token out' after the swap\r\n        (tokenInBalance, tokenOutBalance, amountCalculated) = _callMinimalSwapInfoPoolOnSwapHook(\r\n            request,\r\n            pool,\r\n            tokenInBalance,\r\n            tokenOutBalance\r\n        );\r\n\r\n        // We check the token ordering again to create the new shared cash packed struct\r\n        poolBalances.sharedCash = request.tokenIn < request.tokenOut\r\n            ? BalanceAllocation.toSharedCash(tokenInBalance, tokenOutBalance) // in is A, out is B\r\n            : BalanceAllocation.toSharedCash(tokenOutBalance, tokenInBalance); // in is B, out is A\r\n    }\r\n\r\n    function _processMinimalSwapInfoPoolSwapRequest(\r\n        IPoolSwapStructs.SwapRequest memory request,\r\n        IMinimalSwapInfoPool pool\r\n    ) private returns (uint256 amountCalculated) {\r\n        bytes32 tokenInBalance = _getMinimalSwapInfoPoolBalance(request.poolId, request.tokenIn);\r\n        bytes32 tokenOutBalance = _getMinimalSwapInfoPoolBalance(request.poolId, request.tokenOut);\r\n\r\n        // Perform the swap request and compute the new balances for 'token in' and 'token out' after the swap\r\n        (tokenInBalance, tokenOutBalance, amountCalculated) = _callMinimalSwapInfoPoolOnSwapHook(\r\n            request,\r\n            pool,\r\n            tokenInBalance,\r\n            tokenOutBalance\r\n        );\r\n\r\n        _minimalSwapInfoPoolsBalances[request.poolId][request.tokenIn] = tokenInBalance;\r\n        _minimalSwapInfoPoolsBalances[request.poolId][request.tokenOut] = tokenOutBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Calls the onSwap hook for a Pool that implements IMinimalSwapInfoPool: both Minimal Swap Info and Two Token\r\n     * Pools do this.\r\n     */\r\n    function _callMinimalSwapInfoPoolOnSwapHook(\r\n        IPoolSwapStructs.SwapRequest memory request,\r\n        IMinimalSwapInfoPool pool,\r\n        bytes32 tokenInBalance,\r\n        bytes32 tokenOutBalance\r\n    )\r\n        internal\r\n        returns (\r\n            bytes32 newTokenInBalance,\r\n            bytes32 newTokenOutBalance,\r\n            uint256 amountCalculated\r\n        )\r\n    {\r\n        uint256 tokenInTotal = tokenInBalance.total();\r\n        uint256 tokenOutTotal = tokenOutBalance.total();\r\n        request.lastChangeBlock = Math.max(tokenInBalance.lastChangeBlock(), tokenOutBalance.lastChangeBlock());\r\n\r\n        // Perform the swap request callback, and compute the new balances for 'token in' and 'token out' after the swap\r\n        amountCalculated = pool.onSwap(request, tokenInTotal, tokenOutTotal);\r\n        (uint256 amountIn, uint256 amountOut) = _getAmounts(request.kind, request.amount, amountCalculated);\r\n\r\n        newTokenInBalance = tokenInBalance.increaseCash(amountIn);\r\n        newTokenOutBalance = tokenOutBalance.decreaseCash(amountOut);\r\n    }\r\n\r\n    function _processGeneralPoolSwapRequest(IPoolSwapStructs.SwapRequest memory request, IGeneralPool pool)\r\n        private\r\n        returns (uint256 amountCalculated)\r\n    {\r\n        bytes32 tokenInBalance;\r\n        bytes32 tokenOutBalance;\r\n\r\n        // We access both token indexes without checking existence, because we will do it manually immediately after.\r\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[request.poolId];\r\n        uint256 indexIn = poolBalances.unchecked_indexOf(request.tokenIn);\r\n        uint256 indexOut = poolBalances.unchecked_indexOf(request.tokenOut);\r\n\r\n        if (indexIn == 0 || indexOut == 0) {\r\n            // The tokens might not be registered because the Pool itself is not registered. We check this to provide a\r\n            // more accurate revert reason.\r\n            _ensureRegisteredPool(request.poolId);\r\n            _revert(Errors.TOKEN_NOT_REGISTERED);\r\n        }\r\n\r\n        // EnumerableMap stores indices *plus one* to use the zero index as a sentinel value - because these are valid,\r\n        // we can undo this.\r\n        indexIn -= 1;\r\n        indexOut -= 1;\r\n\r\n        uint256 tokenAmount = poolBalances.length();\r\n        uint256[] memory currentBalances = new uint256[](tokenAmount);\r\n\r\n        request.lastChangeBlock = 0;\r\n        for (uint256 i = 0; i < tokenAmount; i++) {\r\n            // Because the iteration is bounded by `tokenAmount`, and no tokens are registered or deregistered here, we\r\n            // know `i` is a valid token index and can use `unchecked_valueAt` to save storage reads.\r\n            bytes32 balance = poolBalances.unchecked_valueAt(i);\r\n\r\n            currentBalances[i] = balance.total();\r\n            request.lastChangeBlock = Math.max(request.lastChangeBlock, balance.lastChangeBlock());\r\n\r\n            if (i == indexIn) {\r\n                tokenInBalance = balance;\r\n            } else if (i == indexOut) {\r\n                tokenOutBalance = balance;\r\n            }\r\n        }\r\n\r\n        // Perform the swap request callback and compute the new balances for 'token in' and 'token out' after the swap\r\n        amountCalculated = pool.onSwap(request, currentBalances, indexIn, indexOut);\r\n        (uint256 amountIn, uint256 amountOut) = _getAmounts(request.kind, request.amount, amountCalculated);\r\n        tokenInBalance = tokenInBalance.increaseCash(amountIn);\r\n        tokenOutBalance = tokenOutBalance.decreaseCash(amountOut);\r\n\r\n        // Because no tokens were registered or deregistered between now or when we retrieved the indexes for\r\n        // 'token in' and 'token out', we can use `unchecked_setAt` to save storage reads.\r\n        poolBalances.unchecked_setAt(indexIn, tokenInBalance);\r\n        poolBalances.unchecked_setAt(indexOut, tokenOutBalance);\r\n    }\r\n\r\n    // This function is not marked as `nonReentrant` because the underlying mechanism relies on reentrancy\r\n    function queryBatchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds\r\n    ) external override returns (int256[] memory) {\r\n        // In order to accurately 'simulate' swaps, this function actually does perform the swaps, including calling the\r\n        // Pool hooks and updating balances in storage. However, once it computes the final Vault Deltas, it\r\n        // reverts unconditionally, returning this array as the revert data.\r\n        //\r\n        // By wrapping this reverting call, we can decode the deltas 'returned' and return them as a normal Solidity\r\n        // function would. The only caveat is the function becomes non-view, but off-chain clients can still call it\r\n        // via eth_call to get the expected result.\r\n        //\r\n        // This technique was inspired by the work from the Gnosis team in the Gnosis Safe contract:\r\n        // https://github.com/gnosis/safe-contracts/blob/v1.2.0/contracts/GnosisSafe.sol#L265\r\n        //\r\n        // Most of this function is implemented using inline assembly, as the actual work it needs to do is not\r\n        // significant, and Solidity is not particularly well-suited to generate this behavior, resulting in a large\r\n        // amount of generated bytecode.\r\n\r\n        if (msg.sender != address(this)) {\r\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\r\n            // the preceding if statement will be executed instead.\r\n\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success, ) = address(this).call(msg.data);\r\n\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                // This call should always revert to decode the actual asset deltas from the revert reason\r\n                switch success\r\n                    case 0 {\r\n                        // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\r\n                        // stored there as we take full control of the execution and then immediately return.\r\n\r\n                        // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\r\n                        // there was another revert reason and we should forward it.\r\n                        returndatacopy(0, 0, 0x04)\r\n                        let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\r\n\r\n                        // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\r\n                        if eq(eq(error, 0xfa61cc1200000000000000000000000000000000000000000000000000000000), 0) {\r\n                            returndatacopy(0, 0, returndatasize())\r\n                            revert(0, returndatasize())\r\n                        }\r\n\r\n                        // The returndata contains the signature, followed by the raw memory representation of an array:\r\n                        // length + data. We need to return an ABI-encoded representation of this array.\r\n                        // An ABI-encoded array contains an additional field when compared to its raw memory\r\n                        // representation: an offset to the location of the length. The offset itself is 32 bytes long,\r\n                        // so the smallest value we  can use is 32 for the data to be located immediately after it.\r\n                        mstore(0, 32)\r\n\r\n                        // We now copy the raw memory array from returndata into memory. Since the offset takes up 32\r\n                        // bytes, we start copying at address 0x20. We also get rid of the error signature, which takes\r\n                        // the first four bytes of returndata.\r\n                        let size := sub(returndatasize(), 0x04)\r\n                        returndatacopy(0x20, 0x04, size)\r\n\r\n                        // We finally return the ABI-encoded array, which has a total length equal to that of the array\r\n                        // (returndata), plus the 32 bytes for the offset.\r\n                        return(0, add(size, 32))\r\n                    }\r\n                    default {\r\n                        // This call should always revert, but we fail nonetheless if that didn't happen\r\n                        invalid()\r\n                    }\r\n            }\r\n        } else {\r\n            int256[] memory deltas = _swapWithPools(swaps, assets, funds, kind);\r\n\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                // We will return a raw representation of the array in memory, which is composed of a 32 byte length,\r\n                // followed by the 32 byte int256 values. Because revert expects a size in bytes, we multiply the array\r\n                // length (stored at `deltas`) by 32.\r\n                let size := mul(mload(deltas), 32)\r\n\r\n                // We send one extra value for the error signature \"QueryError(int256[])\" which is 0xfa61cc12.\r\n                // We store it in the previous slot to the `deltas` array. We know there will be at least one available\r\n                // slot due to how the memory scratch space works.\r\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\r\n                mstore(sub(deltas, 0x20), 0x00000000000000000000000000000000000000000000000000000000fa61cc12)\r\n                let start := sub(deltas, 0x04)\r\n\r\n                // When copying from `deltas` into returndata, we copy an additional 36 bytes to also return the array's\r\n                // length and the error signature.\r\n                revert(start, add(size, 36))\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lib/openzeppelin/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "contracts/lib/helpers/BalancerErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// solhint-disable\r\n\r\n/**\r\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\r\n * supported.\r\n */\r\nfunction _require(bool condition, uint256 errorCode) pure {\r\n    if (!condition) _revert(errorCode);\r\n}\r\n\r\n/**\r\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\r\n */\r\nfunction _revert(uint256 errorCode) pure {\r\n    // We're going to dynamically create a revert string based on the error code, with the following format:\r\n    // 'BAL#{errorCode}'\r\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\r\n    //\r\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\r\n    // number (8 to 16 bits) than the individual string characters.\r\n    //\r\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\r\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\r\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\r\n    assembly {\r\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\r\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\r\n        // the '0' character.\r\n\r\n        let units := add(mod(errorCode, 10), 0x30)\r\n\r\n        errorCode := div(errorCode, 10)\r\n        let tenths := add(mod(errorCode, 10), 0x30)\r\n\r\n        errorCode := div(errorCode, 10)\r\n        let hundreds := add(mod(errorCode, 10), 0x30)\r\n\r\n        // With the individual characters, we can now construct the full string. The \"BAL#\" part is a known constant\r\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\r\n        // characters to it, each shifted by a multiple of 8.\r\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\r\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\r\n        // array).\r\n\r\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\r\n\r\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\r\n        // message will have the following layout:\r\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\r\n\r\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\r\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\r\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\r\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\r\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\r\n        // The string length is fixed: 7 characters.\r\n        mstore(0x24, 7)\r\n        // Finally, the string itself is stored.\r\n        mstore(0x44, revertReason)\r\n\r\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\r\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\r\n        revert(0, 100)\r\n    }\r\n}\r\n\r\nlibrary Errors {\r\n    // Math\r\n    uint256 internal constant ADD_OVERFLOW = 0;\r\n    uint256 internal constant SUB_OVERFLOW = 1;\r\n    uint256 internal constant SUB_UNDERFLOW = 2;\r\n    uint256 internal constant MUL_OVERFLOW = 3;\r\n    uint256 internal constant ZERO_DIVISION = 4;\r\n    uint256 internal constant DIV_INTERNAL = 5;\r\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\r\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\r\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\r\n    uint256 internal constant INVALID_EXPONENT = 9;\r\n\r\n    // Input\r\n    uint256 internal constant OUT_OF_BOUNDS = 100;\r\n    uint256 internal constant UNSORTED_ARRAY = 101;\r\n    uint256 internal constant UNSORTED_TOKENS = 102;\r\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\r\n    uint256 internal constant ZERO_TOKEN = 104;\r\n\r\n    // Shared pools\r\n    uint256 internal constant MIN_TOKENS = 200;\r\n    uint256 internal constant MAX_TOKENS = 201;\r\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\r\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\r\n    uint256 internal constant MINIMUM_BPT = 204;\r\n    uint256 internal constant CALLER_NOT_VAULT = 205;\r\n    uint256 internal constant UNINITIALIZED = 206;\r\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\r\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\r\n    uint256 internal constant EXPIRED_PERMIT = 209;\r\n\r\n    // Pools\r\n    uint256 internal constant MIN_AMP = 300;\r\n    uint256 internal constant MAX_AMP = 301;\r\n    uint256 internal constant MIN_WEIGHT = 302;\r\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\r\n    uint256 internal constant MAX_IN_RATIO = 304;\r\n    uint256 internal constant MAX_OUT_RATIO = 305;\r\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\r\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\r\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\r\n    uint256 internal constant INVALID_TOKEN = 309;\r\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\r\n    uint256 internal constant ZERO_INVARIANT = 311;\r\n\r\n    // Lib\r\n    uint256 internal constant REENTRANCY = 400;\r\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\r\n    uint256 internal constant PAUSED = 402;\r\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\r\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\r\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\r\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\r\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\r\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\r\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\r\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\r\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\r\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\r\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\r\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\r\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\r\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\r\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\r\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\r\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\r\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\r\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\r\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\r\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\r\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\r\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\r\n\r\n    // Vault\r\n    uint256 internal constant INVALID_POOL_ID = 500;\r\n    uint256 internal constant CALLER_NOT_POOL = 501;\r\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\r\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\r\n    uint256 internal constant INVALID_SIGNATURE = 504;\r\n    uint256 internal constant EXIT_BELOW_MIN = 505;\r\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\r\n    uint256 internal constant SWAP_LIMIT = 507;\r\n    uint256 internal constant SWAP_DEADLINE = 508;\r\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\r\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\r\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\r\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\r\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\r\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\r\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\r\n    uint256 internal constant INSUFFICIENT_ETH = 516;\r\n    uint256 internal constant UNALLOCATED_ETH = 517;\r\n    uint256 internal constant ETH_TRANSFER = 518;\r\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\r\n    uint256 internal constant TOKENS_MISMATCH = 520;\r\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\r\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\r\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\r\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\r\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\r\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\r\n    uint256 internal constant POOL_NO_TOKENS = 527;\r\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\r\n\r\n    // Fees\r\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\r\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\r\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\r\n}\r\n"
    },
    "contracts/lib/helpers/Authentication.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./BalancerErrors.sol\";\r\nimport \"./IAuthentication.sol\";\r\n\r\n/**\r\n * @dev Building block for performing access control on external functions.\r\n *\r\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\r\n * to external functions to only make them callable by authorized accounts.\r\n *\r\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\r\n */\r\nabstract contract Authentication is IAuthentication {\r\n    bytes32 private immutable _actionIdDisambiguator;\r\n\r\n    /**\r\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\r\n     * multi contract systems.\r\n     *\r\n     * There are two main uses for it:\r\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\r\n     *    unique. The contract's own address is a good option.\r\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\r\n     *    shared by the entire family (and no other contract) should be used instead.\r\n     */\r\n    constructor(bytes32 actionIdDisambiguator) {\r\n        _actionIdDisambiguator = actionIdDisambiguator;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\r\n     */\r\n    modifier authenticate() {\r\n        _authenticateCaller();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts unless the caller is allowed to call the entry point function.\r\n     */\r\n    function _authenticateCaller() internal view {\r\n        bytes32 actionId = getActionId(msg.sig);\r\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\r\n    }\r\n\r\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\r\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\r\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\r\n        // multiple contracts.\r\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\r\n    }\r\n\r\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\r\n}\r\n"
    },
    "contracts/lib/helpers/TemporarilyPausable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./BalancerErrors.sol\";\r\nimport \"./ITemporarilyPausable.sol\";\r\n\r\n/**\r\n * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be\r\n * used as an emergency switch in case a security vulnerability or threat is identified.\r\n *\r\n * The contract can only be paused during the Pause Window, a period that starts at deployment. It can also be\r\n * unpaused and repaused any number of times during this period. This is intended to serve as a safety measure: it lets\r\n * system managers react quickly to potentially dangerous situations, knowing that this action is reversible if careful\r\n * analysis later determines there was a false alarm.\r\n *\r\n * If the contract is paused when the Pause Window finishes, it will remain in the paused state through an additional\r\n * Buffer Period, after which it will be automatically unpaused forever. This is to ensure there is always enough time\r\n * to react to an emergency, even if the threat is discovered shortly before the Pause Window expires.\r\n *\r\n * Note that since the contract can only be paused within the Pause Window, unpausing during the Buffer Period is\r\n * irreversible.\r\n */\r\nabstract contract TemporarilyPausable is ITemporarilyPausable {\r\n    // The Pause Window and Buffer Period are timestamp-based: they should not be relied upon for sub-minute accuracy.\r\n    // solhint-disable not-rely-on-time\r\n\r\n    uint256 private constant _MAX_PAUSE_WINDOW_DURATION = 90 days;\r\n    uint256 private constant _MAX_BUFFER_PERIOD_DURATION = 30 days;\r\n\r\n    uint256 private immutable _pauseWindowEndTime;\r\n    uint256 private immutable _bufferPeriodEndTime;\r\n\r\n    bool private _paused;\r\n\r\n    constructor(uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\r\n        _require(pauseWindowDuration <= _MAX_PAUSE_WINDOW_DURATION, Errors.MAX_PAUSE_WINDOW_DURATION);\r\n        _require(bufferPeriodDuration <= _MAX_BUFFER_PERIOD_DURATION, Errors.MAX_BUFFER_PERIOD_DURATION);\r\n\r\n        uint256 pauseWindowEndTime = block.timestamp + pauseWindowDuration;\r\n\r\n        _pauseWindowEndTime = pauseWindowEndTime;\r\n        _bufferPeriodEndTime = pauseWindowEndTime + bufferPeriodDuration;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the contract is paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _ensureNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer\r\n     * Period.\r\n     */\r\n    function getPausedState()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool paused,\r\n            uint256 pauseWindowEndTime,\r\n            uint256 bufferPeriodEndTime\r\n        )\r\n    {\r\n        paused = !_isNotPaused();\r\n        pauseWindowEndTime = _getPauseWindowEndTime();\r\n        bufferPeriodEndTime = _getBufferPeriodEndTime();\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the pause state to `paused`. The contract can only be paused until the end of the Pause Window, and\r\n     * unpaused until the end of the Buffer Period.\r\n     *\r\n     * Once the Buffer Period expires, this function reverts unconditionally.\r\n     */\r\n    function _setPaused(bool paused) internal {\r\n        if (paused) {\r\n            _require(block.timestamp < _getPauseWindowEndTime(), Errors.PAUSE_WINDOW_EXPIRED);\r\n        } else {\r\n            _require(block.timestamp < _getBufferPeriodEndTime(), Errors.BUFFER_PERIOD_EXPIRED);\r\n        }\r\n\r\n        _paused = paused;\r\n        emit PausedStateChanged(paused);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the contract is paused.\r\n     */\r\n    function _ensureNotPaused() internal view {\r\n        _require(_isNotPaused(), Errors.PAUSED);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is unpaused.\r\n     *\r\n     * Once the Buffer Period expires, the gas cost of calling this function is reduced dramatically, as storage is no\r\n     * longer accessed.\r\n     */\r\n    function _isNotPaused() internal view returns (bool) {\r\n        // After the Buffer Period, the (inexpensive) timestamp check short-circuits the storage access.\r\n        return block.timestamp > _getBufferPeriodEndTime() || !_paused;\r\n    }\r\n\r\n    // These getters lead to reduced bytecode size by inlining the immutable variables in a single place.\r\n\r\n    function _getPauseWindowEndTime() private view returns (uint256) {\r\n        return _pauseWindowEndTime;\r\n    }\r\n\r\n    function _getBufferPeriodEndTime() private view returns (uint256) {\r\n        return _bufferPeriodEndTime;\r\n    }\r\n}\r\n"
    },
    "contracts/lib/helpers/SignaturesValidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./BalancerErrors.sol\";\r\nimport \"./ISignaturesValidator.sol\";\r\nimport \"../openzeppelin/EIP712.sol\";\r\n\r\n/**\r\n * @dev Utility for signing Solidity function calls.\r\n *\r\n * This contract relies on the fact that Solidity contracts can be called with extra calldata, and enables\r\n * meta-transaction schemes by appending an EIP712 signature of the original calldata at the end.\r\n *\r\n * Derived contracts must implement the `_typeHash` function to map function selectors to EIP712 structs.\r\n */\r\nabstract contract SignaturesValidator is ISignaturesValidator, EIP712 {\r\n    // The appended data consists of a deadline, plus the [v,r,s] signature. For simplicity, we use a full 256 bit slot\r\n    // for each of these values, even if 'v' is typically an 8 bit value.\r\n    uint256 internal constant _EXTRA_CALLDATA_LENGTH = 4 * 32;\r\n\r\n    // Replay attack prevention for each user.\r\n    mapping(address => uint256) internal _nextNonce;\r\n\r\n    constructor(string memory name) EIP712(name, \"1\") {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    function getDomainSeparator() external view override returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n\r\n    function getNextNonce(address user) external view override returns (uint256) {\r\n        return _nextNonce[user];\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with `errorCode` unless a valid signature for `user` was appended to the calldata.\r\n     */\r\n    function _validateSignature(address user, uint256 errorCode) internal {\r\n        uint256 nextNonce = _nextNonce[user]++;\r\n        _require(_isSignatureValid(user, nextNonce), errorCode);\r\n    }\r\n\r\n    function _isSignatureValid(address user, uint256 nonce) private view returns (bool) {\r\n        uint256 deadline = _deadline();\r\n\r\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\r\n        // solhint-disable-next-line not-rely-on-time\r\n        if (deadline < block.timestamp) {\r\n            return false;\r\n        }\r\n\r\n        bytes32 typeHash = _typeHash();\r\n        if (typeHash == bytes32(0)) {\r\n            // Prevent accidental signature validation for functions that don't have an associated type hash.\r\n            return false;\r\n        }\r\n\r\n        // All type hashes have this format: (bytes calldata, address sender, uint256 nonce, uint256 deadline).\r\n        bytes32 structHash = keccak256(abi.encode(typeHash, keccak256(_calldata()), msg.sender, nonce, deadline));\r\n        bytes32 digest = _hashTypedDataV4(structHash);\r\n        (uint8 v, bytes32 r, bytes32 s) = _signature();\r\n\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n\r\n        // ecrecover returns the zero address on recover failure, so we need to handle that explicitly.\r\n        return recoveredAddress != address(0) && recoveredAddress == user;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the EIP712 type hash for the current entry point function, which can be identified by its function\r\n     * selector (available as `msg.sig`).\r\n     *\r\n     * The type hash must conform to the following format:\r\n     *  <name>(bytes calldata, address sender, uint256 nonce, uint256 deadline)\r\n     *\r\n     * If 0x00, all signatures will be considered invalid.\r\n     */\r\n    function _typeHash() internal view virtual returns (bytes32);\r\n\r\n    /**\r\n     * @dev Extracts the signature deadline from extra calldata.\r\n     *\r\n     * This function returns bogus data if no signature is included.\r\n     */\r\n    function _deadline() internal pure returns (uint256) {\r\n        // The deadline is the first extra argument at the end of the original calldata.\r\n        return uint256(_decodeExtraCalldataWord(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Extracts the signature parameters from extra calldata.\r\n     *\r\n     * This function returns bogus data if no signature is included. This is not a security risk, as that data would not\r\n     * be considered a valid signature in the first place.\r\n     */\r\n    function _signature()\r\n        internal\r\n        pure\r\n        returns (\r\n            uint8 v,\r\n            bytes32 r,\r\n            bytes32 s\r\n        )\r\n    {\r\n        // v, r and s are appended after the signature deadline, in that order.\r\n        v = uint8(uint256(_decodeExtraCalldataWord(0x20)));\r\n        r = _decodeExtraCalldataWord(0x40);\r\n        s = _decodeExtraCalldataWord(0x60);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the original calldata, without the extra bytes containing the signature.\r\n     *\r\n     * This function returns bogus data if no signature is included.\r\n     */\r\n    function _calldata() internal pure returns (bytes memory result) {\r\n        result = msg.data; // A calldata to memory assignment results in memory allocation and copy of contents.\r\n        if (result.length > _EXTRA_CALLDATA_LENGTH) {\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                // We simply overwrite the array length with the reduced one.\r\n                mstore(result, sub(calldatasize(), _EXTRA_CALLDATA_LENGTH))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a 256 bit word from 'extra' calldata, at some offset from the expected end of the original calldata.\r\n     *\r\n     * This function returns bogus data if no signature is included.\r\n     */\r\n    function _decodeExtraCalldataWord(uint256 offset) private pure returns (bytes32 result) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            result := calldataload(add(sub(calldatasize(), _EXTRA_CALLDATA_LENGTH), offset))\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lib/openzeppelin/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../helpers/BalancerErrors.sol\";\r\n\r\n// Based on the ReentrancyGuard library from OpenZeppelin contracts, altered to reduce bytecode size.\r\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\r\n// private functions, we achieve the same end result with slightly higher runtime gas costs but reduced bytecode size.\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _enterNonReentrant();\r\n        _;\r\n        _exitNonReentrant();\r\n    }\r\n\r\n    function _enterNonReentrant() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        _require(_status != _ENTERED, Errors.REENTRANCY);\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _exitNonReentrant() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"
    },
    "contracts/vault/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../../lib/openzeppelin/IERC20.sol\";\r\n\r\nimport \"./IWETH.sol\";\r\nimport \"./IAsset.sol\";\r\nimport \"./IAuthorizer.sol\";\r\nimport \"./IFlashLoanRecipient.sol\";\r\nimport \"../ProtocolFeesCollector.sol\";\r\n\r\nimport \"../../lib/helpers/ISignaturesValidator.sol\";\r\nimport \"../../lib/helpers/ITemporarilyPausable.sol\";\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\r\n * don't override one of these declarations.\r\n */\r\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\r\n    // Generalities about the Vault:\r\n    //\r\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\r\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\r\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\r\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\r\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\r\n    //\r\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\r\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\r\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\r\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\r\n    //\r\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\r\n\r\n    // Authorizer\r\n    //\r\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\r\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\r\n    // can perform a given action.\r\n\r\n    /**\r\n     * @dev Returns the Vault's Authorizer.\r\n     */\r\n    function getAuthorizer() external view returns (IAuthorizer);\r\n\r\n    /**\r\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\r\n     *\r\n     * Emits an `AuthorizerChanged` event.\r\n     */\r\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\r\n\r\n    /**\r\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\r\n     */\r\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\r\n\r\n    // Relayers\r\n    //\r\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\r\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\r\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\r\n    // this power, two things must occur:\r\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\r\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\r\n    //    functions.\r\n    //  - Each user must approve the relayer to act on their behalf.\r\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\r\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\r\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\r\n\r\n    /**\r\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\r\n     */\r\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\r\n     *\r\n     * Emits a `RelayerApprovalChanged` event.\r\n     */\r\n    function setRelayerApproval(\r\n        address sender,\r\n        address relayer,\r\n        bool approved\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\r\n     */\r\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\r\n\r\n    // Internal Balance\r\n    //\r\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\r\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\r\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\r\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\r\n    //\r\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\r\n    // operations of different kinds, with different senders and recipients, at once.\r\n\r\n    /**\r\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\r\n     */\r\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\r\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\r\n     * it lets integrators reuse a user's Vault allowance.\r\n     *\r\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\r\n     */\r\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\r\n\r\n    /**\r\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\r\n     without manual WETH wrapping or unwrapping.\r\n     */\r\n    struct UserBalanceOp {\r\n        UserBalanceOpKind kind;\r\n        IAsset asset;\r\n        uint256 amount;\r\n        address sender;\r\n        address payable recipient;\r\n    }\r\n\r\n    // There are four possible operations in `manageUserBalance`:\r\n    //\r\n    // - DEPOSIT_INTERNAL\r\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\r\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\r\n    //\r\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\r\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\r\n    // relevant for relayers).\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - WITHDRAW_INTERNAL\r\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\r\n    //\r\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\r\n    // it to the recipient as ETH.\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - TRANSFER_INTERNAL\r\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\r\n    //\r\n    // Reverts if the ETH sentinel value is passed.\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - TRANSFER_EXTERNAL\r\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\r\n    // relayers, as it lets them reuse a user's Vault allowance.\r\n    //\r\n    // Reverts if the ETH sentinel value is passed.\r\n    //\r\n    // Emits an `ExternalBalanceTransfer` event.\r\n\r\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\r\n\r\n    /**\r\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\r\n     * interacting with Pools using Internal Balance.\r\n     *\r\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\r\n     * address.\r\n     */\r\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\r\n\r\n    /**\r\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\r\n     */\r\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\r\n\r\n    // Pools\r\n    //\r\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\r\n    // functionality:\r\n    //\r\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\r\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\r\n    // which increase with the number of registered tokens.\r\n    //\r\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\r\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\r\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\r\n    // independent of the number of registered tokens.\r\n    //\r\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\r\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\r\n\r\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\r\n\r\n    /**\r\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\r\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\r\n     * changed.\r\n     *\r\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\r\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\r\n     *\r\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\r\n     * multiple Pools may share the same contract.\r\n     *\r\n     * Emits a `PoolRegistered` event.\r\n     */\r\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\r\n\r\n    /**\r\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\r\n     */\r\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\r\n\r\n    /**\r\n     * @dev Returns a Pool's contract address and specialization setting.\r\n     */\r\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\r\n\r\n    /**\r\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\r\n     * exit by receiving registered tokens, and can only swap registered tokens.\r\n     *\r\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\r\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\r\n     * ascending order.\r\n     *\r\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\r\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\r\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\r\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\r\n     * Asset Manager should not be made lightly.\r\n     *\r\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\r\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\r\n     * different Asset Manager.\r\n     *\r\n     * Emits a `TokensRegistered` event.\r\n     */\r\n    function registerTokens(\r\n        bytes32 poolId,\r\n        IERC20[] memory tokens,\r\n        address[] memory assetManagers\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\r\n     */\r\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\r\n\r\n    /**\r\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\r\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\r\n     * must be deregistered in the same `deregisterTokens` call.\r\n     *\r\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\r\n     *\r\n     * Emits a `TokensDeregistered` event.\r\n     */\r\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\r\n\r\n    /**\r\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\r\n     */\r\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\r\n\r\n    /**\r\n     * @dev Returns detailed information for a Pool's registered token.\r\n     *\r\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\r\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\r\n     * equals the sum of `cash` and `managed`.\r\n     *\r\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\r\n     * `managed` or `total` balance to be greater than 2^112 - 1.\r\n     *\r\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\r\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\r\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\r\n     * change for this purpose, and will update `lastChangeBlock`.\r\n     *\r\n     * `assetManager` is the Pool's token Asset Manager.\r\n     */\r\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 cash,\r\n            uint256 managed,\r\n            uint256 lastChangeBlock,\r\n            address assetManager\r\n        );\r\n\r\n    /**\r\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\r\n     * the tokens' `balances` changed.\r\n     *\r\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\r\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\r\n     *\r\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\r\n     * order as passed to `registerTokens`.\r\n     *\r\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\r\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\r\n     * instead.\r\n     */\r\n    function getPoolTokens(bytes32 poolId)\r\n        external\r\n        view\r\n        returns (\r\n            IERC20[] memory tokens,\r\n            uint256[] memory balances,\r\n            uint256 lastChangeBlock\r\n        );\r\n\r\n    /**\r\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\r\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\r\n     * Pool shares.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\r\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\r\n     * these maximums.\r\n     *\r\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\r\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\r\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\r\n     * back to the caller (not the sender, which is important for relayers).\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\r\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\r\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\r\n     *\r\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\r\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\r\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\r\n     * directly to the Pool's contract, as is `recipient`.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function joinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        JoinPoolRequest memory request\r\n    ) external payable;\r\n\r\n    struct JoinPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] maxAmountsIn;\r\n        bytes userData;\r\n        bool fromInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\r\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\r\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\r\n     * `getPoolTokenInfo`).\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\r\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\r\n     * it just enforces these minimums.\r\n     *\r\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\r\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\r\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\r\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\r\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\r\n     *\r\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\r\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\r\n     * do so will trigger a revert.\r\n     *\r\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\r\n     * `tokens` array. This array must match the Pool's registered tokens.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\r\n     * passed directly to the Pool's contract.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function exitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address payable recipient,\r\n        ExitPoolRequest memory request\r\n    ) external;\r\n\r\n    struct ExitPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] minAmountsOut;\r\n        bytes userData;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\r\n     */\r\n    event PoolBalanceChanged(\r\n        bytes32 indexed poolId,\r\n        address indexed liquidityProvider,\r\n        IERC20[] tokens,\r\n        int256[] deltas,\r\n        uint256[] protocolFeeAmounts\r\n    );\r\n\r\n    enum PoolBalanceChangeKind { JOIN, EXIT }\r\n\r\n    // Swaps\r\n    //\r\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\r\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\r\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\r\n    //\r\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\r\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\r\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\r\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\r\n    // individual swaps.\r\n    //\r\n    // There are two swap kinds:\r\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\r\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\r\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\r\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\r\n    //\r\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\r\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\r\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\r\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\r\n    // the final intended token.\r\n    //\r\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\r\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\r\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\r\n    // much less gas than they would otherwise.\r\n    //\r\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\r\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\r\n    // updating the Pool's internal accounting).\r\n    //\r\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\r\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\r\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\r\n    //\r\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\r\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\r\n    //\r\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\r\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\r\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\r\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\r\n    //\r\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\r\n\r\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\r\n\r\n    /**\r\n     * @dev Performs a swap with a single Pool.\r\n     *\r\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\r\n     * taken from the Pool, which must be greater than or equal to `limit`.\r\n     *\r\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\r\n     * sent to the Pool, which must be less than or equal to `limit`.\r\n     *\r\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\r\n     *\r\n     * Emits a `Swap` event.\r\n     */\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\r\n     * the `kind` value.\r\n     *\r\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\r\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        IAsset assetIn;\r\n        IAsset assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\r\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\r\n     *\r\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\r\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\r\n     * the same index in the `assets` array.\r\n     *\r\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\r\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\r\n     * `amountOut` depending on the swap kind.\r\n     *\r\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\r\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\r\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\r\n     *\r\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\r\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\r\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\r\n     * or unwrapped from WETH by the Vault.\r\n     *\r\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\r\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\r\n     *\r\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\r\n     * equivalent `swap` call.\r\n     *\r\n     * Emits `Swap` events.\r\n     */\r\n    function batchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds,\r\n        int256[] memory limits,\r\n        uint256 deadline\r\n    ) external payable returns (int256[] memory);\r\n\r\n    /**\r\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\r\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\r\n     *\r\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\r\n     * from the previous swap, depending on the swap kind.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct BatchSwapStep {\r\n        bytes32 poolId;\r\n        uint256 assetInIndex;\r\n        uint256 assetOutIndex;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\r\n     */\r\n    event Swap(\r\n        bytes32 indexed poolId,\r\n        IERC20 indexed tokenIn,\r\n        IERC20 indexed tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut\r\n    );\r\n\r\n    /**\r\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\r\n     * `recipient` account.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\r\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\r\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\r\n     * `joinPool`.\r\n     *\r\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\r\n     * transferred. This matches the behavior of `exitPool`.\r\n     *\r\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\r\n     * revert.\r\n     */\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\r\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\r\n     *\r\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\r\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\r\n     * receives are the same that an equivalent `batchSwap` call would receive.\r\n     *\r\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\r\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\r\n     * approve them for the Vault, or even know a user's address.\r\n     *\r\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\r\n     * eth_call instead of eth_sendTransaction.\r\n     */\r\n    function queryBatchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds\r\n    ) external returns (int256[] memory assetDeltas);\r\n\r\n    // Flash Loans\r\n\r\n    /**\r\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\r\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\r\n     *\r\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\r\n     * for each token contract. `tokens` must be sorted in ascending order.\r\n     *\r\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\r\n     * `receiveFlashLoan` call.\r\n     *\r\n     * Emits `FlashLoan` events.\r\n     */\r\n    function flashLoan(\r\n        IFlashLoanRecipient recipient,\r\n        IERC20[] memory tokens,\r\n        uint256[] memory amounts,\r\n        bytes memory userData\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\r\n     */\r\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\r\n\r\n    // Asset Management\r\n    //\r\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\r\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\r\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\r\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\r\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\r\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\r\n    //\r\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\r\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\r\n    //\r\n    // This concept is unrelated to the IAsset interface.\r\n\r\n    /**\r\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\r\n     *\r\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\r\n     * operations of different kinds, with different Pools and tokens, at once.\r\n     *\r\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\r\n     */\r\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\r\n\r\n    struct PoolBalanceOp {\r\n        PoolBalanceOpKind kind;\r\n        bytes32 poolId;\r\n        IERC20 token;\r\n        uint256 amount;\r\n    }\r\n\r\n    /**\r\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\r\n     *\r\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\r\n     *\r\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\r\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\r\n     */\r\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\r\n\r\n    /**\r\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\r\n     */\r\n    event PoolBalanceManaged(\r\n        bytes32 indexed poolId,\r\n        address indexed assetManager,\r\n        IERC20 indexed token,\r\n        int256 cashDelta,\r\n        int256 managedDelta\r\n    );\r\n\r\n    // Protocol Fees\r\n    //\r\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\r\n    // permissioned accounts.\r\n    //\r\n    // There are two kinds of protocol fees:\r\n    //\r\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\r\n    //\r\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\r\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\r\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\r\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\r\n    // exiting a Pool in debt without first paying their share.\r\n\r\n    /**\r\n     * @dev Returns the current protocol fee module.\r\n     */\r\n    function getProtocolFeesCollector() external view returns (ProtocolFeesCollector);\r\n\r\n    /**\r\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\r\n     * error in some part of the system.\r\n     *\r\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\r\n     *\r\n     * While the contract is paused, the following features are disabled:\r\n     * - depositing and transferring internal balance\r\n     * - transferring external balance (using the Vault's allowance)\r\n     * - swaps\r\n     * - joining Pools\r\n     * - Asset Manager interactions\r\n     *\r\n     * Internal Balance can still be withdrawn, and Pools exited.\r\n     */\r\n    function setPaused(bool paused) external;\r\n\r\n    /**\r\n     * @dev Returns the Vault's WETH instance.\r\n     */\r\n    function WETH() external view returns (IWETH);\r\n    // solhint-disable-previous-line func-name-mixedcase\r\n}\r\n"
    },
    "contracts/lib/helpers/IAuthentication.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IAuthentication {\r\n    /**\r\n     * @dev Returns the action identifier associated with the external function described by `selector`.\r\n     */\r\n    function getActionId(bytes4 selector) external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/lib/helpers/ITemporarilyPausable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface for the TemporarilyPausable helper.\r\n */\r\ninterface ITemporarilyPausable {\r\n    /**\r\n     * @dev Emitted every time the pause state changes by `_setPaused`.\r\n     */\r\n    event PausedStateChanged(bool paused);\r\n\r\n    /**\r\n     * @dev Returns the current paused state.\r\n     */\r\n    function getPausedState()\r\n        external\r\n        view\r\n        returns (\r\n            bool paused,\r\n            uint256 pauseWindowEndTime,\r\n            uint256 bufferPeriodEndTime\r\n        );\r\n}\r\n"
    },
    "contracts/lib/helpers/ISignaturesValidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\r\n */\r\ninterface ISignaturesValidator {\r\n    /**\r\n     * @dev Returns the EIP712 domain separator.\r\n     */\r\n    function getDomainSeparator() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Returns the next nonce used by an address to sign messages.\r\n     */\r\n    function getNextNonce(address user) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/lib/openzeppelin/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract EIP712 {\r\n    /* solhint-disable var-name-mixedcase */\r\n    bytes32 private immutable _HASHED_NAME;\r\n    bytes32 private immutable _HASHED_VERSION;\r\n    bytes32 private immutable _TYPE_HASH;\r\n\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    constructor(string memory name, string memory version) {\r\n        _HASHED_NAME = keccak256(bytes(name));\r\n        _HASHED_VERSION = keccak256(bytes(version));\r\n        _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\r\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\r\n    }\r\n\r\n    function _getChainId() private view returns (uint256 chainId) {\r\n        // Silence state mutability warning without generating bytecode.\r\n        // See https://github.com/ethereum/solidity/issues/10090#issuecomment-741789128 and\r\n        // https://github.com/ethereum/solidity/issues/2691\r\n        this;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/vault/interfaces/IAsset.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\r\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\r\n * types.\r\n *\r\n * This concept is unrelated to a Pool's Asset Managers.\r\n */\r\ninterface IAsset {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n"
    },
    "contracts/vault/interfaces/IFlashLoanRecipient.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// Inspired by Aave Protocol's IFlashLoanReceiver.\r\n\r\nimport \"../../lib/openzeppelin/IERC20.sol\";\r\n\r\ninterface IFlashLoanRecipient {\r\n    /**\r\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\r\n     *\r\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\r\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\r\n     * Vault, or else the entire flash loan will revert.\r\n     *\r\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\r\n     */\r\n    function receiveFlashLoan(\r\n        IERC20[] memory tokens,\r\n        uint256[] memory amounts,\r\n        uint256[] memory feeAmounts,\r\n        bytes memory userData\r\n    ) external;\r\n}\r\n"
    },
    "contracts/vault/ProtocolFeesCollector.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/openzeppelin/IERC20.sol\";\r\nimport \"../lib/helpers/InputHelpers.sol\";\r\nimport \"../lib/helpers/Authentication.sol\";\r\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\r\nimport \"../lib/openzeppelin/SafeERC20.sol\";\r\n\r\nimport \"./interfaces/IVault.sol\";\r\nimport \"./interfaces/IAuthorizer.sol\";\r\n\r\n/**\r\n * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the\r\n * Vault performs to reduce its overall bytecode size.\r\n *\r\n * The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are\r\n * sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated\r\n * to the Vault's own authorizer.\r\n */\r\ncontract ProtocolFeesCollector is Authentication, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Absolute maximum fee percentages (1e18 = 100%, 1e16 = 1%).\r\n    uint256 private constant _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE = 50e16; // 50%\r\n    uint256 private constant _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE = 1e16; // 1%\r\n\r\n    IVault public immutable vault;\r\n\r\n    // All fee percentages are 18-decimal fixed point numbers.\r\n\r\n    // The swap fee is charged whenever a swap occurs, as a percentage of the fee charged by the Pool. These are not\r\n    // actually charged on each individual swap: the `Vault` relies on the Pools being honest and reporting fees due\r\n    // when users join and exit them.\r\n    uint256 private _swapFeePercentage;\r\n\r\n    // The flash loan fee is charged whenever a flash loan occurs, as a percentage of the tokens lent.\r\n    uint256 private _flashLoanFeePercentage;\r\n\r\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\r\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\r\n\r\n    constructor(IVault _vault)\r\n        // The ProtocolFeesCollector is a singleton, so it simply uses its own address to disambiguate action\r\n        // identifiers.\r\n        Authentication(bytes32(uint256(address(this))))\r\n    {\r\n        vault = _vault;\r\n    }\r\n\r\n    function withdrawCollectedFees(\r\n        IERC20[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        address recipient\r\n    ) external nonReentrant authenticate {\r\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\r\n\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            IERC20 token = tokens[i];\r\n            uint256 amount = amounts[i];\r\n            token.safeTransfer(recipient, amount);\r\n        }\r\n    }\r\n\r\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {\r\n        _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH);\r\n        _swapFeePercentage = newSwapFeePercentage;\r\n        emit SwapFeePercentageChanged(newSwapFeePercentage);\r\n    }\r\n\r\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {\r\n        _require(\r\n            newFlashLoanFeePercentage <= _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE,\r\n            Errors.FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH\r\n        );\r\n        _flashLoanFeePercentage = newFlashLoanFeePercentage;\r\n        emit FlashLoanFeePercentageChanged(newFlashLoanFeePercentage);\r\n    }\r\n\r\n    function getSwapFeePercentage() external view returns (uint256) {\r\n        return _swapFeePercentage;\r\n    }\r\n\r\n    function getFlashLoanFeePercentage() external view returns (uint256) {\r\n        return _flashLoanFeePercentage;\r\n    }\r\n\r\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {\r\n        feeAmounts = new uint256[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            feeAmounts[i] = tokens[i].balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function getAuthorizer() external view returns (IAuthorizer) {\r\n        return _getAuthorizer();\r\n    }\r\n\r\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\r\n        return _getAuthorizer().canPerform(actionId, account, address(this));\r\n    }\r\n\r\n    function _getAuthorizer() internal view returns (IAuthorizer) {\r\n        return vault.getAuthorizer();\r\n    }\r\n}\r\n"
    },
    "contracts/lib/helpers/InputHelpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../openzeppelin/IERC20.sol\";\r\n\r\nimport \"./BalancerErrors.sol\";\r\n\r\nimport \"../../vault/interfaces/IAsset.sol\";\r\n\r\nlibrary InputHelpers {\r\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\r\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\r\n    }\r\n\r\n    function ensureInputLengthMatch(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 c\r\n    ) internal pure {\r\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\r\n    }\r\n\r\n    function ensureArrayIsSorted(IAsset[] memory array) internal pure {\r\n        address[] memory addressArray;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addressArray := array\r\n        }\r\n        ensureArrayIsSorted(addressArray);\r\n    }\r\n\r\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\r\n        address[] memory addressArray;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addressArray := array\r\n        }\r\n        ensureArrayIsSorted(addressArray);\r\n    }\r\n\r\n    function ensureArrayIsSorted(address[] memory array) internal pure {\r\n        if (array.length < 2) {\r\n            return;\r\n        }\r\n\r\n        address previous = array[0];\r\n        for (uint256 i = 1; i < array.length; ++i) {\r\n            address current = array[i];\r\n            _require(previous < current, Errors.UNSORTED_ARRAY);\r\n            previous = current;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lib/openzeppelin/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../helpers/BalancerErrors.sol\";\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     *\r\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\r\n     */\r\n    function _callOptionalReturn(address token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n        (bool success, bytes memory returndata) = token.call(data);\r\n\r\n        // If the low-level call didn't succeed we return whatever was returned from it.\r\n        assembly {\r\n            if eq(success, 0) {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n\r\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\r\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\r\n    }\r\n}\r\n"
    },
    "contracts/vault/Fees.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/math/FixedPoint.sol\";\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/openzeppelin/IERC20.sol\";\r\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\r\nimport \"../lib/openzeppelin/SafeERC20.sol\";\r\n\r\nimport \"./ProtocolFeesCollector.sol\";\r\nimport \"./VaultAuthorization.sol\";\r\nimport \"./interfaces/IVault.sol\";\r\n\r\n/**\r\n * @dev To reduce the bytecode size of the Vault, most of the protocol fee logic is not here, but in the\r\n * ProtocolFeesCollector contract.\r\n */\r\nabstract contract Fees is IVault {\r\n    using SafeERC20 for IERC20;\r\n\r\n    ProtocolFeesCollector private immutable _protocolFeesCollector;\r\n\r\n    constructor() {\r\n        _protocolFeesCollector = new ProtocolFeesCollector(IVault(this));\r\n    }\r\n\r\n    function getProtocolFeesCollector() public view override returns (ProtocolFeesCollector) {\r\n        return _protocolFeesCollector;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the protocol swap fee percentage.\r\n     */\r\n    function _getProtocolSwapFeePercentage() internal view returns (uint256) {\r\n        return getProtocolFeesCollector().getSwapFeePercentage();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the protocol fee amount to charge for a flash loan of `amount`.\r\n     */\r\n    function _calculateFlashLoanFeeAmount(uint256 amount) internal view returns (uint256) {\r\n        // Fixed point multiplication introduces error: we round up, which means in certain scenarios the charged\r\n        // percentage can be slightly higher than intended.\r\n        uint256 percentage = getProtocolFeesCollector().getFlashLoanFeePercentage();\r\n        return FixedPoint.mulUp(amount, percentage);\r\n    }\r\n\r\n    function _payFeeAmount(IERC20 token, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            token.safeTransfer(address(getProtocolFeesCollector()), amount);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lib/math/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./LogExpMath.sol\";\r\nimport \"../helpers/BalancerErrors.sol\";\r\n\r\n/* solhint-disable private-vars-leading-underscore */\r\n\r\nlibrary FixedPoint {\r\n    uint256 internal constant ONE = 1e18; // 18 decimal places\r\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\r\n\r\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\r\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Fixed Point addition is the same as regular checked addition\r\n\r\n        uint256 c = a + b;\r\n        _require(c >= a, Errors.ADD_OVERFLOW);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Fixed Point addition is the same as regular checked addition\r\n\r\n        _require(b <= a, Errors.SUB_OVERFLOW);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 product = a * b;\r\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\r\n\r\n        return product / ONE;\r\n    }\r\n\r\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 product = a * b;\r\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\r\n\r\n        if (product == 0) {\r\n            return 0;\r\n        } else {\r\n            // The traditional divUp formula is:\r\n            // divUp(x, y) := (x + y - 1) / y\r\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\r\n            // divUp(x, y) := (x - 1) / y + 1\r\n            // Note that this requires x != 0, which we already tested for.\r\n\r\n            return ((product - 1) / ONE) + 1;\r\n        }\r\n    }\r\n\r\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        _require(b != 0, Errors.ZERO_DIVISION);\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 aInflated = a * ONE;\r\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\r\n\r\n            return aInflated / b;\r\n        }\r\n    }\r\n\r\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        _require(b != 0, Errors.ZERO_DIVISION);\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 aInflated = a * ONE;\r\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\r\n\r\n            // The traditional divUp formula is:\r\n            // divUp(x, y) := (x + y - 1) / y\r\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\r\n            // divUp(x, y) := (x - 1) / y + 1\r\n            // Note that this requires x != 0, which we already tested for.\r\n\r\n            return ((aInflated - 1) / b) + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\r\n     * the true value (that is, the error function expected - actual is always positive).\r\n     */\r\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 raw = LogExpMath.pow(x, y);\r\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\r\n\r\n        if (raw < maxError) {\r\n            return 0;\r\n        } else {\r\n            return sub(raw, maxError);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\r\n     * the true value (that is, the error function expected - actual is always negative).\r\n     */\r\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 raw = LogExpMath.pow(x, y);\r\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\r\n\r\n        return add(raw, maxError);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\r\n     *\r\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\r\n     * prevents intermediate negative values.\r\n     */\r\n    function complement(uint256 x) internal pure returns (uint256) {\r\n        return (x < ONE) ? (ONE - x) : 0;\r\n    }\r\n}\r\n"
    },
    "contracts/lib/math/LogExpMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General internal License for more details.\r\n\r\n// You should have received a copy of the GNU General internal License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../helpers/BalancerErrors.sol\";\r\n\r\n/* solhint-disable */\r\n\r\n/**\r\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\r\n *\r\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\r\n * exponentiation and logarithm (where the base is Euler's number).\r\n *\r\n * @author Fernando Martinelli - @fernandomartinelli\r\n * @author Sergio Yuhjtman - @sergioyuhjtman\r\n * @author Daniel Fernandez - @dmf7z\r\n */\r\nlibrary LogExpMath {\r\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\r\n    // two numbers, and multiply by ONE when dividing them.\r\n\r\n    // All arguments and return values are 18 decimal fixed point numbers.\r\n    int256 constant ONE_18 = 1e18;\r\n\r\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\r\n    // case of ln36, 36 decimals.\r\n    int256 constant ONE_20 = 1e20;\r\n    int256 constant ONE_36 = 1e36;\r\n\r\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\r\n    //\r\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\r\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\r\n    // The smallest possible result is 10^(-18), which makes largest negative argument\r\n    // ln(10^(-18)) = -41.446531673892822312.\r\n    // We use 130.0 and -41.0 to have some safety margin.\r\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\r\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\r\n\r\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\r\n    // 256 bit integer.\r\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\r\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\r\n\r\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\r\n\r\n    // 18 decimal constants\r\n    int256 constant x0 = 128000000000000000000; // 2ˆ7\r\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // eˆ(x0) (no decimals)\r\n    int256 constant x1 = 64000000000000000000; // 2ˆ6\r\n    int256 constant a1 = 6235149080811616882910000000; // eˆ(x1) (no decimals)\r\n\r\n    // 20 decimal constants\r\n    int256 constant x2 = 3200000000000000000000; // 2ˆ5\r\n    int256 constant a2 = 7896296018268069516100000000000000; // eˆ(x2)\r\n    int256 constant x3 = 1600000000000000000000; // 2ˆ4\r\n    int256 constant a3 = 888611052050787263676000000; // eˆ(x3)\r\n    int256 constant x4 = 800000000000000000000; // 2ˆ3\r\n    int256 constant a4 = 298095798704172827474000; // eˆ(x4)\r\n    int256 constant x5 = 400000000000000000000; // 2ˆ2\r\n    int256 constant a5 = 5459815003314423907810; // eˆ(x5)\r\n    int256 constant x6 = 200000000000000000000; // 2ˆ1\r\n    int256 constant a6 = 738905609893065022723; // eˆ(x6)\r\n    int256 constant x7 = 100000000000000000000; // 2ˆ0\r\n    int256 constant a7 = 271828182845904523536; // eˆ(x7)\r\n    int256 constant x8 = 50000000000000000000; // 2ˆ-1\r\n    int256 constant a8 = 164872127070012814685; // eˆ(x8)\r\n    int256 constant x9 = 25000000000000000000; // 2ˆ-2\r\n    int256 constant a9 = 128402541668774148407; // eˆ(x9)\r\n    int256 constant x10 = 12500000000000000000; // 2ˆ-3\r\n    int256 constant a10 = 113314845306682631683; // eˆ(x10)\r\n    int256 constant x11 = 6250000000000000000; // 2ˆ-4\r\n    int256 constant a11 = 106449445891785942956; // eˆ(x11)\r\n\r\n    /**\r\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\r\n     *\r\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\r\n     */\r\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (y == 0) {\r\n            // We solve the 0^0 indetermination by making it equal one.\r\n            return uint256(ONE_18);\r\n        }\r\n\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\r\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\r\n        // x^y = exp(y * ln(x)).\r\n\r\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\r\n        _require(x < 2**255, Errors.X_OUT_OF_BOUNDS);\r\n        int256 x_int256 = int256(x);\r\n\r\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\r\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\r\n\r\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\r\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\r\n        int256 y_int256 = int256(y);\r\n\r\n        int256 logx_times_y;\r\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\r\n            int256 ln_36_x = ln_36(x_int256);\r\n\r\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\r\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\r\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\r\n            // (downscaled) last 18 decimals.\r\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\r\n        } else {\r\n            logx_times_y = ln(x_int256) * y_int256;\r\n        }\r\n        logx_times_y /= ONE_18;\r\n\r\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\r\n        _require(\r\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\r\n            Errors.PRODUCT_OUT_OF_BOUNDS\r\n        );\r\n\r\n        return uint256(exp(logx_times_y));\r\n    }\r\n\r\n    /**\r\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\r\n     *\r\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\r\n     */\r\n    function exp(int256 x) internal pure returns (int256) {\r\n        _require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\r\n\r\n        if (x < 0) {\r\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\r\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\r\n            // Fixed point division requires multiplying by ONE_18.\r\n            return ((ONE_18 * ONE_18) / exp(-x));\r\n        }\r\n\r\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\r\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\r\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\r\n        // decomposition.\r\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\r\n        // decomposition, which will be lower than the smallest x_n.\r\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\r\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\r\n\r\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\r\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\r\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\r\n        // decomposition.\r\n\r\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\r\n        // it and compute the accumulated product.\r\n\r\n        int256 firstAN;\r\n        if (x >= x0) {\r\n            x -= x0;\r\n            firstAN = a0;\r\n        } else if (x >= x1) {\r\n            x -= x1;\r\n            firstAN = a1;\r\n        } else {\r\n            firstAN = 1; // One with no decimal places\r\n        }\r\n\r\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\r\n        // smaller terms.\r\n        x *= 100;\r\n\r\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\r\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\r\n        int256 product = ONE_20;\r\n\r\n        if (x >= x2) {\r\n            x -= x2;\r\n            product = (product * a2) / ONE_20;\r\n        }\r\n        if (x >= x3) {\r\n            x -= x3;\r\n            product = (product * a3) / ONE_20;\r\n        }\r\n        if (x >= x4) {\r\n            x -= x4;\r\n            product = (product * a4) / ONE_20;\r\n        }\r\n        if (x >= x5) {\r\n            x -= x5;\r\n            product = (product * a5) / ONE_20;\r\n        }\r\n        if (x >= x6) {\r\n            x -= x6;\r\n            product = (product * a6) / ONE_20;\r\n        }\r\n        if (x >= x7) {\r\n            x -= x7;\r\n            product = (product * a7) / ONE_20;\r\n        }\r\n        if (x >= x8) {\r\n            x -= x8;\r\n            product = (product * a8) / ONE_20;\r\n        }\r\n        if (x >= x9) {\r\n            x -= x9;\r\n            product = (product * a9) / ONE_20;\r\n        }\r\n\r\n        // x10 and x11 are unnecessary here since we have high enough precision already.\r\n\r\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\r\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\r\n\r\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\r\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\r\n\r\n        // The first term is simply x.\r\n        term = x;\r\n        seriesSum += term;\r\n\r\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\r\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\r\n\r\n        term = ((term * x) / ONE_20) / 2;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 3;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 4;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 5;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 6;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 7;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 8;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 9;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 10;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 11;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 12;\r\n        seriesSum += term;\r\n\r\n        // 12 Taylor terms are sufficient for 18 decimal precision.\r\n\r\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\r\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\r\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\r\n        // and then drop two digits to return an 18 decimal value.\r\n\r\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\r\n    }\r\n\r\n    /**\r\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\r\n     */\r\n    function ln(int256 a) internal pure returns (int256) {\r\n        // The real natural logarithm is not defined for negative numbers or zero.\r\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\r\n\r\n        if (a < ONE_18) {\r\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\r\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\r\n            // Fixed point division requires multiplying by ONE_18.\r\n            return (-ln((ONE_18 * ONE_18) / a));\r\n        }\r\n\r\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\r\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\r\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\r\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\r\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\r\n        // decomposition, which will be lower than the smallest a_n.\r\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\r\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\r\n\r\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\r\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\r\n        // ONE_18 to convert them to fixed point.\r\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\r\n        // by it and compute the accumulated sum.\r\n\r\n        int256 sum = 0;\r\n        if (a >= a0 * ONE_18) {\r\n            a /= a0; // Integer, not fixed point division\r\n            sum += x0;\r\n        }\r\n\r\n        if (a >= a1 * ONE_18) {\r\n            a /= a1; // Integer, not fixed point division\r\n            sum += x1;\r\n        }\r\n\r\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\r\n        sum *= 100;\r\n        a *= 100;\r\n\r\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\r\n\r\n        if (a >= a2) {\r\n            a = (a * ONE_20) / a2;\r\n            sum += x2;\r\n        }\r\n\r\n        if (a >= a3) {\r\n            a = (a * ONE_20) / a3;\r\n            sum += x3;\r\n        }\r\n\r\n        if (a >= a4) {\r\n            a = (a * ONE_20) / a4;\r\n            sum += x4;\r\n        }\r\n\r\n        if (a >= a5) {\r\n            a = (a * ONE_20) / a5;\r\n            sum += x5;\r\n        }\r\n\r\n        if (a >= a6) {\r\n            a = (a * ONE_20) / a6;\r\n            sum += x6;\r\n        }\r\n\r\n        if (a >= a7) {\r\n            a = (a * ONE_20) / a7;\r\n            sum += x7;\r\n        }\r\n\r\n        if (a >= a8) {\r\n            a = (a * ONE_20) / a8;\r\n            sum += x8;\r\n        }\r\n\r\n        if (a >= a9) {\r\n            a = (a * ONE_20) / a9;\r\n            sum += x9;\r\n        }\r\n\r\n        if (a >= a10) {\r\n            a = (a * ONE_20) / a10;\r\n            sum += x10;\r\n        }\r\n\r\n        if (a >= a11) {\r\n            a = (a * ONE_20) / a11;\r\n            sum += x11;\r\n        }\r\n\r\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\r\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\r\n        // Let z = (a - 1) / (a + 1).\r\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\r\n\r\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\r\n        // division by ONE_20.\r\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\r\n        int256 z_squared = (z * z) / ONE_20;\r\n\r\n        // num is the numerator of the series: the z^(2 * n + 1) term\r\n        int256 num = z;\r\n\r\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\r\n        int256 seriesSum = num;\r\n\r\n        // In each step, the numerator is multiplied by z^2\r\n        num = (num * z_squared) / ONE_20;\r\n        seriesSum += num / 3;\r\n\r\n        num = (num * z_squared) / ONE_20;\r\n        seriesSum += num / 5;\r\n\r\n        num = (num * z_squared) / ONE_20;\r\n        seriesSum += num / 7;\r\n\r\n        num = (num * z_squared) / ONE_20;\r\n        seriesSum += num / 9;\r\n\r\n        num = (num * z_squared) / ONE_20;\r\n        seriesSum += num / 11;\r\n\r\n        // 6 Taylor terms are sufficient for 36 decimal precision.\r\n\r\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\r\n        seriesSum *= 2;\r\n\r\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\r\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\r\n        // value.\r\n\r\n        return (sum + seriesSum) / 100;\r\n    }\r\n\r\n    /**\r\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument argument.\r\n     */\r\n    function log(int256 arg, int256 base) internal pure returns (int256) {\r\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\r\n\r\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\r\n        // upscaling.\r\n\r\n        int256 logBase;\r\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\r\n            logBase = ln_36(base);\r\n        } else {\r\n            logBase = ln(base) * ONE_18;\r\n        }\r\n\r\n        int256 logArg;\r\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\r\n            logArg = ln_36(arg);\r\n        } else {\r\n            logArg = ln(arg) * ONE_18;\r\n        }\r\n\r\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\r\n        return (logArg * ONE_18) / logBase;\r\n    }\r\n\r\n    /**\r\n     * @dev High precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\r\n     * for x close to one.\r\n     *\r\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\r\n     */\r\n    function ln_36(int256 x) private pure returns (int256) {\r\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\r\n        // worthwhile.\r\n\r\n        // First, we transform x to a 36 digit fixed point value.\r\n        x *= ONE_18;\r\n\r\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\r\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\r\n\r\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\r\n        // division by ONE_36.\r\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\r\n        int256 z_squared = (z * z) / ONE_36;\r\n\r\n        // num is the numerator of the series: the z^(2 * n + 1) term\r\n        int256 num = z;\r\n\r\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\r\n        int256 seriesSum = num;\r\n\r\n        // In each step, the numerator is multiplied by z^2\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 3;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 5;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 7;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 9;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 11;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 13;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 15;\r\n\r\n        // 8 Taylor terms are sufficient for 36 decimal precision.\r\n\r\n        // All that remains is multiplying by 2 (non fixed point).\r\n        return seriesSum * 2;\r\n    }\r\n}\r\n"
    },
    "contracts/lib/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../helpers/BalancerErrors.sol\";\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\r\n * Adapted from OpenZeppelin's SafeMath library\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        _require(c >= a, Errors.ADD_OVERFLOW);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        _require(b <= a, Errors.SUB_OVERFLOW);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers of 256 bits.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers of 256 bits.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\r\n        return c;\r\n    }\r\n\r\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        _require(b != 0, Errors.ZERO_DIVISION);\r\n        return a / b;\r\n    }\r\n\r\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        _require(b != 0, Errors.ZERO_DIVISION);\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        } else {\r\n            return 1 + (a - 1) / b;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lib/openzeppelin/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// Based on the EnumerableMap library from OpenZeppelin contracts, altered to include the following:\r\n//  * a map from IERC20 to bytes32\r\n//  * entries are stored in mappings instead of arrays, reducing implicit storage reads for out-of-bounds checks\r\n//  * unchecked_at and unchecked_valueAt, which allow for more gas efficient data reads in some scenarios\r\n//  * unchecked_indexOf and unchecked_setAt, which allow for more gas efficient data writes in some scenarios\r\n//\r\n// Additionally, the base private functions that work on bytes32 were removed and replaced with a native implementation\r\n// for IERC20 keys, to reduce bytecode size and runtime costs.\r\n\r\n// We're using non-standard casing for the unchecked functions to differentiate them, so we need to turn off that rule\r\n// solhint-disable func-name-mixedcase\r\n\r\nimport \"./IERC20.sol\";\r\n\r\nimport \"../helpers/BalancerErrors.sol\";\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n */\r\nlibrary EnumerableMap {\r\n    // The original OpenZeppelin implementation uses a generic Map type with bytes32 keys: this was replaced with\r\n    // IERC20ToBytes32Map, which uses IERC20 keys natively, resulting in more dense bytecode.\r\n\r\n    struct IERC20ToBytes32MapEntry {\r\n        IERC20 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct IERC20ToBytes32Map {\r\n        // Number of entries in the map\r\n        uint256 _length;\r\n        // Storage of map keys and values\r\n        mapping(uint256 => IERC20ToBytes32MapEntry) _entries;\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping(IERC20 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(\r\n        IERC20ToBytes32Map storage map,\r\n        IERC20 key,\r\n        bytes32 value\r\n    ) internal returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        // Equivalent to !contains(map, key)\r\n        if (keyIndex == 0) {\r\n            uint256 previousLength = map._length;\r\n            map._entries[previousLength] = IERC20ToBytes32MapEntry({ _key: key, _value: value });\r\n            map._length = previousLength + 1;\r\n\r\n            // The entry is stored at previousLength, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = previousLength + 1;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the value for an entry, given its key's index. The key index can be retrieved via\r\n     * {unchecked_indexOf}, and it should be noted that key indices may change when calling {set} or {remove}. O(1).\r\n     *\r\n     * This function performs one less storage read than {set}, but it should only be used when `index` is known to be\r\n     * within bounds.\r\n     */\r\n    function unchecked_setAt(\r\n        IERC20ToBytes32Map storage map,\r\n        uint256 index,\r\n        bytes32 value\r\n    ) internal {\r\n        map._entries[index]._value = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(IERC20ToBytes32Map storage map, IERC20 key) internal returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        // Equivalent to contains(map, key)\r\n        if (keyIndex != 0) {\r\n            // To delete a key-value pair from the _entries pseudo-array in O(1), we swap the entry to delete with the\r\n            // one at the highest index, and then remove this last entry (sometimes called as 'swap and pop').\r\n            // This modifies the order of the pseudo-array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            IERC20ToBytes32MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            delete map._entries[lastIndex];\r\n            map._length = lastIndex;\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(IERC20ToBytes32Map storage map, IERC20 key) internal view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function length(IERC20ToBytes32Map storage map) internal view returns (uint256) {\r\n        return map._length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of entries inside the\r\n     * array, and it may change when more entries are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(IERC20ToBytes32Map storage map, uint256 index) internal view returns (IERC20, bytes32) {\r\n        _require(map._length > index, Errors.OUT_OF_BOUNDS);\r\n        return unchecked_at(map, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the map (i.e. if it is equal or larger\r\n     * than {length}). O(1).\r\n     *\r\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\r\n     * within bounds.\r\n     */\r\n    function unchecked_at(IERC20ToBytes32Map storage map, uint256 index) internal view returns (IERC20, bytes32) {\r\n        IERC20ToBytes32MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {unchecked_At}, except it only returns the value and not the key (performing one less storage\r\n     * read). O(1).\r\n     */\r\n    function unchecked_valueAt(IERC20ToBytes32Map storage map, uint256 index) internal view returns (bytes32) {\r\n        return map._entries[index]._value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`. O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map. Reverts with `errorCode` otherwise.\r\n     */\r\n    function get(\r\n        IERC20ToBytes32Map storage map,\r\n        IERC20 key,\r\n        uint256 errorCode\r\n    ) internal view returns (bytes32) {\r\n        uint256 index = map._indexes[key];\r\n        _require(index > 0, errorCode);\r\n        return unchecked_valueAt(map, index - 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the index for `key` **plus one**. Does not revert if the key is not in the map, and returns 0\r\n     * instead.\r\n     */\r\n    function unchecked_indexOf(IERC20ToBytes32Map storage map, IERC20 key) internal view returns (uint256) {\r\n        return map._indexes[key];\r\n    }\r\n}\r\n"
    },
    "contracts/lib/openzeppelin/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../helpers/BalancerErrors.sol\";\r\n\r\n// Based on the EnumerableSet library from OpenZeppelin contracts, altered to remove the base private functions that\r\n// work on bytes32, replacing them with a native implementation for address values, to reduce bytecode size and runtime\r\n// costs.\r\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\r\n    // AddressSet, which uses address keys natively, resulting in more dense bytecode.\r\n\r\n    struct AddressSet {\r\n        // Storage of set values\r\n        address[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(address => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        if (!contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            address lastValue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastValue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        _require(set._values.length > index, Errors.OUT_OF_BOUNDS);\r\n        return unchecked_at(set, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\r\n     * than {length}). O(1).\r\n     *\r\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\r\n     * within bounds.\r\n     */\r\n    function unchecked_at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return set._values[index];\r\n    }\r\n}\r\n"
    },
    "contracts/lib/openzeppelin/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../helpers/BalancerErrors.sol\";\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        _require(value < 2**255, Errors.SAFE_CAST_VALUE_CANT_FIT_INT256);\r\n        return int256(value);\r\n    }\r\n}\r\n"
    },
    "contracts/vault/PoolBalances.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/math/Math.sol\";\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/helpers/InputHelpers.sol\";\r\nimport \"../lib/openzeppelin/IERC20.sol\";\r\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\r\nimport \"../lib/openzeppelin/SafeERC20.sol\";\r\n\r\nimport \"./Fees.sol\";\r\nimport \"./PoolTokens.sol\";\r\nimport \"./UserBalance.sol\";\r\nimport \"./interfaces/IBasePool.sol\";\r\n\r\n/**\r\n * @dev Stores the Asset Managers (by Pool and token), and implements the top level Asset Manager and Pool interfaces,\r\n * such as registering and deregistering tokens, joining and exiting Pools, and informational functions like `getPool`\r\n * and `getPoolTokens`, delegating to specialization-specific functions as needed.\r\n *\r\n * `managePoolBalance` handles all Asset Manager interactions.\r\n */\r\nabstract contract PoolBalances is Fees, ReentrancyGuard, PoolTokens, UserBalance {\r\n    using Math for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using BalanceAllocation for bytes32;\r\n    using BalanceAllocation for bytes32[];\r\n\r\n    function joinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        JoinPoolRequest memory request\r\n    ) external payable override whenNotPaused {\r\n        // This function doesn't have the nonReentrant modifier: it is applied to `_joinOrExit` instead.\r\n\r\n        // Note that `recipient` is not actually payable in the context of a join - we cast it because we handle both\r\n        // joins and exits at once.\r\n        _joinOrExit(PoolBalanceChangeKind.JOIN, poolId, sender, payable(recipient), _toPoolBalanceChange(request));\r\n    }\r\n\r\n    function exitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address payable recipient,\r\n        ExitPoolRequest memory request\r\n    ) external override {\r\n        // This function doesn't have the nonReentrant modifier: it is applied to `_joinOrExit` instead.\r\n        _joinOrExit(PoolBalanceChangeKind.EXIT, poolId, sender, recipient, _toPoolBalanceChange(request));\r\n    }\r\n\r\n    // This has the exact same layout as JoinPoolRequest and ExitPoolRequest, except the `maxAmountsIn` and\r\n    // `minAmountsOut` are called `limits`. Internally we use this struct for both since these two functions are quite\r\n    // similar, but expose the others to callers for clarity.\r\n    struct PoolBalanceChange {\r\n        IAsset[] assets;\r\n        uint256[] limits;\r\n        bytes userData;\r\n        bool useInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a JoinPoolRequest into a PoolBalanceChange, with no runtime cost.\r\n     */\r\n    function _toPoolBalanceChange(JoinPoolRequest memory request)\r\n        private\r\n        pure\r\n        returns (PoolBalanceChange memory change)\r\n    {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            change := request\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an ExitPoolRequest into a PoolBalanceChange, with no runtime cost.\r\n     */\r\n    function _toPoolBalanceChange(ExitPoolRequest memory request)\r\n        private\r\n        pure\r\n        returns (PoolBalanceChange memory change)\r\n    {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            change := request\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Implements both `joinPool` and `exitPool`, based on `kind`.\r\n     */\r\n    function _joinOrExit(\r\n        PoolBalanceChangeKind kind,\r\n        bytes32 poolId,\r\n        address sender,\r\n        address payable recipient,\r\n        PoolBalanceChange memory change\r\n    ) private nonReentrant withRegisteredPool(poolId) authenticateFor(sender) {\r\n        // This function uses a large number of stack variables (poolId, sender and recipient, balances, amounts, fees,\r\n        // etc.), which leads to 'stack too deep' issues. It relies on private functions with seemingly arbitrary\r\n        // interfaces to work around this limitation.\r\n\r\n        InputHelpers.ensureInputLengthMatch(change.assets.length, change.limits.length);\r\n\r\n        // We first check that the caller passed the Pool's registered tokens in the correct order, and retrieve the\r\n        // current balance for each.\r\n        IERC20[] memory tokens = _translateToIERC20(change.assets);\r\n        bytes32[] memory balances = _validateTokensAndGetBalances(poolId, tokens);\r\n\r\n        // The bulk of the work is done here: the corresponding Pool hook is called, its final balances are computed,\r\n        // assets are transferred, and fees are paid.\r\n        (\r\n            bytes32[] memory finalBalances,\r\n            uint256[] memory amountsInOrOut,\r\n            uint256[] memory paidProtocolSwapFeeAmounts\r\n        ) = _callPoolBalanceChange(kind, poolId, sender, recipient, change, balances);\r\n\r\n        // All that remains is storing the new Pool balances.\r\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\r\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\r\n            _setTwoTokenPoolCashBalances(poolId, tokens[0], finalBalances[0], tokens[1], finalBalances[1]);\r\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\r\n            _setMinimalSwapInfoPoolBalances(poolId, tokens, finalBalances);\r\n        } else {\r\n            // PoolSpecialization.GENERAL\r\n            _setGeneralPoolBalances(poolId, finalBalances);\r\n        }\r\n\r\n        bool positive = kind == PoolBalanceChangeKind.JOIN; // Amounts in are positive, out are negative\r\n        emit PoolBalanceChanged(\r\n            poolId,\r\n            sender,\r\n            tokens,\r\n            // We can unsafely cast to int256 because balances are actually stored as uint112\r\n            _unsafeCastToInt256(amountsInOrOut, positive),\r\n            paidProtocolSwapFeeAmounts\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Calls the corresponding Pool hook to get the amounts in/out plus protocol fee amounts, and performs the\r\n     * associated token transfers and fee payments, returning the Pool's final balances.\r\n     */\r\n    function _callPoolBalanceChange(\r\n        PoolBalanceChangeKind kind,\r\n        bytes32 poolId,\r\n        address sender,\r\n        address payable recipient,\r\n        PoolBalanceChange memory change,\r\n        bytes32[] memory balances\r\n    )\r\n        private\r\n        returns (\r\n            bytes32[] memory finalBalances,\r\n            uint256[] memory amountsInOrOut,\r\n            uint256[] memory dueProtocolFeeAmounts\r\n        )\r\n    {\r\n        (uint256[] memory totalBalances, uint256 lastChangeBlock) = balances.totalsAndLastChangeBlock();\r\n\r\n        IBasePool pool = IBasePool(_getPoolAddress(poolId));\r\n        (amountsInOrOut, dueProtocolFeeAmounts) = kind == PoolBalanceChangeKind.JOIN\r\n            ? pool.onJoinPool(\r\n                poolId,\r\n                sender,\r\n                recipient,\r\n                totalBalances,\r\n                lastChangeBlock,\r\n                _getProtocolSwapFeePercentage(),\r\n                change.userData\r\n            )\r\n            : pool.onExitPool(\r\n                poolId,\r\n                sender,\r\n                recipient,\r\n                totalBalances,\r\n                lastChangeBlock,\r\n                _getProtocolSwapFeePercentage(),\r\n                change.userData\r\n            );\r\n\r\n        InputHelpers.ensureInputLengthMatch(balances.length, amountsInOrOut.length, dueProtocolFeeAmounts.length);\r\n\r\n        // The Vault ignores the `recipient` in joins and the `sender` in exits: it is up to the Pool to keep track of\r\n        // their participation.\r\n        finalBalances = kind == PoolBalanceChangeKind.JOIN\r\n            ? _processJoinPoolTransfers(sender, change, balances, amountsInOrOut, dueProtocolFeeAmounts)\r\n            : _processExitPoolTransfers(recipient, change, balances, amountsInOrOut, dueProtocolFeeAmounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amountsIn` from `sender`, checking that they are within their accepted limits, and pays\r\n     * accumulated protocol swap fees.\r\n     *\r\n     * Returns the Pool's final balances, which are the current balances plus `amountsIn` minus accumulated protocol\r\n     * swap fees.\r\n     */\r\n    function _processJoinPoolTransfers(\r\n        address sender,\r\n        PoolBalanceChange memory change,\r\n        bytes32[] memory balances,\r\n        uint256[] memory amountsIn,\r\n        uint256[] memory dueProtocolFeeAmounts\r\n    ) private returns (bytes32[] memory finalBalances) {\r\n        // We need to track how much of the received ETH was used and wrapped into WETH to return any excess.\r\n        uint256 wrappedEth = 0;\r\n\r\n        finalBalances = new bytes32[](balances.length);\r\n        for (uint256 i = 0; i < change.assets.length; ++i) {\r\n            uint256 amountIn = amountsIn[i];\r\n            _require(amountIn <= change.limits[i], Errors.JOIN_ABOVE_MAX);\r\n\r\n            // Receive assets from the sender - possibly from Internal Balance.\r\n            IAsset asset = change.assets[i];\r\n            _receiveAsset(asset, amountIn, sender, change.useInternalBalance);\r\n\r\n            if (_isETH(asset)) {\r\n                wrappedEth = wrappedEth.add(amountIn);\r\n            }\r\n\r\n            uint256 feeAmount = dueProtocolFeeAmounts[i];\r\n            _payFeeAmount(_translateToIERC20(asset), feeAmount);\r\n\r\n            // Compute the new Pool balances. Note that the fee amount might be larger than `amountIn`,\r\n            // resulting in an overall decrease of the Pool's balance for a token.\r\n            finalBalances[i] = (amountIn >= feeAmount) // This lets us skip checked arithmetic\r\n                ? balances[i].increaseCash(amountIn - feeAmount)\r\n                : balances[i].decreaseCash(feeAmount - amountIn);\r\n        }\r\n\r\n        // Handle any used and remaining ETH.\r\n        _handleRemainingEth(wrappedEth);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amountsOut` to `recipient`, checking that they are within their accepted limits, and pays\r\n     * accumulated protocol swap fees from the Pool.\r\n     *\r\n     * Returns the Pool's final balances, which are the current `balances` minus `amountsOut` and fees paid\r\n     * (`dueProtocolFeeAmounts`).\r\n     */\r\n    function _processExitPoolTransfers(\r\n        address payable recipient,\r\n        PoolBalanceChange memory change,\r\n        bytes32[] memory balances,\r\n        uint256[] memory amountsOut,\r\n        uint256[] memory dueProtocolFeeAmounts\r\n    ) private returns (bytes32[] memory finalBalances) {\r\n        finalBalances = new bytes32[](balances.length);\r\n        for (uint256 i = 0; i < change.assets.length; ++i) {\r\n            uint256 amountOut = amountsOut[i];\r\n            _require(amountOut >= change.limits[i], Errors.EXIT_BELOW_MIN);\r\n\r\n            // Send tokens to the recipient - possibly to Internal Balance\r\n            IAsset asset = change.assets[i];\r\n            _sendAsset(asset, amountOut, recipient, change.useInternalBalance);\r\n\r\n            uint256 feeAmount = dueProtocolFeeAmounts[i];\r\n            _payFeeAmount(_translateToIERC20(asset), feeAmount);\r\n\r\n            // Compute the new Pool balances. A Pool's token balance always decreases after an exit (potentially by 0).\r\n            finalBalances[i] = balances[i].decreaseCash(amountOut.add(feeAmount));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total balance for `poolId`'s `expectedTokens`.\r\n     *\r\n     * `expectedTokens` must exactly equal the token array returned by `getPoolTokens`: both arrays must have the same\r\n     * length, elements and order. Additionally, the Pool must have at least one registered token.\r\n     */\r\n    function _validateTokensAndGetBalances(bytes32 poolId, IERC20[] memory expectedTokens)\r\n        private\r\n        view\r\n        returns (bytes32[] memory)\r\n    {\r\n        (IERC20[] memory actualTokens, bytes32[] memory balances) = _getPoolTokens(poolId);\r\n        InputHelpers.ensureInputLengthMatch(actualTokens.length, expectedTokens.length);\r\n        _require(actualTokens.length > 0, Errors.POOL_NO_TOKENS);\r\n\r\n        for (uint256 i = 0; i < actualTokens.length; ++i) {\r\n            _require(actualTokens[i] == expectedTokens[i], Errors.TOKENS_MISMATCH);\r\n        }\r\n\r\n        return balances;\r\n    }\r\n\r\n    /**\r\n     * @dev Casts an array of uint256 to int256, setting the sign of the result according to the `positive` flag,\r\n     * without checking whether the values fit in the signed 256 bit range.\r\n     */\r\n    function _unsafeCastToInt256(uint256[] memory values, bool positive)\r\n        private\r\n        pure\r\n        returns (int256[] memory signedValues)\r\n    {\r\n        signedValues = new int256[](values.length);\r\n        for (uint256 i = 0; i < values.length; i++) {\r\n            signedValues[i] = positive ? int256(values[i]) : -int256(values[i]);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/vault/interfaces/IPoolSwapStructs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../../lib/openzeppelin/IERC20.sol\";\r\n\r\nimport \"./IVault.sol\";\r\n\r\ninterface IPoolSwapStructs {\r\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\r\n    // IMinimalSwapInfoPool.\r\n    //\r\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\r\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\r\n    //\r\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\r\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\r\n    //\r\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\r\n    // some Pools.\r\n    //\r\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\r\n    // one Pool.\r\n    //\r\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\r\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\r\n    //    balance.\r\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\r\n    //\r\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\r\n    // where the Pool sends the outgoing tokens.\r\n    //\r\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\r\n    struct SwapRequest {\r\n        IVault.SwapKind kind;\r\n        IERC20 tokenIn;\r\n        IERC20 tokenOut;\r\n        uint256 amount;\r\n        // Misc data\r\n        bytes32 poolId;\r\n        uint256 lastChangeBlock;\r\n        address from;\r\n        address to;\r\n        bytes userData;\r\n    }\r\n}\r\n"
    },
    "contracts/vault/interfaces/IGeneralPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./IBasePool.sol\";\r\n\r\n/**\r\n * @dev IPools with the General specialization setting should implement this interface.\r\n *\r\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\r\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\r\n * grant to the pool in a 'given out' swap.\r\n *\r\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\r\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\r\n * indeed the Vault.\r\n */\r\ninterface IGeneralPool is IBasePool {\r\n    function onSwap(\r\n        SwapRequest memory swapRequest,\r\n        uint256[] memory balances,\r\n        uint256 indexIn,\r\n        uint256 indexOut\r\n    ) external returns (uint256 amount);\r\n}\r\n"
    },
    "contracts/vault/interfaces/IMinimalSwapInfoPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./IBasePool.sol\";\r\n\r\n/**\r\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\r\n *\r\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\r\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\r\n * to the pool in a 'given out' swap.\r\n *\r\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\r\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\r\n * indeed the Vault.\r\n */\r\ninterface IMinimalSwapInfoPool is IBasePool {\r\n    function onSwap(\r\n        SwapRequest memory swapRequest,\r\n        uint256 currentBalanceTokenIn,\r\n        uint256 currentBalanceTokenOut\r\n    ) external returns (uint256 amount);\r\n}\r\n"
    },
    "contracts/vault/balances/BalanceAllocation.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../../lib/math/Math.sol\";\r\n\r\n// This library is used to create a data structure that represents a token's balance for a Pool. 'cash' is how many\r\n// tokens the Pool has sitting inside of the Vault. 'managed' is how many tokens were withdrawn from the Vault by the\r\n// Pool's Asset Manager. 'total' is the sum of these two, and represents the Pool's total token balance, including\r\n// tokens that are *not* inside of the Vault.\r\n//\r\n// 'cash' is updated whenever tokens enter and exit the Vault, while 'managed' is only updated if the reason tokens are\r\n// moving is due to an Asset Manager action. This is reflected in the different methods available: 'increaseCash'\r\n// and 'decreaseCash' for swaps and add/remove liquidity events, and 'cashToManaged' and 'managedToCash' for events\r\n// transferring funds to and from the Asset Manager.\r\n//\r\n// The Vault disallows the Pool's 'cash' from becoming negative. In other words, it can never use any tokens that are\r\n// not inside the Vault.\r\n//\r\n// One of the goals of this library is to store the entire token balance in a single storage slot, which is why we use\r\n// 112 bit unsigned integers for 'cash' and 'managed'. For consistency, we also disallow any combination of 'cash' and\r\n// 'managed' that yields a 'total' that doesn't fit in 112 bits.\r\n//\r\n// The remaining 32 bits of the slot are used to store the most recent block when the total balance changed. This\r\n// can be used to implement price oracles that are resilient to 'sandwich' attacks.\r\n//\r\n// We could use a Solidity struct to pack these three values together in a single storage slot, but unfortunately\r\n// Solidity only allows for structs to live in either storage, calldata or memory. Because a memory struct still takes\r\n// up a slot in the stack (to store its memory location), and because the entire balance fits in a single stack slot\r\n// (two 112 bit values plus the 32 bit block), using memory is strictly less gas performant. Therefore, we do manual\r\n// packing and unpacking.\r\n//\r\n// Since we cannot define new types, we rely on bytes32 to represent these values instead, as it doesn't have any\r\n// associated arithmetic operations and therefore reduces the chance of misuse.\r\nlibrary BalanceAllocation {\r\n    using Math for uint256;\r\n\r\n    // The 'cash' portion of the balance is stored in the least significant 112 bits of a 256 bit word, while the\r\n    // 'managed' part uses the following 112 bits. The most significant 32 bits are used to store the block\r\n\r\n    /**\r\n     * @dev Returns the total amount of Pool tokens, including those that are not currently in the Vault ('managed').\r\n     */\r\n    function total(bytes32 balance) internal pure returns (uint256) {\r\n        // Since 'cash' and 'managed' are 112 bit values, we don't need checked arithmetic. Additionally, `toBalance`\r\n        // ensures that 'total' always fits in 112 bits.\r\n        return cash(balance) + managed(balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of Pool tokens currently in the Vault.\r\n     */\r\n    function cash(bytes32 balance) internal pure returns (uint256) {\r\n        uint256 mask = 2**(112) - 1;\r\n        return uint256(balance) & mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of Pool tokens that are being managed by an Asset Manager.\r\n     */\r\n    function managed(bytes32 balance) internal pure returns (uint256) {\r\n        uint256 mask = 2**(112) - 1;\r\n        return uint256(balance >> 112) & mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the last block when the total balance changed.\r\n     */\r\n    function lastChangeBlock(bytes32 balance) internal pure returns (uint256) {\r\n        uint256 mask = 2**(32) - 1;\r\n        return uint256(balance >> 224) & mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the difference in 'managed' between two balances.\r\n     */\r\n    function managedDelta(bytes32 newBalance, bytes32 oldBalance) internal pure returns (int256) {\r\n        // Because `managed` is a 112 bit value, we can safely perform unchecked arithmetic in 256 bits.\r\n        return int256(managed(newBalance)) - int256(managed(oldBalance));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total balance for each entry in `balances`, as well as the latest block when the total\r\n     * balance of *any* of them last changed.\r\n     */\r\n    function totalsAndLastChangeBlock(bytes32[] memory balances)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256[] memory results,\r\n            uint256 lastChangeBlock_ // Avoid shadowing\r\n        )\r\n    {\r\n        results = new uint256[](balances.length);\r\n        lastChangeBlock_ = 0;\r\n\r\n        for (uint256 i = 0; i < results.length; i++) {\r\n            bytes32 balance = balances[i];\r\n            results[i] = total(balance);\r\n            lastChangeBlock_ = Math.max(lastChangeBlock_, lastChangeBlock(balance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `balance`'s 'total' balance is zero. Costs less gas than computing 'total' and comparing\r\n     * with zero.\r\n     */\r\n    function isZero(bytes32 balance) internal pure returns (bool) {\r\n        // We simply need to check the least significant 224 bytes of the word: the block does not affect this.\r\n        uint256 mask = 2**(224) - 1;\r\n        return (uint256(balance) & mask) == 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `balance`'s 'total' balance is not zero. Costs less gas than computing 'total' and comparing\r\n     * with zero.\r\n     */\r\n    function isNotZero(bytes32 balance) internal pure returns (bool) {\r\n        return !isZero(balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Packs together `cash` and `managed` amounts with a block to create a balance value.\r\n     *\r\n     * For consistency, this also checks that the sum of `cash` and `managed` (`total`) fits in 112 bits.\r\n     */\r\n    function toBalance(\r\n        uint256 _cash,\r\n        uint256 _managed,\r\n        uint256 _blockNumber\r\n    ) internal pure returns (bytes32) {\r\n        uint256 _total = _cash + _managed;\r\n\r\n        // Since both 'cash' and 'managed' are positive integers, by checking that their sum ('total') fits in 112 bits\r\n        // we are also indirectly checking that both 'cash' and 'managed' themselves fit in 112 bits.\r\n        _require(_total >= _cash && _total < 2**112, Errors.BALANCE_TOTAL_OVERFLOW);\r\n\r\n        // We assume the block fits in 32 bits - this is expected to hold for at least a few decades.\r\n        return _pack(_cash, _managed, _blockNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev Increases a Pool's 'cash' (and therefore its 'total'). Called when Pool tokens are sent to the Vault (except\r\n     * for Asset Manager deposits).\r\n     *\r\n     * Updates the last total balance change block, even if `amount` is zero.\r\n     */\r\n    function increaseCash(bytes32 balance, uint256 amount) internal view returns (bytes32) {\r\n        uint256 newCash = cash(balance).add(amount);\r\n        uint256 currentManaged = managed(balance);\r\n        uint256 newLastChangeBlock = block.number;\r\n\r\n        return toBalance(newCash, currentManaged, newLastChangeBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases a Pool's 'cash' (and therefore its 'total'). Called when Pool tokens are sent from the Vault\r\n     * (except for Asset Manager withdrawals).\r\n     *\r\n     * Updates the last total balance change block, even if `amount` is zero.\r\n     */\r\n    function decreaseCash(bytes32 balance, uint256 amount) internal view returns (bytes32) {\r\n        uint256 newCash = cash(balance).sub(amount);\r\n        uint256 currentManaged = managed(balance);\r\n        uint256 newLastChangeBlock = block.number;\r\n\r\n        return toBalance(newCash, currentManaged, newLastChangeBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves 'cash' into 'managed', leaving 'total' unchanged. Called when an Asset Manager withdraws Pool tokens\r\n     * from the Vault.\r\n     */\r\n    function cashToManaged(bytes32 balance, uint256 amount) internal pure returns (bytes32) {\r\n        uint256 newCash = cash(balance).sub(amount);\r\n        uint256 newManaged = managed(balance).add(amount);\r\n        uint256 currentLastChangeBlock = lastChangeBlock(balance);\r\n\r\n        return toBalance(newCash, newManaged, currentLastChangeBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves 'managed' into 'cash', leaving 'total' unchanged. Called when an Asset Manager deposits Pool tokens\r\n     * into the Vault.\r\n     */\r\n    function managedToCash(bytes32 balance, uint256 amount) internal pure returns (bytes32) {\r\n        uint256 newCash = cash(balance).add(amount);\r\n        uint256 newManaged = managed(balance).sub(amount);\r\n        uint256 currentLastChangeBlock = lastChangeBlock(balance);\r\n\r\n        return toBalance(newCash, newManaged, currentLastChangeBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets 'managed' balance to an arbitrary value, changing 'total'. Called when the Asset Manager reports\r\n     * profits or losses. It's the Manager's responsibility to provide a meaningful value.\r\n     *\r\n     * Updates the last total balance change block, even if `newManaged` is equal to the current 'managed' value.\r\n     */\r\n    function setManaged(bytes32 balance, uint256 newManaged) internal view returns (bytes32) {\r\n        uint256 currentCash = cash(balance);\r\n        uint256 newLastChangeBlock = block.number;\r\n        return toBalance(currentCash, newManaged, newLastChangeBlock);\r\n    }\r\n\r\n    // Alternative mode for Pools with the Two Token specialization setting\r\n\r\n    // Instead of storing cash and external for each 'token in' a single storage slot, Two Token Pools store the cash\r\n    // for both tokens in the same slot, and the managed for both in another one. This reduces the gas cost for swaps,\r\n    // because the only slot that needs to be updated is the one with the cash. However, it also means that managing\r\n    // balances is more cumbersome, as both tokens need to be read/written at the same time.\r\n    //\r\n    // The field with both cash balances packed is called sharedCash, and the one with external amounts is called\r\n    // sharedManaged. These two are collectively called the 'shared' balance fields. In both of these, the portion\r\n    // that corresponds to token A is stored in the least significant 112 bits of a 256 bit word, while token B's part\r\n    // uses the next least significant 112 bits.\r\n    //\r\n    // Because only cash is written to during a swap, we store the last total balance change block with the\r\n    // packed cash fields. Typically Pools have a distinct block per token: in the case of Two Token Pools they\r\n    // are the same.\r\n\r\n    /**\r\n     * @dev Extracts the part of the balance that corresponds to token A. This function can be used to decode both\r\n     * shared cash and managed balances.\r\n     */\r\n    function _decodeBalanceA(bytes32 sharedBalance) private pure returns (uint256) {\r\n        uint256 mask = 2**(112) - 1;\r\n        return uint256(sharedBalance) & mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Extracts the part of the balance that corresponds to token B. This function can be used to decode both\r\n     * shared cash and managed balances.\r\n     */\r\n    function _decodeBalanceB(bytes32 sharedBalance) private pure returns (uint256) {\r\n        uint256 mask = 2**(112) - 1;\r\n        return uint256(sharedBalance >> 112) & mask;\r\n    }\r\n\r\n    // To decode the last balance change block, we can simply use the `blockNumber` function.\r\n\r\n    /**\r\n     * @dev Unpacks the shared token A and token B cash and managed balances into the balance for token A.\r\n     */\r\n    function fromSharedToBalanceA(bytes32 sharedCash, bytes32 sharedManaged) internal pure returns (bytes32) {\r\n        // Note that we extract the block from the sharedCash field, which is the one that is updated by swaps.\r\n        // Both token A and token B use the same block\r\n        return toBalance(_decodeBalanceA(sharedCash), _decodeBalanceA(sharedManaged), lastChangeBlock(sharedCash));\r\n    }\r\n\r\n    /**\r\n     * @dev Unpacks the shared token A and token B cash and managed balances into the balance for token B.\r\n     */\r\n    function fromSharedToBalanceB(bytes32 sharedCash, bytes32 sharedManaged) internal pure returns (bytes32) {\r\n        // Note that we extract the block from the sharedCash field, which is the one that is updated by swaps.\r\n        // Both token A and token B use the same block\r\n        return toBalance(_decodeBalanceB(sharedCash), _decodeBalanceB(sharedManaged), lastChangeBlock(sharedCash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the sharedCash shared field, given the current balances for token A and token B.\r\n     */\r\n    function toSharedCash(bytes32 tokenABalance, bytes32 tokenBBalance) internal pure returns (bytes32) {\r\n        // Both balances are assigned the same block  Since it is possible a single one of them has changed (for\r\n        // example, in an Asset Manager update), we keep the latest (largest) one.\r\n        uint32 newLastChangeBlock = uint32(Math.max(lastChangeBlock(tokenABalance), lastChangeBlock(tokenBBalance)));\r\n\r\n        return _pack(cash(tokenABalance), cash(tokenBBalance), newLastChangeBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the sharedManaged shared field, given the current balances for token A and token B.\r\n     */\r\n    function toSharedManaged(bytes32 tokenABalance, bytes32 tokenBBalance) internal pure returns (bytes32) {\r\n        // We don't bother storing a last change block, as it is read from the shared cash field.\r\n        return _pack(managed(tokenABalance), managed(tokenBBalance), 0);\r\n    }\r\n\r\n    // Shared functions\r\n\r\n    /**\r\n     * @dev Packs together two uint112 and one uint32 into a bytes32\r\n     */\r\n    function _pack(\r\n        uint256 _leastSignificant,\r\n        uint256 _midSignificant,\r\n        uint256 _mostSignificant\r\n    ) private pure returns (bytes32) {\r\n        return bytes32((_mostSignificant << 224) + (_midSignificant << 112) + _leastSignificant);\r\n    }\r\n}\r\n"
    },
    "contracts/vault/PoolTokens.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\r\n\r\nimport \"./AssetManagers.sol\";\r\nimport \"./PoolRegistry.sol\";\r\nimport \"./balances/BalanceAllocation.sol\";\r\n\r\nabstract contract PoolTokens is ReentrancyGuard, PoolRegistry, AssetManagers {\r\n    using BalanceAllocation for bytes32;\r\n    using BalanceAllocation for bytes32[];\r\n\r\n    function registerTokens(\r\n        bytes32 poolId,\r\n        IERC20[] memory tokens,\r\n        address[] memory assetManagers\r\n    ) external override nonReentrant whenNotPaused onlyPool(poolId) {\r\n        InputHelpers.ensureInputLengthMatch(tokens.length, assetManagers.length);\r\n\r\n        // Validates token addresses and assigns Asset Managers\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            IERC20 token = tokens[i];\r\n            _require(token != IERC20(0), Errors.INVALID_TOKEN);\r\n\r\n            _poolAssetManagers[poolId][token] = assetManagers[i];\r\n        }\r\n\r\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\r\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\r\n            _require(tokens.length == 2, Errors.TOKENS_LENGTH_MUST_BE_2);\r\n            _registerTwoTokenPoolTokens(poolId, tokens[0], tokens[1]);\r\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\r\n            _registerMinimalSwapInfoPoolTokens(poolId, tokens);\r\n        } else {\r\n            // PoolSpecialization.GENERAL\r\n            _registerGeneralPoolTokens(poolId, tokens);\r\n        }\r\n\r\n        emit TokensRegistered(poolId, tokens, assetManagers);\r\n    }\r\n\r\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens)\r\n        external\r\n        override\r\n        nonReentrant\r\n        whenNotPaused\r\n        onlyPool(poolId)\r\n    {\r\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\r\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\r\n            _require(tokens.length == 2, Errors.TOKENS_LENGTH_MUST_BE_2);\r\n            _deregisterTwoTokenPoolTokens(poolId, tokens[0], tokens[1]);\r\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\r\n            _deregisterMinimalSwapInfoPoolTokens(poolId, tokens);\r\n        } else {\r\n            // PoolSpecialization.GENERAL\r\n            _deregisterGeneralPoolTokens(poolId, tokens);\r\n        }\r\n\r\n        // The deregister calls above ensure the total token balance is zero. Therefore it is now safe to remove any\r\n        // associated Asset Managers, since they hold no Pool balance.\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            delete _poolAssetManagers[poolId][tokens[i]];\r\n        }\r\n\r\n        emit TokensDeregistered(poolId, tokens);\r\n    }\r\n\r\n    function getPoolTokens(bytes32 poolId)\r\n        external\r\n        view\r\n        override\r\n        withRegisteredPool(poolId)\r\n        returns (\r\n            IERC20[] memory tokens,\r\n            uint256[] memory balances,\r\n            uint256 lastChangeBlock\r\n        )\r\n    {\r\n        bytes32[] memory rawBalances;\r\n        (tokens, rawBalances) = _getPoolTokens(poolId);\r\n        (balances, lastChangeBlock) = rawBalances.totalsAndLastChangeBlock();\r\n    }\r\n\r\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\r\n        external\r\n        view\r\n        override\r\n        withRegisteredPool(poolId)\r\n        returns (\r\n            uint256 cash,\r\n            uint256 managed,\r\n            uint256 lastChangeBlock,\r\n            address assetManager\r\n        )\r\n    {\r\n        bytes32 balance;\r\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\r\n\r\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\r\n            balance = _getTwoTokenPoolBalance(poolId, token);\r\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\r\n            balance = _getMinimalSwapInfoPoolBalance(poolId, token);\r\n        } else {\r\n            // PoolSpecialization.GENERAL\r\n            balance = _getGeneralPoolBalance(poolId, token);\r\n        }\r\n\r\n        cash = balance.cash();\r\n        managed = balance.managed();\r\n        lastChangeBlock = balance.lastChangeBlock();\r\n        assetManager = _poolAssetManagers[poolId][token];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all of `poolId`'s registered tokens, along with their raw balances.\r\n     */\r\n    function _getPoolTokens(bytes32 poolId) internal view returns (IERC20[] memory tokens, bytes32[] memory balances) {\r\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\r\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\r\n            return _getTwoTokenPoolTokens(poolId);\r\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\r\n            return _getMinimalSwapInfoPoolTokens(poolId);\r\n        } else {\r\n            // PoolSpecialization.GENERAL\r\n            return _getGeneralPoolTokens(poolId);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/vault/UserBalance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/math/Math.sol\";\r\nimport \"../lib/openzeppelin/IERC20.sol\";\r\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\r\nimport \"../lib/openzeppelin/SafeCast.sol\";\r\nimport \"../lib/openzeppelin/SafeERC20.sol\";\r\n\r\nimport \"./AssetTransfersHandler.sol\";\r\nimport \"./VaultAuthorization.sol\";\r\n\r\n/**\r\n * Implement User Balance interactions, which combine Internal Balance and using the Vault's ERC20 allowance.\r\n *\r\n * Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\r\n * transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\r\n * when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\r\n * gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\r\n *\r\n * Internal Balance management features batching, which means a single contract call can be used to perform multiple\r\n * operations of different kinds, with different senders and recipients, at once.\r\n */\r\nabstract contract UserBalance is ReentrancyGuard, AssetTransfersHandler, VaultAuthorization {\r\n    using Math for uint256;\r\n    using SafeCast for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Internal Balance for each token, for each account.\r\n    mapping(address => mapping(IERC20 => uint256)) private _internalTokenBalance;\r\n\r\n    function getInternalBalance(address user, IERC20[] memory tokens)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[] memory balances)\r\n    {\r\n        balances = new uint256[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            balances[i] = _getInternalBalance(user, tokens[i]);\r\n        }\r\n    }\r\n\r\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable override nonReentrant {\r\n        // We need to track how much of the received ETH was used and wrapped into WETH to return any excess.\r\n        uint256 ethWrapped = 0;\r\n\r\n        // Cache for these checks so we only perform them once (if at all).\r\n        bool checkedCallerIsRelayer = false;\r\n        bool checkedNotPaused = false;\r\n\r\n        for (uint256 i = 0; i < ops.length; i++) {\r\n            UserBalanceOpKind kind;\r\n            IAsset asset;\r\n            uint256 amount;\r\n            address sender;\r\n            address payable recipient;\r\n\r\n            // This destructuring by calling `_validateUserBalanceOp` seems odd, but results in reduced bytecode size.\r\n            (kind, asset, amount, sender, recipient, checkedCallerIsRelayer) = _validateUserBalanceOp(\r\n                ops[i],\r\n                checkedCallerIsRelayer\r\n            );\r\n\r\n            if (kind == UserBalanceOpKind.WITHDRAW_INTERNAL) {\r\n                // Internal Balance withdrawals can always be performed by an authorized account.\r\n                _withdrawFromInternalBalance(asset, sender, recipient, amount);\r\n            } else {\r\n                // All other operations are blocked if the contract is paused.\r\n\r\n                // We cache the result of the pause check and skip it for other operations in this same transaction\r\n                // (if any).\r\n                if (!checkedNotPaused) {\r\n                    _ensureNotPaused();\r\n                    checkedNotPaused = true;\r\n                }\r\n\r\n                if (kind == UserBalanceOpKind.DEPOSIT_INTERNAL) {\r\n                    _depositToInternalBalance(asset, sender, recipient, amount);\r\n\r\n                    // Keep track of all ETH wrapped into WETH as part of a deposit.\r\n                    if (_isETH(asset)) {\r\n                        ethWrapped = ethWrapped.add(amount);\r\n                    }\r\n                } else {\r\n                    // Transfers don't support ETH.\r\n                    _require(!_isETH(asset), Errors.CANNOT_USE_ETH_SENTINEL);\r\n                    IERC20 token = _asIERC20(asset);\r\n\r\n                    if (kind == UserBalanceOpKind.TRANSFER_INTERNAL) {\r\n                        _transferInternalBalance(token, sender, recipient, amount);\r\n                    } else {\r\n                        // TRANSFER_EXTERNAL\r\n                        _transferToExternalBalance(token, sender, recipient, amount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Handle any remaining ETH.\r\n        _handleRemainingEth(ethWrapped);\r\n    }\r\n\r\n    function _depositToInternalBalance(\r\n        IAsset asset,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _increaseInternalBalance(recipient, _translateToIERC20(asset), amount);\r\n        _receiveAsset(asset, amount, sender, false);\r\n    }\r\n\r\n    function _withdrawFromInternalBalance(\r\n        IAsset asset,\r\n        address sender,\r\n        address payable recipient,\r\n        uint256 amount\r\n    ) private {\r\n        // A partial decrease of Internal Balance is disallowed: `sender` must have the full `amount`.\r\n        _decreaseInternalBalance(sender, _translateToIERC20(asset), amount, false);\r\n        _sendAsset(asset, amount, recipient, false);\r\n    }\r\n\r\n    function _transferInternalBalance(\r\n        IERC20 token,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        // A partial decrease of Internal Balance is disallowed: `sender` must have the full `amount`.\r\n        _decreaseInternalBalance(sender, token, amount, false);\r\n        _increaseInternalBalance(recipient, token, amount);\r\n    }\r\n\r\n    function _transferToExternalBalance(\r\n        IERC20 token,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        if (amount > 0) {\r\n            token.safeTransferFrom(sender, recipient, amount);\r\n            emit ExternalBalanceTransfer(token, sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Increases `account`'s Internal Balance for `token` by `amount`.\r\n     */\r\n    function _increaseInternalBalance(\r\n        address account,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal override {\r\n        uint256 currentBalance = _getInternalBalance(account, token);\r\n        uint256 newBalance = currentBalance.add(amount);\r\n        _setInternalBalance(account, token, newBalance, amount.toInt256());\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases `account`'s Internal Balance for `token` by `amount`. If `allowPartial` is true, this function\r\n     * doesn't revert if `account` doesn't have enough balance, and sets it to zero and returns the deducted amount\r\n     * instead.\r\n     */\r\n    function _decreaseInternalBalance(\r\n        address account,\r\n        IERC20 token,\r\n        uint256 amount,\r\n        bool allowPartial\r\n    ) internal override returns (uint256 deducted) {\r\n        uint256 currentBalance = _getInternalBalance(account, token);\r\n        _require(allowPartial || (currentBalance >= amount), Errors.INSUFFICIENT_INTERNAL_BALANCE);\r\n\r\n        deducted = Math.min(currentBalance, amount);\r\n        // By construction, `deducted` is lower or equal to `currentBalance`, so we don't need to use checked\r\n        // arithmetic.\r\n        uint256 newBalance = currentBalance - deducted;\r\n        _setInternalBalance(account, token, newBalance, -(deducted.toInt256()));\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `account`'s Internal Balance for `token` to `newBalance`.\r\n     *\r\n     * Emits an `InternalBalanceChanged` event. This event includes `delta`, which is the amount the balance increased\r\n     * (if positive) or decreased (if negative). To avoid reading the current balance in order to compute the delta,\r\n     * this function relies on the caller providing it directly.\r\n     */\r\n    function _setInternalBalance(\r\n        address account,\r\n        IERC20 token,\r\n        uint256 newBalance,\r\n        int256 delta\r\n    ) private {\r\n        _internalTokenBalance[account][token] = newBalance;\r\n        emit InternalBalanceChanged(account, token, delta);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `account`'s Internal Balance for `token`.\r\n     */\r\n    function _getInternalBalance(address account, IERC20 token) internal view returns (uint256) {\r\n        return _internalTokenBalance[account][token];\r\n    }\r\n\r\n    /**\r\n     * @dev Destructures a User Balance operation, validating that the contract caller is allowed to perform it.\r\n     */\r\n    function _validateUserBalanceOp(UserBalanceOp memory op, bool checkedCallerIsRelayer)\r\n        private\r\n        view\r\n        returns (\r\n            UserBalanceOpKind,\r\n            IAsset,\r\n            uint256,\r\n            address,\r\n            address payable,\r\n            bool\r\n        )\r\n    {\r\n        // The only argument we need to validate is `sender`, which can only be either the contract caller, or a\r\n        // relayer approved by `sender`.\r\n        address sender = op.sender;\r\n\r\n        if (sender != msg.sender) {\r\n            // We need to check both that the contract caller is a relayer, and that `sender` approved them.\r\n\r\n            // Because the relayer check is global (i.e. independent of `sender`), we cache that result and skip it for\r\n            // other operations in this same transaction (if any).\r\n            if (!checkedCallerIsRelayer) {\r\n                _authenticateCaller();\r\n                checkedCallerIsRelayer = true;\r\n            }\r\n\r\n            _require(_hasApprovedRelayer(sender, msg.sender), Errors.USER_DOESNT_ALLOW_RELAYER);\r\n        }\r\n\r\n        return (op.kind, op.asset, op.amount, sender, op.recipient, checkedCallerIsRelayer);\r\n    }\r\n}\r\n"
    },
    "contracts/vault/interfaces/IBasePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./IVault.sol\";\r\nimport \"./IPoolSwapStructs.sol\";\r\n\r\n/**\r\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\r\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\r\n * either IGeneralPool or IMinimalSwapInfoPool\r\n */\r\ninterface IBasePool is IPoolSwapStructs {\r\n    /**\r\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\r\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\r\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\r\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\r\n     *\r\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\r\n     *\r\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\r\n     * designated to receive any benefits (typically pool shares). `currentBalances` contains the total balances\r\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\r\n     *\r\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\r\n     * balance.\r\n     *\r\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\r\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\r\n     *\r\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\r\n     * state-changing operations, such as minting pool shares.\r\n     */\r\n    function onJoinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        bytes memory userData\r\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\r\n\r\n    /**\r\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\r\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\r\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\r\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\r\n     * `protocolSwapFeePercentage`.\r\n     *\r\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\r\n     *\r\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\r\n     * to which the Vault will send the proceeds. `currentBalances` contains the total token balances for each token\r\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\r\n     *\r\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\r\n     * balance.\r\n     *\r\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\r\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\r\n     *\r\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\r\n     * state-changing operations, such as burning pool shares.\r\n     */\r\n    function onExitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        bytes memory userData\r\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\r\n}\r\n"
    },
    "contracts/vault/AssetManagers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/math/Math.sol\";\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/helpers/InputHelpers.sol\";\r\nimport \"../lib/openzeppelin/IERC20.sol\";\r\nimport \"../lib/openzeppelin/SafeERC20.sol\";\r\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\r\n\r\nimport \"./UserBalance.sol\";\r\nimport \"./balances/BalanceAllocation.sol\";\r\nimport \"./balances/GeneralPoolsBalance.sol\";\r\nimport \"./balances/MinimalSwapInfoPoolsBalance.sol\";\r\nimport \"./balances/TwoTokenPoolsBalance.sol\";\r\n\r\nabstract contract AssetManagers is\r\n    ReentrancyGuard,\r\n    GeneralPoolsBalance,\r\n    MinimalSwapInfoPoolsBalance,\r\n    TwoTokenPoolsBalance\r\n{\r\n    using Math for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Stores the Asset Manager for each token of each Pool.\r\n    mapping(bytes32 => mapping(IERC20 => address)) internal _poolAssetManagers;\r\n\r\n    function managePoolBalance(PoolBalanceOp[] memory ops) external override nonReentrant whenNotPaused {\r\n        // This variable could be declared inside the loop, but that causes the compiler to allocate memory on each\r\n        // loop iteration, increasing gas costs.\r\n        PoolBalanceOp memory op;\r\n\r\n        for (uint256 i = 0; i < ops.length; ++i) {\r\n            // By indexing the array only once, we don't spend extra gas in the same bounds check.\r\n            op = ops[i];\r\n\r\n            bytes32 poolId = op.poolId;\r\n            _ensureRegisteredPool(poolId);\r\n\r\n            IERC20 token = op.token;\r\n            _require(_isTokenRegistered(poolId, token), Errors.TOKEN_NOT_REGISTERED);\r\n            _require(_poolAssetManagers[poolId][token] == msg.sender, Errors.SENDER_NOT_ASSET_MANAGER);\r\n\r\n            PoolBalanceOpKind kind = op.kind;\r\n            uint256 amount = op.amount;\r\n            (int256 cashDelta, int256 managedDelta) = _performPoolManagementOperation(kind, poolId, token, amount);\r\n\r\n            emit PoolBalanceManaged(poolId, msg.sender, token, cashDelta, managedDelta);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs the `kind` Asset Manager operation on a Pool.\r\n     *\r\n     * Withdrawals will transfer `amount` tokens to the caller, deposits will transfer `amount` tokens from the caller,\r\n     * and updates will set the managed balance to `amount`.\r\n     *\r\n     * Returns a tuple with the 'cash' and 'managed' balance deltas as a result of this call.\r\n     */\r\n    function _performPoolManagementOperation(\r\n        PoolBalanceOpKind kind,\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) private returns (int256, int256) {\r\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\r\n\r\n        if (kind == PoolBalanceOpKind.WITHDRAW) {\r\n            return _withdrawPoolBalance(poolId, specialization, token, amount);\r\n        } else if (kind == PoolBalanceOpKind.DEPOSIT) {\r\n            return _depositPoolBalance(poolId, specialization, token, amount);\r\n        } else {\r\n            // PoolBalanceOpKind.UPDATE\r\n            return _updateManagedBalance(poolId, specialization, token, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from a Pool's 'cash' to 'managed' balance, and transfers them to the caller.\r\n     *\r\n     * Returns the 'cash' and 'managed' balance deltas as a result of this call, which will be complementary.\r\n     */\r\n    function _withdrawPoolBalance(\r\n        bytes32 poolId,\r\n        PoolSpecialization specialization,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) private returns (int256 cashDelta, int256 managedDelta) {\r\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\r\n            _twoTokenPoolCashToManaged(poolId, token, amount);\r\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\r\n            _minimalSwapInfoPoolCashToManaged(poolId, token, amount);\r\n        } else {\r\n            // PoolSpecialization.GENERAL\r\n            _generalPoolCashToManaged(poolId, token, amount);\r\n        }\r\n\r\n        if (amount > 0) {\r\n            token.safeTransfer(msg.sender, amount);\r\n        }\r\n\r\n        // Since 'cash' and 'managed' are stored as uint112, `amount` is guaranteed to also fit in 112 bits. It will\r\n        // therefore always fit in a 256 bit integer.\r\n        cashDelta = int256(-amount);\r\n        managedDelta = int256(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from a Pool's 'managed' to 'cash' balance, and transfers them from the caller.\r\n     *\r\n     * Returns the 'cash' and 'managed' balance deltas as a result of this call, which will be complementary.\r\n     */\r\n    function _depositPoolBalance(\r\n        bytes32 poolId,\r\n        PoolSpecialization specialization,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) private returns (int256 cashDelta, int256 managedDelta) {\r\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\r\n            _twoTokenPoolManagedToCash(poolId, token, amount);\r\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\r\n            _minimalSwapInfoPoolManagedToCash(poolId, token, amount);\r\n        } else {\r\n            // PoolSpecialization.GENERAL\r\n            _generalPoolManagedToCash(poolId, token, amount);\r\n        }\r\n\r\n        if (amount > 0) {\r\n            token.safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n\r\n        // Since 'cash' and 'managed' are stored as uint112, `amount` is guaranteed to also fit in 112 bits. It will\r\n        // therefore always fit in a 256 bit integer.\r\n        cashDelta = int256(amount);\r\n        managedDelta = int256(-amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a Pool's 'managed' balance to `amount`.\r\n     *\r\n     * Returns the 'cash' and 'managed' balance deltas as a result of this call (the 'cash' delta will always be zero).\r\n     */\r\n    function _updateManagedBalance(\r\n        bytes32 poolId,\r\n        PoolSpecialization specialization,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) private returns (int256 cashDelta, int256 managedDelta) {\r\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\r\n            managedDelta = _setTwoTokenPoolManagedBalance(poolId, token, amount);\r\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\r\n            managedDelta = _setMinimalSwapInfoPoolManagedBalance(poolId, token, amount);\r\n        } else {\r\n            // PoolSpecialization.GENERAL\r\n            managedDelta = _setGeneralPoolManagedBalance(poolId, token, amount);\r\n        }\r\n\r\n        cashDelta = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `token` is registered for `poolId`.\r\n     */\r\n    function _isTokenRegistered(bytes32 poolId, IERC20 token) private view returns (bool) {\r\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\r\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\r\n            return _isTwoTokenPoolTokenRegistered(poolId, token);\r\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\r\n            return _isMinimalSwapInfoPoolTokenRegistered(poolId, token);\r\n        } else {\r\n            // PoolSpecialization.GENERAL\r\n            return _isGeneralPoolTokenRegistered(poolId, token);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/vault/PoolRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\r\n\r\nimport \"./VaultAuthorization.sol\";\r\n\r\n/**\r\n * @dev Maintains the Pool ID data structure, implements Pool ID creation and registration, and defines useful modifiers\r\n * and helper functions for ensuring correct behavior when working with Pools.\r\n */\r\nabstract contract PoolRegistry is ReentrancyGuard, VaultAuthorization {\r\n    // Each pool is represented by their unique Pool ID. We use `bytes32` for them, for lack of a way to define new\r\n    // types.\r\n    mapping(bytes32 => bool) private _isPoolRegistered;\r\n\r\n    // We keep an increasing nonce to make Pool IDs unique. It is interpreted as a `uint80`, but storing it as a\r\n    // `uint256` results in reduced bytecode on reads and writes due to the lack of masking.\r\n    uint256 private _nextPoolNonce;\r\n\r\n    /**\r\n     * @dev Reverts unless `poolId` corresponds to a registered Pool.\r\n     */\r\n    modifier withRegisteredPool(bytes32 poolId) {\r\n        _ensureRegisteredPool(poolId);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts unless `poolId` corresponds to a registered Pool, and the caller is the Pool's contract.\r\n     */\r\n    modifier onlyPool(bytes32 poolId) {\r\n        _ensurePoolIsSender(poolId);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts unless `poolId` corresponds to a registered Pool.\r\n     */\r\n    function _ensureRegisteredPool(bytes32 poolId) internal view {\r\n        _require(_isPoolRegistered[poolId], Errors.INVALID_POOL_ID);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts unless `poolId` corresponds to a registered Pool, and the caller is the Pool's contract.\r\n     */\r\n    function _ensurePoolIsSender(bytes32 poolId) private view {\r\n        _ensureRegisteredPool(poolId);\r\n        _require(msg.sender == _getPoolAddress(poolId), Errors.CALLER_NOT_POOL);\r\n    }\r\n\r\n    function registerPool(PoolSpecialization specialization)\r\n        external\r\n        override\r\n        nonReentrant\r\n        whenNotPaused\r\n        returns (bytes32)\r\n    {\r\n        // Each Pool is assigned a unique ID based on an incrementing nonce. This assumes there will never be more than\r\n        // 2**80 Pools, and the nonce will not overflow.\r\n\r\n        bytes32 poolId = _toPoolId(msg.sender, specialization, uint80(_nextPoolNonce));\r\n\r\n        _require(!_isPoolRegistered[poolId], Errors.INVALID_POOL_ID); // Should never happen as Pool IDs are unique.\r\n        _isPoolRegistered[poolId] = true;\r\n\r\n        _nextPoolNonce += 1;\r\n\r\n        // Note that msg.sender is the pool's contract\r\n        emit PoolRegistered(poolId, msg.sender, specialization);\r\n        return poolId;\r\n    }\r\n\r\n    function getPool(bytes32 poolId)\r\n        external\r\n        view\r\n        override\r\n        withRegisteredPool(poolId)\r\n        returns (address, PoolSpecialization)\r\n    {\r\n        return (_getPoolAddress(poolId), _getPoolSpecialization(poolId));\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a Pool ID.\r\n     *\r\n     * These are deterministically created by packing the Pool's contract address and its specialization setting into\r\n     * the ID. This saves gas by making this data easily retrievable from a Pool ID with no storage accesses.\r\n     *\r\n     * Since a single contract can register multiple Pools, a unique nonce must be provided to ensure Pool IDs are\r\n     * unique.\r\n     *\r\n     * Pool IDs have the following layout:\r\n     * | 20 bytes pool contract address | 2 bytes specialization setting | 10 bytes nonce |\r\n     * MSB                                                                              LSB\r\n     *\r\n     * 2 bytes for the specialization setting is a bit overkill: there only three of them, which means two bits would\r\n     * suffice. However, there's nothing else of interest to store in this extra space.\r\n     */\r\n    function _toPoolId(\r\n        address pool,\r\n        PoolSpecialization specialization,\r\n        uint80 nonce\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 serialized;\r\n\r\n        serialized |= bytes32(uint256(nonce));\r\n        serialized |= bytes32(uint256(specialization)) << (10 * 8);\r\n        serialized |= bytes32(uint256(pool)) << (12 * 8);\r\n\r\n        return serialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of a Pool's contract.\r\n     *\r\n     * Due to how Pool IDs are created, this is done with no storage accesses and costs little gas.\r\n     */\r\n    function _getPoolAddress(bytes32 poolId) internal pure returns (address) {\r\n        // 12 byte logical shift left to remove the nonce and specialization setting. We don't need to mask,\r\n        // since the logical shift already sets the upper bits to zero.\r\n        return address(uint256(poolId) >> (12 * 8));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the specialization setting of a Pool.\r\n     *\r\n     * Due to how Pool IDs are created, this is done with no storage accesses and costs little gas.\r\n     */\r\n    function _getPoolSpecialization(bytes32 poolId) internal pure returns (PoolSpecialization specialization) {\r\n        // 10 byte logical shift left to remove the nonce, followed by a 2 byte mask to remove the address.\r\n        uint256 value = uint256(poolId >> (10 * 8)) & (2**(2 * 8) - 1);\r\n\r\n        // Casting a value into an enum results in a runtime check that reverts unless the value is within the enum's\r\n        // range. Passing an invalid Pool ID to this function would then result in an obscure revert with no reason\r\n        // string: we instead perform the check ourselves to help in error diagnosis.\r\n\r\n        // There are three Pool specialization settings: general, minimal swap info and two tokens, which correspond to\r\n        // values 0, 1 and 2.\r\n        _require(value < 3, Errors.INVALID_POOL_ID);\r\n\r\n        // Because we have checked that `value` is within the enum range, we can use assembly to skip the runtime check.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            specialization := value\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/vault/balances/GeneralPoolsBalance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../../lib/helpers/BalancerErrors.sol\";\r\nimport \"../../lib/openzeppelin/EnumerableMap.sol\";\r\nimport \"../../lib/openzeppelin/IERC20.sol\";\r\n\r\nimport \"./BalanceAllocation.sol\";\r\n\r\nabstract contract GeneralPoolsBalance {\r\n    using BalanceAllocation for bytes32;\r\n    using EnumerableMap for EnumerableMap.IERC20ToBytes32Map;\r\n\r\n    // Data for Pools with the General specialization setting\r\n    //\r\n    // These Pools use the IGeneralPool interface, which means the Vault must query the balance for *all* of their\r\n    // tokens in every swap. If we kept a mapping of token to balance plus a set (array) of tokens, it'd be very gas\r\n    // intensive to read all token addresses just to then do a lookup on the balance mapping.\r\n    //\r\n    // Instead, we use our customized EnumerableMap, which lets us read the N balances in N+1 storage accesses (one for\r\n    // each token in the Pool), access the index of any 'token in' a single read (required for the IGeneralPool call),\r\n    // and update an entry's value given its index.\r\n\r\n    // Map of token -> balance pairs for each Pool with this specialization. Many functions rely on storage pointers to\r\n    // a Pool's EnumerableMap to save gas when computing storage slots.\r\n    mapping(bytes32 => EnumerableMap.IERC20ToBytes32Map) internal _generalPoolsBalances;\r\n\r\n    /**\r\n     * @dev Registers a list of tokens in a General Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokens` must not be registered in the Pool\r\n     * - `tokens` must not contain duplicates\r\n     */\r\n    function _registerGeneralPoolTokens(bytes32 poolId, IERC20[] memory tokens) internal {\r\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\r\n\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            // EnumerableMaps require an explicit initial value when creating a key-value pair: we use zero, the same\r\n            // value that is found in uninitialized storage, which corresponds to an empty balance.\r\n            bool added = poolBalances.set(tokens[i], 0);\r\n            _require(added, Errors.TOKEN_ALREADY_REGISTERED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Deregisters a list of tokens in a General Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokens` must be registered in the Pool\r\n     * - `tokens` must have zero balance in the Vault\r\n     * - `tokens` must not contain duplicates\r\n     */\r\n    function _deregisterGeneralPoolTokens(bytes32 poolId, IERC20[] memory tokens) internal {\r\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\r\n\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            IERC20 token = tokens[i];\r\n            bytes32 currentBalance = _getGeneralPoolBalance(poolBalances, token);\r\n            _require(currentBalance.isZero(), Errors.NONZERO_TOKEN_BALANCE);\r\n\r\n            // We don't need to check remove's return value, since _getGeneralPoolBalance already checks that the token\r\n            // was registered.\r\n            poolBalances.remove(token);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the balances of a General Pool's tokens to `balances`.\r\n     *\r\n     * WARNING: this assumes `balances` has the same length and order as the Pool's tokens.\r\n     */\r\n    function _setGeneralPoolBalances(bytes32 poolId, bytes32[] memory balances) internal {\r\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\r\n\r\n        for (uint256 i = 0; i < balances.length; ++i) {\r\n            // Since we assume all balances are properly ordered, we can simply use `unchecked_setAt` to avoid one less\r\n            // storage read per token.\r\n            poolBalances.unchecked_setAt(i, balances[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transforms `amount` of `token`'s balance in a General Pool from cash into managed.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the General specialization setting, and that `token` is\r\n     * registered for that Pool.\r\n     */\r\n    function _generalPoolCashToManaged(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal {\r\n        _updateGeneralPoolBalance(poolId, token, BalanceAllocation.cashToManaged, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transforms `amount` of `token`'s balance in a General Pool from managed into cash.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the General specialization setting, and that `token` is\r\n     * registered for that Pool.\r\n     */\r\n    function _generalPoolManagedToCash(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal {\r\n        _updateGeneralPoolBalance(poolId, token, BalanceAllocation.managedToCash, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `token`'s managed balance in a General Pool to `amount`.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the General specialization setting, and that `token` is\r\n     * registered for that Pool.\r\n     *\r\n     * Returns the managed balance delta as a result of this call.\r\n     */\r\n    function _setGeneralPoolManagedBalance(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal returns (int256) {\r\n        return _updateGeneralPoolBalance(poolId, token, BalanceAllocation.setManaged, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `token`'s balance in a General Pool to the result of the `mutation` function when called with the\r\n     * current balance and `amount`.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the General specialization setting, and that `token` is\r\n     * registered for that Pool.\r\n     *\r\n     * Returns the managed balance delta as a result of this call.\r\n     */\r\n    function _updateGeneralPoolBalance(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        function(bytes32, uint256) returns (bytes32) mutation,\r\n        uint256 amount\r\n    ) private returns (int256) {\r\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\r\n        bytes32 currentBalance = _getGeneralPoolBalance(poolBalances, token);\r\n\r\n        bytes32 newBalance = mutation(currentBalance, amount);\r\n        poolBalances.set(token, newBalance);\r\n\r\n        return newBalance.managedDelta(currentBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array with all the tokens and balances in a General Pool. The order may change when tokens are\r\n     * registered or deregistered.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\r\n     */\r\n    function _getGeneralPoolTokens(bytes32 poolId)\r\n        internal\r\n        view\r\n        returns (IERC20[] memory tokens, bytes32[] memory balances)\r\n    {\r\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\r\n        tokens = new IERC20[](poolBalances.length());\r\n        balances = new bytes32[](tokens.length);\r\n\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            // Because the iteration is bounded by `tokens.length`, which matches the EnumerableMap's length, we can use\r\n            // `unchecked_at` as we know `i` is a valid token index, saving storage reads.\r\n            (tokens[i], balances[i]) = poolBalances.unchecked_at(i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the balance of a token in a General Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `token` must be registered in the Pool\r\n     */\r\n    function _getGeneralPoolBalance(bytes32 poolId, IERC20 token) internal view returns (bytes32) {\r\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\r\n        return _getGeneralPoolBalance(poolBalances, token);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as `_getGeneralPoolBalance` but using a Pool's storage pointer, which saves gas in repeated reads and\r\n     * writes.\r\n     */\r\n    function _getGeneralPoolBalance(EnumerableMap.IERC20ToBytes32Map storage poolBalances, IERC20 token)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return poolBalances.get(token, Errors.TOKEN_NOT_REGISTERED);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `token` is registered in a General Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\r\n     */\r\n    function _isGeneralPoolTokenRegistered(bytes32 poolId, IERC20 token) internal view returns (bool) {\r\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\r\n        return poolBalances.contains(token);\r\n    }\r\n}\r\n"
    },
    "contracts/vault/balances/MinimalSwapInfoPoolsBalance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../../lib/helpers/BalancerErrors.sol\";\r\nimport \"../../lib/openzeppelin/EnumerableSet.sol\";\r\nimport \"../../lib/openzeppelin/IERC20.sol\";\r\n\r\nimport \"./BalanceAllocation.sol\";\r\nimport \"../PoolRegistry.sol\";\r\n\r\nabstract contract MinimalSwapInfoPoolsBalance is PoolRegistry {\r\n    using BalanceAllocation for bytes32;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    // Data for Pools with the Minimal Swap Info specialization setting\r\n    //\r\n    // These Pools use the IMinimalSwapInfoPool interface, and so the Vault must read the balance of the two tokens\r\n    // in the swap. The best solution is to use a mapping from token to balance, which lets us read or write any token's\r\n    // balance in a single storage access.\r\n    //\r\n    // We also keep a set of registered tokens. Because tokens with non-zero balance are by definition registered, in\r\n    // some balance getters we skip checking for token registration if a non-zero balance is found, saving gas by\r\n    // performing a single read instead of two.\r\n\r\n    mapping(bytes32 => mapping(IERC20 => bytes32)) internal _minimalSwapInfoPoolsBalances;\r\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _minimalSwapInfoPoolsTokens;\r\n\r\n    /**\r\n     * @dev Registers a list of tokens in a Minimal Swap Info Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the Minimal Swap Info specialization setting.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokens` must not be registered in the Pool\r\n     * - `tokens` must not contain duplicates\r\n     */\r\n    function _registerMinimalSwapInfoPoolTokens(bytes32 poolId, IERC20[] memory tokens) internal {\r\n        EnumerableSet.AddressSet storage poolTokens = _minimalSwapInfoPoolsTokens[poolId];\r\n\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            bool added = poolTokens.add(address(tokens[i]));\r\n            _require(added, Errors.TOKEN_ALREADY_REGISTERED);\r\n            // Note that we don't initialize the balance mapping: the default value of zero corresponds to an empty\r\n            // balance.\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Deregisters a list of tokens in a Minimal Swap Info Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the Minimal Swap Info specialization setting.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokens` must be registered in the Pool\r\n     * - `tokens` must have zero balance in the Vault\r\n     * - `tokens` must not contain duplicates\r\n     */\r\n    function _deregisterMinimalSwapInfoPoolTokens(bytes32 poolId, IERC20[] memory tokens) internal {\r\n        EnumerableSet.AddressSet storage poolTokens = _minimalSwapInfoPoolsTokens[poolId];\r\n\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            IERC20 token = tokens[i];\r\n            _require(_minimalSwapInfoPoolsBalances[poolId][token].isZero(), Errors.NONZERO_TOKEN_BALANCE);\r\n\r\n            // For consistency with other Pool specialization settings, we explicitly reset the balance (which may have\r\n            // a non-zero last change block).\r\n            delete _minimalSwapInfoPoolsBalances[poolId][token];\r\n\r\n            bool removed = poolTokens.remove(address(token));\r\n            _require(removed, Errors.TOKEN_NOT_REGISTERED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the balances of a Minimal Swap Info Pool's tokens to `balances`.\r\n     *\r\n     * WARNING: this assumes `balances` has the same length and order as the Pool's tokens.\r\n     */\r\n    function _setMinimalSwapInfoPoolBalances(\r\n        bytes32 poolId,\r\n        IERC20[] memory tokens,\r\n        bytes32[] memory balances\r\n    ) internal {\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            _minimalSwapInfoPoolsBalances[poolId][tokens[i]] = balances[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transforms `amount` of `token`'s balance in a Minimal Swap Info Pool from cash into managed.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the Minimal Swap Info specialization setting, and that\r\n     * `token` is registered for that Pool.\r\n     */\r\n    function _minimalSwapInfoPoolCashToManaged(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal {\r\n        _updateMinimalSwapInfoPoolBalance(poolId, token, BalanceAllocation.cashToManaged, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transforms `amount` of `token`'s balance in a Minimal Swap Info Pool from managed into cash.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the Minimal Swap Info specialization setting, and that\r\n     * `token` is registered for that Pool.\r\n     */\r\n    function _minimalSwapInfoPoolManagedToCash(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal {\r\n        _updateMinimalSwapInfoPoolBalance(poolId, token, BalanceAllocation.managedToCash, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `token`'s managed balance in a Minimal Swap Info Pool to `amount`.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the Minimal Swap Info specialization setting, and that\r\n     * `token` is registered for that Pool.\r\n     *\r\n     * Returns the managed balance delta as a result of this call.\r\n     */\r\n    function _setMinimalSwapInfoPoolManagedBalance(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal returns (int256) {\r\n        return _updateMinimalSwapInfoPoolBalance(poolId, token, BalanceAllocation.setManaged, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `token`'s balance in a Minimal Swap Info Pool to the result of the `mutation` function when called with\r\n     * the current balance and `amount`.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the Minimal Swap Info specialization setting, and that\r\n     * `token` is registered for that Pool.\r\n     *\r\n     * Returns the managed balance delta as a result of this call.\r\n     */\r\n    function _updateMinimalSwapInfoPoolBalance(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        function(bytes32, uint256) returns (bytes32) mutation,\r\n        uint256 amount\r\n    ) internal returns (int256) {\r\n        bytes32 currentBalance = _getMinimalSwapInfoPoolBalance(poolId, token);\r\n\r\n        bytes32 newBalance = mutation(currentBalance, amount);\r\n        _minimalSwapInfoPoolsBalances[poolId][token] = newBalance;\r\n\r\n        return newBalance.managedDelta(currentBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array with all the tokens and balances in a Minimal Swap Info Pool. The order may change when\r\n     * tokens are registered or deregistered.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the Minimal Swap Info specialization setting.\r\n     */\r\n    function _getMinimalSwapInfoPoolTokens(bytes32 poolId)\r\n        internal\r\n        view\r\n        returns (IERC20[] memory tokens, bytes32[] memory balances)\r\n    {\r\n        EnumerableSet.AddressSet storage poolTokens = _minimalSwapInfoPoolsTokens[poolId];\r\n        tokens = new IERC20[](poolTokens.length());\r\n        balances = new bytes32[](tokens.length);\r\n\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            // Because the iteration is bounded by `tokens.length`, which matches the EnumerableSet's length, we can use\r\n            // `unchecked_at` as we know `i` is a valid token index, saving storage reads.\r\n            IERC20 token = IERC20(poolTokens.unchecked_at(i));\r\n            tokens[i] = token;\r\n            balances[i] = _minimalSwapInfoPoolsBalances[poolId][token];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the balance of a token in a Minimal Swap Info Pool.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `poolId` must be a Minimal Swap Info Pool\r\n     * - `token` must be registered in the Pool\r\n     */\r\n    function _getMinimalSwapInfoPoolBalance(bytes32 poolId, IERC20 token) internal view returns (bytes32) {\r\n        bytes32 balance = _minimalSwapInfoPoolsBalances[poolId][token];\r\n\r\n        // A non-zero balance guarantees that the token is registered. If zero, we manually check if the token is\r\n        // registered in the Pool. Token registration implies that the Pool is registered as well, which lets us save\r\n        // gas by not performing the check.\r\n        bool tokenRegistered = balance.isNotZero() || _minimalSwapInfoPoolsTokens[poolId].contains(address(token));\r\n\r\n        if (!tokenRegistered) {\r\n            // The token might not be registered because the Pool itself is not registered. We check this to provide a\r\n            // more accurate revert reason.\r\n            _ensureRegisteredPool(poolId);\r\n            _revert(Errors.TOKEN_NOT_REGISTERED);\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `token` is registered in a Minimal Swap Info Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the Minimal Swap Info specialization setting.\r\n     */\r\n    function _isMinimalSwapInfoPoolTokenRegistered(bytes32 poolId, IERC20 token) internal view returns (bool) {\r\n        EnumerableSet.AddressSet storage poolTokens = _minimalSwapInfoPoolsTokens[poolId];\r\n        return poolTokens.contains(address(token));\r\n    }\r\n}\r\n"
    },
    "contracts/vault/balances/TwoTokenPoolsBalance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../../lib/helpers/BalancerErrors.sol\";\r\nimport \"../../lib/openzeppelin/IERC20.sol\";\r\n\r\nimport \"./BalanceAllocation.sol\";\r\nimport \"../PoolRegistry.sol\";\r\n\r\nabstract contract TwoTokenPoolsBalance is PoolRegistry {\r\n    using BalanceAllocation for bytes32;\r\n\r\n    // Data for Pools with the Two Token specialization setting\r\n    //\r\n    // These are similar to the Minimal Swap Info Pool case (because the Pool only has two tokens, and therefore there\r\n    // are only two balances to read), but there's a key difference in how data is stored. Keeping a set makes little\r\n    // sense, as it will only ever hold two tokens, so we can just store those two directly.\r\n    //\r\n    // The gas savings associated with using these Pools come from how token balances are stored: cash amounts for token\r\n    // A and token B are packed together, as are managed amounts. Because only cash changes in a swap, there's no need\r\n    // to write to this second storage slot. A single last change block number for both tokens is stored with the packed\r\n    // cash fields.\r\n\r\n    struct TwoTokenPoolBalances {\r\n        bytes32 sharedCash;\r\n        bytes32 sharedManaged;\r\n    }\r\n\r\n    // We could just keep a mapping from Pool ID to TwoTokenSharedBalances, but there's an issue: we wouldn't know to\r\n    // which tokens those balances correspond. This would mean having to also check which are registered with the Pool.\r\n    //\r\n    // What we do instead to save those storage reads is keep a nested mapping from the token pair hash to the balances\r\n    // struct. The Pool only has two tokens, so only a single entry of this mapping is set (the one that corresponds to\r\n    // that pair's hash).\r\n    //\r\n    // This has the trade-off of making Vault code that interacts with these Pools cumbersome: both balances must be\r\n    // accessed at the same time by using both token addresses, and some logic is needed to determine how the pair hash\r\n    // is computed. We do this by sorting the tokens, calling the token with the lowest numerical address value token A,\r\n    // and the other one token B. In functions where the token arguments could be either A or B, we use X and Y instead.\r\n    //\r\n    // If users query a token pair containing an unregistered token, the Pool will generate a hash for a mapping entry\r\n    // that was not set, and return zero balances. Non-zero balances are only possible if both tokens in the pair\r\n    // are registered with the Pool, which means we don't have to check the TwoTokenPoolTokens struct, and can save\r\n    // storage reads.\r\n\r\n    struct TwoTokenPoolTokens {\r\n        IERC20 tokenA;\r\n        IERC20 tokenB;\r\n        mapping(bytes32 => TwoTokenPoolBalances) balances;\r\n    }\r\n\r\n    mapping(bytes32 => TwoTokenPoolTokens) private _twoTokenPoolTokens;\r\n\r\n    /**\r\n     * @dev Registers tokens in a Two Token Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the Two Token specialization setting.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenX` and `tokenY` must not be the same\r\n     * - The tokens must be ordered: tokenX < tokenY\r\n     */\r\n    function _registerTwoTokenPoolTokens(\r\n        bytes32 poolId,\r\n        IERC20 tokenX,\r\n        IERC20 tokenY\r\n    ) internal {\r\n        // Not technically true since we didn't register yet, but this is consistent with the error messages of other\r\n        // specialization settings.\r\n        _require(tokenX != tokenY, Errors.TOKEN_ALREADY_REGISTERED);\r\n\r\n        _require(tokenX < tokenY, Errors.UNSORTED_TOKENS);\r\n\r\n        // A Two Token Pool with no registered tokens is identified by having zero addresses for tokens A and B.\r\n        TwoTokenPoolTokens storage poolTokens = _twoTokenPoolTokens[poolId];\r\n        _require(poolTokens.tokenA == IERC20(0) && poolTokens.tokenB == IERC20(0), Errors.TOKENS_ALREADY_SET);\r\n\r\n        // Since tokenX < tokenY, tokenX is A and tokenY is B\r\n        poolTokens.tokenA = tokenX;\r\n        poolTokens.tokenB = tokenY;\r\n\r\n        // Note that we don't initialize the balance mapping: the default value of zero corresponds to an empty\r\n        // balance.\r\n    }\r\n\r\n    /**\r\n     * @dev Deregisters tokens in a Two Token Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the Two Token specialization setting.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenX` and `tokenY` must be registered in the Pool\r\n     * - both tokens must have zero balance in the Vault\r\n     */\r\n    function _deregisterTwoTokenPoolTokens(\r\n        bytes32 poolId,\r\n        IERC20 tokenX,\r\n        IERC20 tokenY\r\n    ) internal {\r\n        (\r\n            bytes32 balanceA,\r\n            bytes32 balanceB,\r\n            TwoTokenPoolBalances storage poolBalances\r\n        ) = _getTwoTokenPoolSharedBalances(poolId, tokenX, tokenY);\r\n\r\n        _require(balanceA.isZero() && balanceB.isZero(), Errors.NONZERO_TOKEN_BALANCE);\r\n\r\n        delete _twoTokenPoolTokens[poolId];\r\n\r\n        // For consistency with other Pool specialization settings, we explicitly reset the packed cash field (which may\r\n        // have a non-zero last change block).\r\n        delete poolBalances.sharedCash;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the cash balances of a Two Token Pool's tokens.\r\n     *\r\n     * WARNING: this assumes `tokenA` and `tokenB` are the Pool's two registered tokens, and are in the correct order.\r\n     */\r\n    function _setTwoTokenPoolCashBalances(\r\n        bytes32 poolId,\r\n        IERC20 tokenA,\r\n        bytes32 balanceA,\r\n        IERC20 tokenB,\r\n        bytes32 balanceB\r\n    ) internal {\r\n        bytes32 pairHash = _getTwoTokenPairHash(tokenA, tokenB);\r\n        TwoTokenPoolBalances storage poolBalances = _twoTokenPoolTokens[poolId].balances[pairHash];\r\n        poolBalances.sharedCash = BalanceAllocation.toSharedCash(balanceA, balanceB);\r\n    }\r\n\r\n    /**\r\n     * @dev Transforms `amount` of `token`'s balance in a Two Token Pool from cash into managed.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the Two Token specialization setting, and that `token` is\r\n     * registered for that Pool.\r\n     */\r\n    function _twoTokenPoolCashToManaged(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal {\r\n        _updateTwoTokenPoolSharedBalance(poolId, token, BalanceAllocation.cashToManaged, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transforms `amount` of `token`'s balance in a Two Token Pool from managed into cash.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the Two Token specialization setting, and that `token` is\r\n     * registered for that Pool.\r\n     */\r\n    function _twoTokenPoolManagedToCash(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal {\r\n        _updateTwoTokenPoolSharedBalance(poolId, token, BalanceAllocation.managedToCash, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `token`'s managed balance in a Two Token Pool to `amount`.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the Two Token specialization setting, and that `token` is\r\n     * registered for that Pool.\r\n     *\r\n     * Returns the managed balance delta as a result of this call.\r\n     */\r\n    function _setTwoTokenPoolManagedBalance(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal returns (int256) {\r\n        return _updateTwoTokenPoolSharedBalance(poolId, token, BalanceAllocation.setManaged, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `token`'s balance in a Two Token Pool to the result of the `mutation` function when called with\r\n     * the current balance and `amount`.\r\n     *\r\n     * This function assumes `poolId` exists, corresponds to the Two Token specialization setting, and that `token` is\r\n     * registered for that Pool.\r\n     *\r\n     * Returns the managed balance delta as a result of this call.\r\n     */\r\n    function _updateTwoTokenPoolSharedBalance(\r\n        bytes32 poolId,\r\n        IERC20 token,\r\n        function(bytes32, uint256) returns (bytes32) mutation,\r\n        uint256 amount\r\n    ) private returns (int256) {\r\n        (\r\n            TwoTokenPoolBalances storage balances,\r\n            IERC20 tokenA,\r\n            bytes32 balanceA,\r\n            ,\r\n            bytes32 balanceB\r\n        ) = _getTwoTokenPoolBalances(poolId);\r\n\r\n        int256 delta;\r\n        if (token == tokenA) {\r\n            bytes32 newBalance = mutation(balanceA, amount);\r\n            delta = newBalance.managedDelta(balanceA);\r\n            balanceA = newBalance;\r\n        } else {\r\n            // token == tokenB\r\n            bytes32 newBalance = mutation(balanceB, amount);\r\n            delta = newBalance.managedDelta(balanceB);\r\n            balanceB = newBalance;\r\n        }\r\n\r\n        balances.sharedCash = BalanceAllocation.toSharedCash(balanceA, balanceB);\r\n        balances.sharedManaged = BalanceAllocation.toSharedManaged(balanceA, balanceB);\r\n\r\n        return delta;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns an array with all the tokens and balances in a Two Token Pool. The order may change when\r\n     * tokens are registered or deregistered.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the Two Token specialization setting.\r\n     */\r\n    function _getTwoTokenPoolTokens(bytes32 poolId)\r\n        internal\r\n        view\r\n        returns (IERC20[] memory tokens, bytes32[] memory balances)\r\n    {\r\n        (, IERC20 tokenA, bytes32 balanceA, IERC20 tokenB, bytes32 balanceB) = _getTwoTokenPoolBalances(poolId);\r\n\r\n        // Both tokens will either be zero (if unregistered) or non-zero (if registered), but we keep the full check for\r\n        // clarity.\r\n        if (tokenA == IERC20(0) || tokenB == IERC20(0)) {\r\n            return (new IERC20[](0), new bytes32[](0));\r\n        }\r\n\r\n        // Note that functions relying on this getter expect tokens to be properly ordered, so we use the (A, B)\r\n        // ordering.\r\n\r\n        tokens = new IERC20[](2);\r\n        tokens[0] = tokenA;\r\n        tokens[1] = tokenB;\r\n\r\n        balances = new bytes32[](2);\r\n        balances[0] = balanceA;\r\n        balances[1] = balanceB;\r\n    }\r\n\r\n    /**\r\n     * @dev Same as `_getTwoTokenPoolTokens`, except it returns the two tokens and balances directly instead of using\r\n     * an array, as well as a storage pointer to the `TwoTokenPoolBalances` struct, which can be used to update it\r\n     * without having to recompute the pair hash and storage slot.\r\n     */\r\n    function _getTwoTokenPoolBalances(bytes32 poolId)\r\n        private\r\n        view\r\n        returns (\r\n            TwoTokenPoolBalances storage poolBalances,\r\n            IERC20 tokenA,\r\n            bytes32 balanceA,\r\n            IERC20 tokenB,\r\n            bytes32 balanceB\r\n        )\r\n    {\r\n        TwoTokenPoolTokens storage poolTokens = _twoTokenPoolTokens[poolId];\r\n        tokenA = poolTokens.tokenA;\r\n        tokenB = poolTokens.tokenB;\r\n\r\n        bytes32 pairHash = _getTwoTokenPairHash(tokenA, tokenB);\r\n        poolBalances = poolTokens.balances[pairHash];\r\n\r\n        bytes32 sharedCash = poolBalances.sharedCash;\r\n        bytes32 sharedManaged = poolBalances.sharedManaged;\r\n\r\n        balanceA = BalanceAllocation.fromSharedToBalanceA(sharedCash, sharedManaged);\r\n        balanceB = BalanceAllocation.fromSharedToBalanceB(sharedCash, sharedManaged);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the balance of a token in a Two Token Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\r\n     *\r\n     * This function is convenient but not particularly gas efficient, and should be avoided during gas-sensitive\r\n     * operations, such as swaps. For those, _getTwoTokenPoolSharedBalances provides a more flexible interface.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `token` must be registered in the Pool\r\n     */\r\n    function _getTwoTokenPoolBalance(bytes32 poolId, IERC20 token) internal view returns (bytes32) {\r\n        // We can't just read the balance of token, because we need to know the full pair in order to compute the pair\r\n        // hash and access the balance mapping. We therefore rely on `_getTwoTokenPoolBalances`.\r\n        (, IERC20 tokenA, bytes32 balanceA, IERC20 tokenB, bytes32 balanceB) = _getTwoTokenPoolBalances(poolId);\r\n\r\n        if (token == tokenA) {\r\n            return balanceA;\r\n        } else if (token == tokenB) {\r\n            return balanceB;\r\n        } else {\r\n            _revert(Errors.TOKEN_NOT_REGISTERED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the balance of the two tokens in a Two Token Pool.\r\n     *\r\n     * The returned balances are those of token A and token B, where token A is the lowest of token X and token Y, and\r\n     * token B the other.\r\n     *\r\n     * This function also returns a storage pointer to the TwoTokenPoolBalances struct associated with the token pair,\r\n     * which can be used to update it without having to recompute the pair hash and storage slot.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `poolId` must be a Minimal Swap Info Pool\r\n     * - `tokenX` and `tokenY` must be registered in the Pool\r\n     */\r\n    function _getTwoTokenPoolSharedBalances(\r\n        bytes32 poolId,\r\n        IERC20 tokenX,\r\n        IERC20 tokenY\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            bytes32 balanceA,\r\n            bytes32 balanceB,\r\n            TwoTokenPoolBalances storage poolBalances\r\n        )\r\n    {\r\n        (IERC20 tokenA, IERC20 tokenB) = _sortTwoTokens(tokenX, tokenY);\r\n        bytes32 pairHash = _getTwoTokenPairHash(tokenA, tokenB);\r\n\r\n        poolBalances = _twoTokenPoolTokens[poolId].balances[pairHash];\r\n\r\n        // Because we're reading balances using the pair hash, if either token X or token Y is not registered then\r\n        // *both* balance entries will be zero.\r\n        bytes32 sharedCash = poolBalances.sharedCash;\r\n        bytes32 sharedManaged = poolBalances.sharedManaged;\r\n\r\n        // A non-zero balance guarantees that both tokens are registered. If zero, we manually check whether each\r\n        // token is registered in the Pool. Token registration implies that the Pool is registered as well, which\r\n        // lets us save gas by not performing the check.\r\n        bool tokensRegistered = sharedCash.isNotZero() ||\r\n            sharedManaged.isNotZero() ||\r\n            (_isTwoTokenPoolTokenRegistered(poolId, tokenA) && _isTwoTokenPoolTokenRegistered(poolId, tokenB));\r\n\r\n        if (!tokensRegistered) {\r\n            // The tokens might not be registered because the Pool itself is not registered. We check this to provide a\r\n            // more accurate revert reason.\r\n            _ensureRegisteredPool(poolId);\r\n            _revert(Errors.TOKEN_NOT_REGISTERED);\r\n        }\r\n\r\n        balanceA = BalanceAllocation.fromSharedToBalanceA(sharedCash, sharedManaged);\r\n        balanceB = BalanceAllocation.fromSharedToBalanceB(sharedCash, sharedManaged);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `token` is registered in a Two Token Pool.\r\n     *\r\n     * This function assumes `poolId` exists and corresponds to the Two Token specialization setting.\r\n     */\r\n    function _isTwoTokenPoolTokenRegistered(bytes32 poolId, IERC20 token) internal view returns (bool) {\r\n        TwoTokenPoolTokens storage poolTokens = _twoTokenPoolTokens[poolId];\r\n\r\n        // The zero address can never be a registered token.\r\n        return (token == poolTokens.tokenA || token == poolTokens.tokenB) && token != IERC20(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the hash associated with a given token pair.\r\n     */\r\n    function _getTwoTokenPairHash(IERC20 tokenA, IERC20 tokenB) private pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(tokenA, tokenB));\r\n    }\r\n\r\n    /**\r\n     * @dev Sorts two tokens in ascending order, returning them as a (tokenA, tokenB) tuple.\r\n     */\r\n    function _sortTwoTokens(IERC20 tokenX, IERC20 tokenY) private pure returns (IERC20, IERC20) {\r\n        return tokenX < tokenY ? (tokenX, tokenY) : (tokenY, tokenX);\r\n    }\r\n}\r\n"
    },
    "contracts/vault/AssetTransfersHandler.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../lib/math/Math.sol\";\r\nimport \"../lib/helpers/BalancerErrors.sol\";\r\nimport \"../lib/openzeppelin/IERC20.sol\";\r\nimport \"../lib/helpers/AssetHelpers.sol\";\r\nimport \"../lib/openzeppelin/SafeERC20.sol\";\r\nimport \"../lib/openzeppelin/Address.sol\";\r\n\r\nimport \"./interfaces/IWETH.sol\";\r\nimport \"./interfaces/IAsset.sol\";\r\nimport \"./interfaces/IVault.sol\";\r\n\r\nabstract contract AssetTransfersHandler is AssetHelpers {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address payable;\r\n\r\n    /**\r\n     * @dev Receives `amount` of `asset` from `sender`. If `fromInternalBalance` is true, it first withdraws as much\r\n     * as possible from Internal Balance, then transfers any remaining amount.\r\n     *\r\n     * If `asset` is ETH, `fromInternalBalance` must be false (as ETH cannot be held as internal balance), and the funds\r\n     * will be wrapped into WETH.\r\n     *\r\n     * WARNING: this function does not check that the contract caller has actually supplied any ETH - it is up to the\r\n     * caller of this function to check that this is true to prevent the Vault from using its own ETH (though the Vault\r\n     * typically doesn't hold any).\r\n     */\r\n    function _receiveAsset(\r\n        IAsset asset,\r\n        uint256 amount,\r\n        address sender,\r\n        bool fromInternalBalance\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (_isETH(asset)) {\r\n            _require(!fromInternalBalance, Errors.INVALID_ETH_INTERNAL_BALANCE);\r\n\r\n            // The ETH amount to receive is deposited into the WETH contract, which will in turn mint WETH for\r\n            // the Vault at a 1:1 ratio.\r\n\r\n            // A check for this condition is also introduced by the compiler, but this one provides a revert reason.\r\n            // Note we're checking for the Vault's total balance, *not* ETH sent in this transaction.\r\n            _require(address(this).balance >= amount, Errors.INSUFFICIENT_ETH);\r\n            _WETH().deposit{ value: amount }();\r\n        } else {\r\n            IERC20 token = _asIERC20(asset);\r\n\r\n            if (fromInternalBalance) {\r\n                // We take as many tokens from Internal Balance as possible: any remaining amounts will be transferred.\r\n                uint256 deductedBalance = _decreaseInternalBalance(sender, token, amount, true);\r\n                // Because `deductedBalance` will be always the lesser of the current internal balance\r\n                // and the amount to decrease, it is safe to perform unchecked arithmetic.\r\n                amount -= deductedBalance;\r\n            }\r\n\r\n            if (amount > 0) {\r\n                token.safeTransferFrom(sender, address(this), amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sends `amount` of `asset` to `recipient`. If `toInternalBalance` is true, the asset is deposited as Internal\r\n     * Balance instead of being transferred.\r\n     *\r\n     * If `asset` is ETH, `toInternalBalance` must be false (as ETH cannot be held as internal balance), and the funds\r\n     * are instead sent directly after unwrapping WETH.\r\n     */\r\n    function _sendAsset(\r\n        IAsset asset,\r\n        uint256 amount,\r\n        address payable recipient,\r\n        bool toInternalBalance\r\n    ) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (_isETH(asset)) {\r\n            // Sending ETH is not as involved as receiving it: the only special behavior is it cannot be\r\n            // deposited to Internal Balance.\r\n            _require(!toInternalBalance, Errors.INVALID_ETH_INTERNAL_BALANCE);\r\n\r\n            // First, the Vault withdraws deposited ETH from the WETH contract, by burning the same amount of WETH\r\n            // from the Vault. This receipt will be handled by the Vault's `receive`.\r\n            _WETH().withdraw(amount);\r\n\r\n            // Then, the withdrawn ETH is sent to the recipient.\r\n            recipient.sendValue(amount);\r\n        } else {\r\n            IERC20 token = _asIERC20(asset);\r\n            if (toInternalBalance) {\r\n                _increaseInternalBalance(recipient, token, amount);\r\n            } else {\r\n                token.safeTransfer(recipient, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns excess ETH back to the contract caller, assuming `amountUsed` has been spent. Reverts\r\n     * if the caller sent less ETH than `amountUsed`.\r\n     *\r\n     * Because the caller might not know exactly how much ETH a Vault action will require, they may send extra.\r\n     * Note that this excess value is returned *to the contract caller* (msg.sender). If caller and e.g. swap sender are\r\n     * not the same (because the caller is a relayer for the sender), then it is up to the caller to manage this\r\n     * returned ETH.\r\n     */\r\n    function _handleRemainingEth(uint256 amountUsed) internal {\r\n        _require(msg.value >= amountUsed, Errors.INSUFFICIENT_ETH);\r\n\r\n        uint256 excess = msg.value - amountUsed;\r\n        if (excess > 0) {\r\n            msg.sender.sendValue(excess);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Enables the Vault to receive ETH. This is required for it to be able to unwrap WETH, which sends ETH to the\r\n     * caller.\r\n     *\r\n     * Any ETH sent to the Vault outside of the WETH unwrapping mechanism would be forever locked inside the Vault, so\r\n     * we prevent that from happening. Other mechanisms used to send ETH to the Vault (such as being the recipient of an\r\n     * ETH swap, Pool exit or withdrawal, contract self-destruction, or receiving the block mining reward) will result\r\n     * in locked funds, but are not otherwise a security or soundness issue. This check only exists as an attempt to\r\n     * prevent user error.\r\n     */\r\n    receive() external payable {\r\n        _require(msg.sender == address(_WETH()), Errors.ETH_TRANSFER);\r\n    }\r\n\r\n    // This contract uses virtual internal functions instead of inheriting from the modules that implement them (in\r\n    // this case UserBalance) in order to decouple it from the rest of the system and enable standalone testing by\r\n    // implementing these with mocks.\r\n\r\n    function _increaseInternalBalance(\r\n        address account,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) internal virtual;\r\n\r\n    function _decreaseInternalBalance(\r\n        address account,\r\n        IERC20 token,\r\n        uint256 amount,\r\n        bool capped\r\n    ) internal virtual returns (uint256);\r\n}\r\n"
    },
    "contracts/lib/helpers/AssetHelpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../openzeppelin/IERC20.sol\";\r\n\r\nimport \"../../vault/interfaces/IAsset.sol\";\r\nimport \"../../vault/interfaces/IWETH.sol\";\r\n\r\nabstract contract AssetHelpers {\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    IWETH private immutable _weth;\r\n\r\n    // Sentinel value used to indicate WETH with wrapping/unwrapping semantics. The zero address is a good choice for\r\n    // multiple reasons: it is cheap to pass as a calldata argument, it is a known invalid token and non-contract, and\r\n    // it is an address Pools cannot register as a token.\r\n    address private constant _ETH = address(0);\r\n\r\n    constructor(IWETH weth) {\r\n        _weth = weth;\r\n    }\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function _WETH() internal view returns (IWETH) {\r\n        return _weth;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `asset` is the sentinel value that represents ETH.\r\n     */\r\n    function _isETH(IAsset asset) internal pure returns (bool) {\r\n        return address(asset) == _ETH;\r\n    }\r\n\r\n    /**\r\n     * @dev Translates `asset` into an equivalent IERC20 token address. If `asset` represents ETH, it will be translated\r\n     * to the WETH contract.\r\n     */\r\n    function _translateToIERC20(IAsset asset) internal view returns (IERC20) {\r\n        return _isETH(asset) ? _WETH() : _asIERC20(asset);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as `_translateToIERC20(IAsset)`, but for an entire array.\r\n     */\r\n    function _translateToIERC20(IAsset[] memory assets) internal view returns (IERC20[] memory) {\r\n        IERC20[] memory tokens = new IERC20[](assets.length);\r\n        for (uint256 i = 0; i < assets.length; ++i) {\r\n            tokens[i] = _translateToIERC20(assets[i]);\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Interprets `asset` as an IERC20 token. This function should only be called on `asset` if `_isETH` previously\r\n     * returned false for it, that is, if `asset` is guaranteed not to be the ETH sentinel value.\r\n     */\r\n    function _asIERC20(IAsset asset) internal pure returns (IERC20) {\r\n        return IERC20(address(asset));\r\n    }\r\n}\r\n"
    },
    "contracts/lib/openzeppelin/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../helpers/BalancerErrors.sol\";\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        _require(address(this).balance >= amount, Errors.ADDRESS_INSUFFICIENT_BALANCE);\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        _require(success, Errors.ADDRESS_CANNOT_SEND_VALUE);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1500
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}