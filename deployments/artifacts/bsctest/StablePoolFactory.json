{
  "address": "0x6F3058042cfd27E7bcF408b036a05c0A7a4C5ce9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amplificationParameter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPauseConfiguration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pauseWindowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bufferPeriodDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isPoolFromFactory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd2251fefe826d76be403d1a657d636ee157d660cee0883907a634366c9909dad",
  "receipt": {
    "to": null,
    "from": "0x3A54802752fEFDc1aF2CD0b6DFA4F24694bDEE33",
    "contractAddress": "0x6F3058042cfd27E7bcF408b036a05c0A7a4C5ce9",
    "transactionIndex": 1,
    "gasUsed": "4568047",
    "logsBloom": "0x
    "blockHash": "0xf6ea5fa82a8b23716916ea843e3555bfea4bc6117b657ced8dce03411522f203",
    "transactionHash": "0xd2251fefe826d76be403d1a657d636ee157d660cee0883907a634366c9909dad",
    "logs": [],
    "blockNumber": 20310349,
    "cumulativeGasUsed": "4613797",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9B9D7498641BF2CDB48a20cfecd1478FdD65fbf7"
  ],
  "solcInputHash": "5035014888e0d589f263a9fe21d2103e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amplificationParameter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pauseWindowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolFromFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(string,string,address[],uint256,uint256,address)\":{\"details\":\"Deploys a new `StablePool`.\"},\"getPauseConfiguration()\":{\"details\":\"Returns the current `TemporarilyPausable` configuration that will be applied to Pools created by this factory. `pauseWindowDuration` will decrease over time until it reaches zero, at which point both it and `bufferPeriodDuration` will be zero forever, meaning deployed Pools will not be pausable.\"},\"getVault()\":{\"details\":\"Returns the Vault's address.\"},\"isPoolFromFactory(address)\":{\"details\":\"Returns true if `pool` was created by this factory.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/stable/StablePoolFactory.sol\":\"StablePoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/Authentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./BalancerErrors.sol\\\";\\r\\nimport \\\"./IAuthentication.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Building block for performing access control on external functions.\\r\\n *\\r\\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\\r\\n * to external functions to only make them callable by authorized accounts.\\r\\n *\\r\\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\\r\\n */\\r\\nabstract contract Authentication is IAuthentication {\\r\\n    bytes32 private immutable _actionIdDisambiguator;\\r\\n\\r\\n    /**\\r\\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\\r\\n     * multi contract systems.\\r\\n     *\\r\\n     * There are two main uses for it:\\r\\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\\r\\n     *    unique. The contract's own address is a good option.\\r\\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\\r\\n     *    shared by the entire family (and no other contract) should be used instead.\\r\\n     */\\r\\n    constructor(bytes32 actionIdDisambiguator) {\\r\\n        _actionIdDisambiguator = actionIdDisambiguator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\\r\\n     */\\r\\n    modifier authenticate() {\\r\\n        _authenticateCaller();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts unless the caller is allowed to call the entry point function.\\r\\n     */\\r\\n    function _authenticateCaller() internal view {\\r\\n        bytes32 actionId = getActionId(msg.sig);\\r\\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\\r\\n    }\\r\\n\\r\\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\\r\\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\\r\\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\\r\\n        // multiple contracts.\\r\\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\\r\\n    }\\r\\n\\r\\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x6c87f2d6314955acf9d7cad0bb9efee369ac2d93405f6bb511e1cd9190b3d889\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n// solhint-disable\\r\\n\\r\\n/**\\r\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\r\\n * supported.\\r\\n */\\r\\nfunction _require(bool condition, uint256 errorCode) pure {\\r\\n    if (!condition) _revert(errorCode);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\r\\n */\\r\\nfunction _revert(uint256 errorCode) pure {\\r\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\r\\n    // 'BAL#{errorCode}'\\r\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\r\\n    //\\r\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\r\\n    // number (8 to 16 bits) than the individual string characters.\\r\\n    //\\r\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\r\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\r\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\r\\n    assembly {\\r\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\r\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\r\\n        // the '0' character.\\r\\n\\r\\n        let units := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        errorCode := div(errorCode, 10)\\r\\n        let tenths := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        errorCode := div(errorCode, 10)\\r\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\r\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\r\\n        // characters to it, each shifted by a multiple of 8.\\r\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\r\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\r\\n        // array).\\r\\n\\r\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\r\\n\\r\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\r\\n        // message will have the following layout:\\r\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\r\\n\\r\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\r\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\r\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\r\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\r\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\r\\n        // The string length is fixed: 7 characters.\\r\\n        mstore(0x24, 7)\\r\\n        // Finally, the string itself is stored.\\r\\n        mstore(0x44, revertReason)\\r\\n\\r\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\r\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\r\\n        revert(0, 100)\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Errors {\\r\\n    // Math\\r\\n    uint256 internal constant ADD_OVERFLOW = 0;\\r\\n    uint256 internal constant SUB_OVERFLOW = 1;\\r\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\r\\n    uint256 internal constant MUL_OVERFLOW = 3;\\r\\n    uint256 internal constant ZERO_DIVISION = 4;\\r\\n    uint256 internal constant DIV_INTERNAL = 5;\\r\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\r\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\r\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\r\\n    uint256 internal constant INVALID_EXPONENT = 9;\\r\\n\\r\\n    // Input\\r\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\r\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\r\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\r\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\r\\n    uint256 internal constant ZERO_TOKEN = 104;\\r\\n\\r\\n    // Shared pools\\r\\n    uint256 internal constant MIN_TOKENS = 200;\\r\\n    uint256 internal constant MAX_TOKENS = 201;\\r\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\r\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\r\\n    uint256 internal constant MINIMUM_BPT = 204;\\r\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\r\\n    uint256 internal constant UNINITIALIZED = 206;\\r\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\r\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\r\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\r\\n\\r\\n    // Pools\\r\\n    uint256 internal constant MIN_AMP = 300;\\r\\n    uint256 internal constant MAX_AMP = 301;\\r\\n    uint256 internal constant MIN_WEIGHT = 302;\\r\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\r\\n    uint256 internal constant MAX_IN_RATIO = 304;\\r\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\r\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\r\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\r\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\r\\n    uint256 internal constant INVALID_TOKEN = 309;\\r\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\r\\n    uint256 internal constant ZERO_INVARIANT = 311;\\r\\n\\r\\n    // Lib\\r\\n    uint256 internal constant REENTRANCY = 400;\\r\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\r\\n    uint256 internal constant PAUSED = 402;\\r\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\r\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\r\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\r\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\r\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\r\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\r\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\r\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\r\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\r\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\r\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\r\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\r\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\r\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\r\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\r\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\r\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\r\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\r\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\r\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\r\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\r\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\r\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\r\\n\\r\\n    // Vault\\r\\n    uint256 internal constant INVALID_POOL_ID = 500;\\r\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\r\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\r\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\r\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\r\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\r\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\r\\n    uint256 internal constant SWAP_LIMIT = 507;\\r\\n    uint256 internal constant SWAP_DEADLINE = 508;\\r\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\r\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\r\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\r\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\r\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\r\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\r\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\r\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\r\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\r\\n    uint256 internal constant ETH_TRANSFER = 518;\\r\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\r\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\r\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\r\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\r\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\r\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\r\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\r\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\r\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\r\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\r\\n\\r\\n    // Fees\\r\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\r\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\r\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\r\\n}\\r\\n\",\"keccak256\":\"0x86ae8423356e088207b199c8958ddcc6238d48ca8844c55706b8e88a599c16c8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/IAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\ninterface IAuthentication {\\r\\n    /**\\r\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\r\\n     */\\r\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xc55a7af2370a4c1ce7c61e7716b08eb8fabb22913bc1bf404afbb1eaf548272f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\r\\n */\\r\\ninterface ISignaturesValidator {\\r\\n    /**\\r\\n     * @dev Returns the EIP712 domain separator.\\r\\n     */\\r\\n    function getDomainSeparator() external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next nonce used by an address to sign messages.\\r\\n     */\\r\\n    function getNextNonce(address user) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x4a3a7e5960f185db0267cf0c9b94428f637645f10e87483af3724f35bffc4d3e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the TemporarilyPausable helper.\\r\\n */\\r\\ninterface ITemporarilyPausable {\\r\\n    /**\\r\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\r\\n     */\\r\\n    event PausedStateChanged(bool paused);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current paused state.\\r\\n     */\\r\\n    function getPausedState()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool paused,\\r\\n            uint256 pauseWindowEndTime,\\r\\n            uint256 bufferPeriodEndTime\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xa8dd30c0b7d98007cc5a88d50438a7af6329f54a3f8ae2f8c45bc5fb3d97cddc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/InputHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./BalancerErrors.sol\\\";\\r\\n\\r\\nimport \\\"../../vault/interfaces/IAsset.sol\\\";\\r\\n\\r\\nlibrary InputHelpers {\\r\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\r\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\r\\n    }\\r\\n\\r\\n    function ensureInputLengthMatch(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 c\\r\\n    ) internal pure {\\r\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\r\\n    }\\r\\n\\r\\n    function ensureArrayIsSorted(IAsset[] memory array) internal pure {\\r\\n        address[] memory addressArray;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            addressArray := array\\r\\n        }\\r\\n        ensureArrayIsSorted(addressArray);\\r\\n    }\\r\\n\\r\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\r\\n        address[] memory addressArray;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            addressArray := array\\r\\n        }\\r\\n        ensureArrayIsSorted(addressArray);\\r\\n    }\\r\\n\\r\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\r\\n        if (array.length < 2) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address previous = array[0];\\r\\n        for (uint256 i = 1; i < array.length; ++i) {\\r\\n            address current = array[i];\\r\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\r\\n            previous = current;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6304a973d9a3f2dd16f4d01aa75ac29d029a435994ba52b4bddb25768f6da2e3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/TemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./BalancerErrors.sol\\\";\\r\\nimport \\\"./ITemporarilyPausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be\\r\\n * used as an emergency switch in case a security vulnerability or threat is identified.\\r\\n *\\r\\n * The contract can only be paused during the Pause Window, a period that starts at deployment. It can also be\\r\\n * unpaused and repaused any number of times during this period. This is intended to serve as a safety measure: it lets\\r\\n * system managers react quickly to potentially dangerous situations, knowing that this action is reversible if careful\\r\\n * analysis later determines there was a false alarm.\\r\\n *\\r\\n * If the contract is paused when the Pause Window finishes, it will remain in the paused state through an additional\\r\\n * Buffer Period, after which it will be automatically unpaused forever. This is to ensure there is always enough time\\r\\n * to react to an emergency, even if the threat is discovered shortly before the Pause Window expires.\\r\\n *\\r\\n * Note that since the contract can only be paused within the Pause Window, unpausing during the Buffer Period is\\r\\n * irreversible.\\r\\n */\\r\\nabstract contract TemporarilyPausable is ITemporarilyPausable {\\r\\n    // The Pause Window and Buffer Period are timestamp-based: they should not be relied upon for sub-minute accuracy.\\r\\n    // solhint-disable not-rely-on-time\\r\\n\\r\\n    uint256 private constant _MAX_PAUSE_WINDOW_DURATION = 90 days;\\r\\n    uint256 private constant _MAX_BUFFER_PERIOD_DURATION = 30 days;\\r\\n\\r\\n    uint256 private immutable _pauseWindowEndTime;\\r\\n    uint256 private immutable _bufferPeriodEndTime;\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    constructor(uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\\r\\n        _require(pauseWindowDuration <= _MAX_PAUSE_WINDOW_DURATION, Errors.MAX_PAUSE_WINDOW_DURATION);\\r\\n        _require(bufferPeriodDuration <= _MAX_BUFFER_PERIOD_DURATION, Errors.MAX_BUFFER_PERIOD_DURATION);\\r\\n\\r\\n        uint256 pauseWindowEndTime = block.timestamp + pauseWindowDuration;\\r\\n\\r\\n        _pauseWindowEndTime = pauseWindowEndTime;\\r\\n        _bufferPeriodEndTime = pauseWindowEndTime + bufferPeriodDuration;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the contract is paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _ensureNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer\\r\\n     * Period.\\r\\n     */\\r\\n    function getPausedState()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool paused,\\r\\n            uint256 pauseWindowEndTime,\\r\\n            uint256 bufferPeriodEndTime\\r\\n        )\\r\\n    {\\r\\n        paused = !_isNotPaused();\\r\\n        pauseWindowEndTime = _getPauseWindowEndTime();\\r\\n        bufferPeriodEndTime = _getBufferPeriodEndTime();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the pause state to `paused`. The contract can only be paused until the end of the Pause Window, and\\r\\n     * unpaused until the end of the Buffer Period.\\r\\n     *\\r\\n     * Once the Buffer Period expires, this function reverts unconditionally.\\r\\n     */\\r\\n    function _setPaused(bool paused) internal {\\r\\n        if (paused) {\\r\\n            _require(block.timestamp < _getPauseWindowEndTime(), Errors.PAUSE_WINDOW_EXPIRED);\\r\\n        } else {\\r\\n            _require(block.timestamp < _getBufferPeriodEndTime(), Errors.BUFFER_PERIOD_EXPIRED);\\r\\n        }\\r\\n\\r\\n        _paused = paused;\\r\\n        emit PausedStateChanged(paused);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the contract is paused.\\r\\n     */\\r\\n    function _ensureNotPaused() internal view {\\r\\n        _require(_isNotPaused(), Errors.PAUSED);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is unpaused.\\r\\n     *\\r\\n     * Once the Buffer Period expires, the gas cost of calling this function is reduced dramatically, as storage is no\\r\\n     * longer accessed.\\r\\n     */\\r\\n    function _isNotPaused() internal view returns (bool) {\\r\\n        // After the Buffer Period, the (inexpensive) timestamp check short-circuits the storage access.\\r\\n        return block.timestamp > _getBufferPeriodEndTime() || !_paused;\\r\\n    }\\r\\n\\r\\n    // These getters lead to reduced bytecode size by inlining the immutable variables in a single place.\\r\\n\\r\\n    function _getPauseWindowEndTime() private view returns (uint256) {\\r\\n        return _pauseWindowEndTime;\\r\\n    }\\r\\n\\r\\n    function _getBufferPeriodEndTime() private view returns (uint256) {\\r\\n        return _bufferPeriodEndTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd5a144f8d3274c2e6a0b195605e429384c2ff469043dba3bf6aaa36f2ebcbc21\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./LogExpMath.sol\\\";\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\n/* solhint-disable private-vars-leading-underscore */\\r\\n\\r\\nlibrary FixedPoint {\\r\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\r\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\r\\n\\r\\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\\r\\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Fixed Point addition is the same as regular checked addition\\r\\n\\r\\n        uint256 c = a + b;\\r\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Fixed Point addition is the same as regular checked addition\\r\\n\\r\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 product = a * b;\\r\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\r\\n\\r\\n        return product / ONE;\\r\\n    }\\r\\n\\r\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 product = a * b;\\r\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\r\\n\\r\\n        if (product == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            // The traditional divUp formula is:\\r\\n            // divUp(x, y) := (x + y - 1) / y\\r\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\r\\n            // divUp(x, y) := (x - 1) / y + 1\\r\\n            // Note that this requires x != 0, which we already tested for.\\r\\n\\r\\n            return ((product - 1) / ONE) + 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        _require(b != 0, Errors.ZERO_DIVISION);\\r\\n\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint256 aInflated = a * ONE;\\r\\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\r\\n\\r\\n            return aInflated / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        _require(b != 0, Errors.ZERO_DIVISION);\\r\\n\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint256 aInflated = a * ONE;\\r\\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\r\\n\\r\\n            // The traditional divUp formula is:\\r\\n            // divUp(x, y) := (x + y - 1) / y\\r\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\r\\n            // divUp(x, y) := (x - 1) / y + 1\\r\\n            // Note that this requires x != 0, which we already tested for.\\r\\n\\r\\n            return ((aInflated - 1) / b) + 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\\r\\n     * the true value (that is, the error function expected - actual is always positive).\\r\\n     */\\r\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        uint256 raw = LogExpMath.pow(x, y);\\r\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\r\\n\\r\\n        if (raw < maxError) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return sub(raw, maxError);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\\r\\n     * the true value (that is, the error function expected - actual is always negative).\\r\\n     */\\r\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        uint256 raw = LogExpMath.pow(x, y);\\r\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\r\\n\\r\\n        return add(raw, maxError);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\\r\\n     *\\r\\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\\r\\n     * prevents intermediate negative values.\\r\\n     */\\r\\n    function complement(uint256 x) internal pure returns (uint256) {\\r\\n        return (x < ONE) ? (ONE - x) : 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaa0f0f36dbf4dc05d758c18c29ca00e847627abe39408a81cd7ed3d1df77fb1b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General internal License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General internal License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\n/* solhint-disable */\\r\\n\\r\\n/**\\r\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\r\\n *\\r\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\r\\n * exponentiation and logarithm (where the base is Euler's number).\\r\\n *\\r\\n * @author Fernando Martinelli - @fernandomartinelli\\r\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\r\\n * @author Daniel Fernandez - @dmf7z\\r\\n */\\r\\nlibrary LogExpMath {\\r\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\r\\n    // two numbers, and multiply by ONE when dividing them.\\r\\n\\r\\n    // All arguments and return values are 18 decimal fixed point numbers.\\r\\n    int256 constant ONE_18 = 1e18;\\r\\n\\r\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\r\\n    // case of ln36, 36 decimals.\\r\\n    int256 constant ONE_20 = 1e20;\\r\\n    int256 constant ONE_36 = 1e36;\\r\\n\\r\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\r\\n    //\\r\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\r\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\r\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\r\\n    // ln(10^(-18)) = -41.446531673892822312.\\r\\n    // We use 130.0 and -41.0 to have some safety margin.\\r\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\r\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\r\\n\\r\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\r\\n    // 256 bit integer.\\r\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\r\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\r\\n\\r\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\r\\n\\r\\n    // 18 decimal constants\\r\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\r\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\r\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\r\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\r\\n\\r\\n    // 20 decimal constants\\r\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\r\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\r\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\r\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\r\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\r\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\r\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\r\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\r\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\r\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\r\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\r\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\r\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\r\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\r\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\r\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\r\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\r\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\r\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\r\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\r\\n\\r\\n    /**\\r\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\r\\n     *\\r\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\r\\n     */\\r\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        if (y == 0) {\\r\\n            // We solve the 0^0 indetermination by making it equal one.\\r\\n            return uint256(ONE_18);\\r\\n        }\\r\\n\\r\\n        if (x == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\r\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\r\\n        // x^y = exp(y * ln(x)).\\r\\n\\r\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\r\\n        _require(x < 2**255, Errors.X_OUT_OF_BOUNDS);\\r\\n        int256 x_int256 = int256(x);\\r\\n\\r\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\r\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\r\\n\\r\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\r\\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\\r\\n        int256 y_int256 = int256(y);\\r\\n\\r\\n        int256 logx_times_y;\\r\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\r\\n            int256 ln_36_x = ln_36(x_int256);\\r\\n\\r\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\r\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\r\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\r\\n            // (downscaled) last 18 decimals.\\r\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\r\\n        } else {\\r\\n            logx_times_y = ln(x_int256) * y_int256;\\r\\n        }\\r\\n        logx_times_y /= ONE_18;\\r\\n\\r\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\r\\n        _require(\\r\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\r\\n            Errors.PRODUCT_OUT_OF_BOUNDS\\r\\n        );\\r\\n\\r\\n        return uint256(exp(logx_times_y));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\r\\n     *\\r\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\r\\n     */\\r\\n    function exp(int256 x) internal pure returns (int256) {\\r\\n        _require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\\r\\n\\r\\n        if (x < 0) {\\r\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\r\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\r\\n            // Fixed point division requires multiplying by ONE_18.\\r\\n            return ((ONE_18 * ONE_18) / exp(-x));\\r\\n        }\\r\\n\\r\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\r\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\r\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\r\\n        // decomposition.\\r\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\r\\n        // decomposition, which will be lower than the smallest x_n.\\r\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\r\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\r\\n\\r\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\r\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\r\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\r\\n        // decomposition.\\r\\n\\r\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\r\\n        // it and compute the accumulated product.\\r\\n\\r\\n        int256 firstAN;\\r\\n        if (x >= x0) {\\r\\n            x -= x0;\\r\\n            firstAN = a0;\\r\\n        } else if (x >= x1) {\\r\\n            x -= x1;\\r\\n            firstAN = a1;\\r\\n        } else {\\r\\n            firstAN = 1; // One with no decimal places\\r\\n        }\\r\\n\\r\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\r\\n        // smaller terms.\\r\\n        x *= 100;\\r\\n\\r\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\r\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\r\\n        int256 product = ONE_20;\\r\\n\\r\\n        if (x >= x2) {\\r\\n            x -= x2;\\r\\n            product = (product * a2) / ONE_20;\\r\\n        }\\r\\n        if (x >= x3) {\\r\\n            x -= x3;\\r\\n            product = (product * a3) / ONE_20;\\r\\n        }\\r\\n        if (x >= x4) {\\r\\n            x -= x4;\\r\\n            product = (product * a4) / ONE_20;\\r\\n        }\\r\\n        if (x >= x5) {\\r\\n            x -= x5;\\r\\n            product = (product * a5) / ONE_20;\\r\\n        }\\r\\n        if (x >= x6) {\\r\\n            x -= x6;\\r\\n            product = (product * a6) / ONE_20;\\r\\n        }\\r\\n        if (x >= x7) {\\r\\n            x -= x7;\\r\\n            product = (product * a7) / ONE_20;\\r\\n        }\\r\\n        if (x >= x8) {\\r\\n            x -= x8;\\r\\n            product = (product * a8) / ONE_20;\\r\\n        }\\r\\n        if (x >= x9) {\\r\\n            x -= x9;\\r\\n            product = (product * a9) / ONE_20;\\r\\n        }\\r\\n\\r\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\r\\n\\r\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\r\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\r\\n\\r\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\r\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\r\\n\\r\\n        // The first term is simply x.\\r\\n        term = x;\\r\\n        seriesSum += term;\\r\\n\\r\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\r\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 2;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 3;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 4;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 5;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 6;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 7;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 8;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 9;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 10;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 11;\\r\\n        seriesSum += term;\\r\\n\\r\\n        term = ((term * x) / ONE_20) / 12;\\r\\n        seriesSum += term;\\r\\n\\r\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\r\\n\\r\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\r\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\r\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\r\\n        // and then drop two digits to return an 18 decimal value.\\r\\n\\r\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\r\\n     */\\r\\n    function ln(int256 a) internal pure returns (int256) {\\r\\n        // The real natural logarithm is not defined for negative numbers or zero.\\r\\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\\r\\n\\r\\n        if (a < ONE_18) {\\r\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\r\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\r\\n            // Fixed point division requires multiplying by ONE_18.\\r\\n            return (-ln((ONE_18 * ONE_18) / a));\\r\\n        }\\r\\n\\r\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\r\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\r\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\r\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\r\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\r\\n        // decomposition, which will be lower than the smallest a_n.\\r\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\r\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\r\\n\\r\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\r\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\r\\n        // ONE_18 to convert them to fixed point.\\r\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\r\\n        // by it and compute the accumulated sum.\\r\\n\\r\\n        int256 sum = 0;\\r\\n        if (a >= a0 * ONE_18) {\\r\\n            a /= a0; // Integer, not fixed point division\\r\\n            sum += x0;\\r\\n        }\\r\\n\\r\\n        if (a >= a1 * ONE_18) {\\r\\n            a /= a1; // Integer, not fixed point division\\r\\n            sum += x1;\\r\\n        }\\r\\n\\r\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\r\\n        sum *= 100;\\r\\n        a *= 100;\\r\\n\\r\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\r\\n\\r\\n        if (a >= a2) {\\r\\n            a = (a * ONE_20) / a2;\\r\\n            sum += x2;\\r\\n        }\\r\\n\\r\\n        if (a >= a3) {\\r\\n            a = (a * ONE_20) / a3;\\r\\n            sum += x3;\\r\\n        }\\r\\n\\r\\n        if (a >= a4) {\\r\\n            a = (a * ONE_20) / a4;\\r\\n            sum += x4;\\r\\n        }\\r\\n\\r\\n        if (a >= a5) {\\r\\n            a = (a * ONE_20) / a5;\\r\\n            sum += x5;\\r\\n        }\\r\\n\\r\\n        if (a >= a6) {\\r\\n            a = (a * ONE_20) / a6;\\r\\n            sum += x6;\\r\\n        }\\r\\n\\r\\n        if (a >= a7) {\\r\\n            a = (a * ONE_20) / a7;\\r\\n            sum += x7;\\r\\n        }\\r\\n\\r\\n        if (a >= a8) {\\r\\n            a = (a * ONE_20) / a8;\\r\\n            sum += x8;\\r\\n        }\\r\\n\\r\\n        if (a >= a9) {\\r\\n            a = (a * ONE_20) / a9;\\r\\n            sum += x9;\\r\\n        }\\r\\n\\r\\n        if (a >= a10) {\\r\\n            a = (a * ONE_20) / a10;\\r\\n            sum += x10;\\r\\n        }\\r\\n\\r\\n        if (a >= a11) {\\r\\n            a = (a * ONE_20) / a11;\\r\\n            sum += x11;\\r\\n        }\\r\\n\\r\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\r\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\r\\n        // Let z = (a - 1) / (a + 1).\\r\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\r\\n\\r\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\r\\n        // division by ONE_20.\\r\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\r\\n        int256 z_squared = (z * z) / ONE_20;\\r\\n\\r\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\r\\n        int256 num = z;\\r\\n\\r\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\r\\n        int256 seriesSum = num;\\r\\n\\r\\n        // In each step, the numerator is multiplied by z^2\\r\\n        num = (num * z_squared) / ONE_20;\\r\\n        seriesSum += num / 3;\\r\\n\\r\\n        num = (num * z_squared) / ONE_20;\\r\\n        seriesSum += num / 5;\\r\\n\\r\\n        num = (num * z_squared) / ONE_20;\\r\\n        seriesSum += num / 7;\\r\\n\\r\\n        num = (num * z_squared) / ONE_20;\\r\\n        seriesSum += num / 9;\\r\\n\\r\\n        num = (num * z_squared) / ONE_20;\\r\\n        seriesSum += num / 11;\\r\\n\\r\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\r\\n\\r\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\r\\n        seriesSum *= 2;\\r\\n\\r\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\r\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\r\\n        // value.\\r\\n\\r\\n        return (sum + seriesSum) / 100;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument argument.\\r\\n     */\\r\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\r\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\r\\n\\r\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\r\\n        // upscaling.\\r\\n\\r\\n        int256 logBase;\\r\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\r\\n            logBase = ln_36(base);\\r\\n        } else {\\r\\n            logBase = ln(base) * ONE_18;\\r\\n        }\\r\\n\\r\\n        int256 logArg;\\r\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\r\\n            logArg = ln_36(arg);\\r\\n        } else {\\r\\n            logArg = ln(arg) * ONE_18;\\r\\n        }\\r\\n\\r\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\r\\n        return (logArg * ONE_18) / logBase;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev High precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\r\\n     * for x close to one.\\r\\n     *\\r\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\r\\n     */\\r\\n    function ln_36(int256 x) private pure returns (int256) {\\r\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\r\\n        // worthwhile.\\r\\n\\r\\n        // First, we transform x to a 36 digit fixed point value.\\r\\n        x *= ONE_18;\\r\\n\\r\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\r\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\r\\n\\r\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\r\\n        // division by ONE_36.\\r\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\r\\n        int256 z_squared = (z * z) / ONE_36;\\r\\n\\r\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\r\\n        int256 num = z;\\r\\n\\r\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\r\\n        int256 seriesSum = num;\\r\\n\\r\\n        // In each step, the numerator is multiplied by z^2\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 3;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 5;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 7;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 9;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 11;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 13;\\r\\n\\r\\n        num = (num * z_squared) / ONE_36;\\r\\n        seriesSum += num / 15;\\r\\n\\r\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\r\\n\\r\\n        // All that remains is multiplying by 2 (non fixed point).\\r\\n        return seriesSum * 2;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6cef57b50f3a0f2b70863e2279904029fbe8d3443f78659a696312c3918c8ca\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\r\\n * Adapted from OpenZeppelin's SafeMath library\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers of 256 bits.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers of 256 bits.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a * b;\\r\\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        _require(b != 0, Errors.ZERO_DIVISION);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        _require(b != 0, Errors.ZERO_DIVISION);\\r\\n\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return 1 + (a - 1) / b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x233537d4157bd79324f936e3b2f4ed245dc279cc3c006fa769316acf9c569c65\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\r\\n *\\r\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\r\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\r\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\r\\n *\\r\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\r\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\r\\n * ({_hashTypedDataV4}).\\r\\n *\\r\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\r\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\r\\n *\\r\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\r\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\nabstract contract EIP712 {\\r\\n    /* solhint-disable var-name-mixedcase */\\r\\n    bytes32 private immutable _HASHED_NAME;\\r\\n    bytes32 private immutable _HASHED_VERSION;\\r\\n    bytes32 private immutable _TYPE_HASH;\\r\\n\\r\\n    /* solhint-enable var-name-mixedcase */\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the domain separator and parameter caches.\\r\\n     *\\r\\n     * The meaning of `name` and `version` is specified in\\r\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\r\\n     *\\r\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\r\\n     * - `version`: the current major version of the signing domain.\\r\\n     *\\r\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\r\\n     * contract upgrade].\\r\\n     */\\r\\n    constructor(string memory name, string memory version) {\\r\\n        _HASHED_NAME = keccak256(bytes(name));\\r\\n        _HASHED_VERSION = keccak256(bytes(version));\\r\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator for the current chain.\\r\\n     */\\r\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\r\\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\r\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\r\\n     *\\r\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\r\\n     *\\r\\n     * ```solidity\\r\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\r\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\r\\n     *     mailTo,\\r\\n     *     keccak256(bytes(mailContents))\\r\\n     * )));\\r\\n     * address signer = ECDSA.recover(digest, signature);\\r\\n     * ```\\r\\n     */\\r\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\r\\n    }\\r\\n\\r\\n    function _getChainId() private view returns (uint256 chainId) {\\r\\n        // Silence state mutability warning without generating bytecode.\\r\\n        // See https://github.com/ethereum/solidity/issues/10090#issuecomment-741789128 and\\r\\n        // https://github.com/ethereum/solidity/issues/2691\\r\\n        this;\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x36ea92c7272d419e11a8b7752e6f08c30c549b903e0813de702a736b5ba389ec\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            msg.sender,\\r\\n            _allowances[sender][msg.sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender].sub(subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        _require(sender != address(0), Errors.ERC20_TRANSFER_FROM_ZERO_ADDRESS);\\r\\n        _require(recipient != address(0), Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS);\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_BALANCE);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        _require(account != address(0), Errors.ERC20_MINT_TO_ZERO_ADDRESS);\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        _require(account != address(0), Errors.ERC20_BURN_FROM_ZERO_ADDRESS);\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        _require(owner != address(0), Errors.ERC20_APPROVE_FROM_ZERO_ADDRESS);\\r\\n        _require(spender != address(0), Errors.ERC20_APPROVE_TO_ZERO_ADDRESS);\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0xb61ac3228d69413be9c238cf15617b3f9d9eb900439d44455f0c4e6bde29dcc5\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x1a55047baff95c6f63e55168d5767462a1ef6f12e131b2ad56f30b3df97b7d0e\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\r\\n     * given `owner`'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x5c317b5f8fbf430b7da38fc52925168e21532be80057a58eb3b8266dc2cd912a\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\n// Based on the ReentrancyGuard library from OpenZeppelin contracts, altered to reduce bytecode size.\\r\\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\\r\\n// private functions, we achieve the same end result with slightly higher runtime gas costs but reduced bytecode size.\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _enterNonReentrant();\\r\\n        _;\\r\\n        _exitNonReentrant();\\r\\n    }\\r\\n\\r\\n    function _enterNonReentrant() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        _require(_status != _ENTERED, Errors.REENTRANCY);\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _exitNonReentrant() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x90dfc9a5dbd5a0831d6dbb76089e8172b9b72ed89a2b0067ddf12f536c79db23\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     *\\r\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\r\\n     */\\r\\n    function _callOptionalReturn(address token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n        (bool success, bytes memory returndata) = token.call(data);\\r\\n\\r\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\r\\n        assembly {\\r\\n            if eq(success, 0) {\\r\\n                returndatacopy(0, 0, returndatasize())\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\r\\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x274dd0561493bd509c24ad4db2d38fee344c5f25c4cb0c89c8597071a81384d3\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, uint256 errorCode) internal pure returns (uint256) {\\r\\n        _require(b <= a, errorCode);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdd69c9145331a82b4f2a762ae75a062693085f78d4db60551733d3fd427172a8\",\"license\":\"MIT\"},\"contracts/pools/BalancerPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../lib/math/Math.sol\\\";\\r\\nimport \\\"../lib/openzeppelin/IERC20.sol\\\";\\r\\nimport \\\"../lib/openzeppelin/IERC20Permit.sol\\\";\\r\\nimport \\\"../lib/openzeppelin/EIP712.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Highly opinionated token implementation\\r\\n * @author Balancer Labs\\r\\n * @dev\\r\\n * - Includes functions to increase and decrease allowance as a workaround\\r\\n *   for the well-known issue with `approve`:\\r\\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\\r\\n *   decreased by calls to transferFrom\\r\\n * - Lets a token holder use `transferFrom` to send their own tokens,\\r\\n *   without first setting allowance\\r\\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\\r\\n */\\r\\ncontract BalancerPoolToken is IERC20, IERC20Permit, EIP712 {\\r\\n    using Math for uint256;\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    uint8 private constant _DECIMALS = 18;\\r\\n\\r\\n    mapping(address => uint256) private _balance;\\r\\n    mapping(address => mapping(address => uint256)) private _allowance;\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    mapping(address => uint256) private _nonces;\\r\\n\\r\\n    // solhint-disable-next-line var-name-mixedcase\\r\\n    bytes32 private immutable _PERMIT_TYPE_HASH = keccak256(\\r\\n        \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\r\\n    );\\r\\n\\r\\n    // Function declarations\\r\\n\\r\\n    constructor(string memory tokenName, string memory tokenSymbol) EIP712(tokenName, \\\"1\\\") {\\r\\n        _name = tokenName;\\r\\n        _symbol = tokenSymbol;\\r\\n    }\\r\\n\\r\\n    // External functions\\r\\n\\r\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n        return _allowance[owner][spender];\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view override returns (uint256) {\\r\\n        return _balance[account];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        _setAllowance(msg.sender, spender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseApproval(address spender, uint256 amount) external returns (bool) {\\r\\n        _setAllowance(msg.sender, spender, _allowance[msg.sender][spender].add(amount));\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseApproval(address spender, uint256 amount) external returns (bool) {\\r\\n        uint256 currentAllowance = _allowance[msg.sender][spender];\\r\\n\\r\\n        if (amount >= currentAllowance) {\\r\\n            _setAllowance(msg.sender, spender, 0);\\r\\n        } else {\\r\\n            _setAllowance(msg.sender, spender, currentAllowance.sub(amount));\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        _move(msg.sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external override returns (bool) {\\r\\n        uint256 currentAllowance = _allowance[sender][msg.sender];\\r\\n        _require(msg.sender == sender || currentAllowance >= amount, Errors.INSUFFICIENT_ALLOWANCE);\\r\\n\\r\\n        _move(sender, recipient, amount);\\r\\n\\r\\n        if (msg.sender != sender && currentAllowance != uint256(-1)) {\\r\\n            // Because of the previous require, we know that if msg.sender != sender then currentAllowance >= amount\\r\\n            _setAllowance(sender, msg.sender, currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public virtual override {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        _require(block.timestamp <= deadline, Errors.EXPIRED_PERMIT);\\r\\n\\r\\n        uint256 nonce = _nonces[owner];\\r\\n\\r\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPE_HASH, owner, spender, value, nonce, deadline));\\r\\n\\r\\n        bytes32 hash = _hashTypedDataV4(structHash);\\r\\n\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        _require((signer != address(0)) && (signer == owner), Errors.INVALID_SIGNATURE);\\r\\n\\r\\n        _nonces[owner] = nonce + 1;\\r\\n        _setAllowance(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    // Public functions\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _DECIMALS;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function nonces(address owner) external view override returns (uint256) {\\r\\n        return _nonces[owner];\\r\\n    }\\r\\n\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\r\\n        return _domainSeparatorV4();\\r\\n    }\\r\\n\\r\\n    // Internal functions\\r\\n\\r\\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\\r\\n        _balance[recipient] = _balance[recipient].add(amount);\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        emit Transfer(address(0), recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _burnPoolTokens(address sender, uint256 amount) internal {\\r\\n        uint256 currentBalance = _balance[sender];\\r\\n        _require(currentBalance >= amount, Errors.INSUFFICIENT_BALANCE);\\r\\n\\r\\n        _balance[sender] = currentBalance - amount;\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(sender, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _move(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        uint256 currentBalance = _balance[sender];\\r\\n        _require(currentBalance >= amount, Errors.INSUFFICIENT_BALANCE);\\r\\n        // Prohibit transfers to the zero address to avoid confusion with the\\r\\n        // Transfer event emitted by `_burnPoolTokens`\\r\\n        _require(recipient != address(0), Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS);\\r\\n\\r\\n        _balance[sender] = currentBalance - amount;\\r\\n        _balance[recipient] = _balance[recipient].add(amount);\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    // Private functions\\r\\n\\r\\n    function _setAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        _allowance[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa2811e5d09f609939a0b9d58822958e92174c4b4cff7c51ab88bf83c47eb621e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BaseGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./BasePool.sol\\\";\\r\\nimport \\\"../vault/interfaces/IGeneralPool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of `BasePool`, adding a handler for `IGeneralPool.onSwap`.\\r\\n *\\r\\n * Derived contracts must implement `_onSwapGivenIn` and `_onSwapGivenOut` along with `BasePool`'s virtual functions.\\r\\n */\\r\\nabstract contract BaseGeneralPool is IGeneralPool, BasePool {\\r\\n    constructor(\\r\\n        IVault vault,\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        IERC20[] memory tokens,\\r\\n        uint256 swapFeePercentage,\\r\\n        uint256 pauseWindowDuration,\\r\\n        uint256 bufferPeriodDuration,\\r\\n        address owner\\r\\n    )\\r\\n        BasePool(\\r\\n            vault,\\r\\n            IVault.PoolSpecialization.GENERAL,\\r\\n            name,\\r\\n            symbol,\\r\\n            tokens,\\r\\n            swapFeePercentage,\\r\\n            pauseWindowDuration,\\r\\n            bufferPeriodDuration,\\r\\n            owner\\r\\n        )\\r\\n    {\\r\\n        // solhint-disable-previous-line no-empty-blocks\\r\\n    }\\r\\n\\r\\n    // Swap Hooks\\r\\n\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) external view virtual override returns (uint256) {\\r\\n        _validateIndexes(indexIn, indexOut, _getTotalTokens());\\r\\n        uint256[] memory scalingFactors = _scalingFactors();\\r\\n\\r\\n        return\\r\\n            swapRequest.kind == IVault.SwapKind.GIVEN_IN\\r\\n                ? _swapGivenIn(swapRequest, balances, indexIn, indexOut, scalingFactors)\\r\\n                : _swapGivenOut(swapRequest, balances, indexIn, indexOut, scalingFactors);\\r\\n    }\\r\\n\\r\\n    function _swapGivenIn(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut,\\r\\n        uint256[] memory scalingFactors\\r\\n    ) internal view returns (uint256) {\\r\\n        // Fees are subtracted before scaling, to reduce the complexity of the rounding direction analysis.\\r\\n        swapRequest.amount = _subtractSwapFeeAmount(swapRequest.amount);\\r\\n\\r\\n        _upscaleArray(balances, scalingFactors);\\r\\n        swapRequest.amount = _upscale(swapRequest.amount, scalingFactors[indexIn]);\\r\\n\\r\\n        uint256 amountOut = _onSwapGivenIn(swapRequest, balances, indexIn, indexOut);\\r\\n\\r\\n        // amountOut tokens are exiting the Pool, so we round down.\\r\\n        return _downscaleDown(amountOut, scalingFactors[indexOut]);\\r\\n    }\\r\\n\\r\\n    function _swapGivenOut(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut,\\r\\n        uint256[] memory scalingFactors\\r\\n    ) internal view returns (uint256) {\\r\\n        _upscaleArray(balances, scalingFactors);\\r\\n        swapRequest.amount = _upscale(swapRequest.amount, scalingFactors[indexOut]);\\r\\n\\r\\n        uint256 amountIn = _onSwapGivenOut(swapRequest, balances, indexIn, indexOut);\\r\\n\\r\\n        // amountIn tokens are entering the Pool, so we round up.\\r\\n        amountIn = _downscaleUp(amountIn, scalingFactors[indexIn]);\\r\\n\\r\\n        // Fees are added after scaling happens, to reduce the complexity of the rounding direction analysis.\\r\\n        return _addSwapFeeAmount(amountIn);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Called when a swap with the Pool occurs, where the amount of tokens entering the Pool is known.\\r\\n     *\\r\\n     * Returns the amount of tokens that will be taken from the Pool in return.\\r\\n     *\\r\\n     * All amounts inside `swapRequest` and `balances` are upscaled. The swap fee has already been deducted from\\r\\n     * `swapRequest.amount`.\\r\\n     *\\r\\n     * The return value is also considered upscaled, and will be downscaled (rounding down) before returning it to the\\r\\n     * Vault.\\r\\n     */\\r\\n    function _onSwapGivenIn(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) internal view virtual returns (uint256);\\r\\n\\r\\n    /*\\r\\n     * @dev Called when a swap with the Pool occurs, where the amount of tokens exiting the Pool is known.\\r\\n     *\\r\\n     * Returns the amount of tokens that will be granted to the Pool in return.\\r\\n     *\\r\\n     * All amounts inside `swapRequest` and `balances` are upscaled.\\r\\n     *\\r\\n     * The return value is also considered upscaled, and will be downscaled (rounding up) before applying the swap fee\\r\\n     * and returning it to the Vault.\\r\\n     */\\r\\n    function _onSwapGivenOut(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) internal view virtual returns (uint256);\\r\\n\\r\\n    function _validateIndexes(\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut,\\r\\n        uint256 limit\\r\\n    ) private pure {\\r\\n        _require(indexIn < limit && indexOut < limit, Errors.OUT_OF_BOUNDS);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x63c4da4ca010abbc93293ca5261779d52b362819ff2c69fedf6e5d1af2174a04\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../lib/math/FixedPoint.sol\\\";\\r\\nimport \\\"../lib/helpers/InputHelpers.sol\\\";\\r\\nimport \\\"../lib/helpers/TemporarilyPausable.sol\\\";\\r\\nimport \\\"../lib/openzeppelin/ERC20.sol\\\";\\r\\n\\r\\nimport \\\"./BalancerPoolToken.sol\\\";\\r\\nimport \\\"./BasePoolAuthorization.sol\\\";\\r\\nimport \\\"../vault/interfaces/IVault.sol\\\";\\r\\nimport \\\"../vault/interfaces/IBasePool.sol\\\";\\r\\n\\r\\n// This contract relies on tons of immutable state variables to perform efficient lookup, without resorting to storage\\r\\n// reads. Because immutable arrays are not supported, we instead declare a fixed set of state variables plus a total\\r\\n// count, resulting in a large number of state variables.\\r\\n\\r\\n// solhint-disable max-states-count\\r\\n\\r\\n/**\\r\\n * @dev Reference implementation for the base layer of a Pool contract that manages a single Pool with an immutable set\\r\\n * of registered tokens, no Asset Managers, an admin-controlled swap fee percentage, and an emergency pause mechanism.\\r\\n *\\r\\n * Note that neither swap fees nor the pause mechanism are used by this contract. They are passed through so that\\r\\n * derived contracts can use them via the `_addSwapFeeAmount` and `_subtractSwapFeeAmount` functions, and the\\r\\n * `whenNotPaused` modifier.\\r\\n *\\r\\n * No admin permissions are checked here: instead, this contract delegates that to the Vault's own Authorizer.\\r\\n *\\r\\n * Because this contract doesn't implement the swap hooks, derived contracts should generally inherit from\\r\\n * BaseGeneralPool or BaseMinimalSwapInfoPool. Otherwise, subclasses must inherit from the corresponding interfaces\\r\\n * and implement the swap callbacks themselves.\\r\\n */\\r\\nabstract contract BasePool is IBasePool, BasePoolAuthorization, BalancerPoolToken, TemporarilyPausable {\\r\\n    using FixedPoint for uint256;\\r\\n\\r\\n    uint256 private constant _MIN_TOKENS = 2;\\r\\n    uint256 private constant _MAX_TOKENS = 8;\\r\\n\\r\\n    // 1e18 corresponds to 1.0, or a 100% fee\\r\\n    uint256 private constant _MIN_SWAP_FEE_PERCENTAGE = 1e12; // 0.0001%\\r\\n    uint256 private constant _MAX_SWAP_FEE_PERCENTAGE = 1e17; // 10%\\r\\n\\r\\n    uint256 private constant _MINIMUM_BPT = 1e6;\\r\\n\\r\\n    uint256 internal _swapFeePercentage;\\r\\n\\r\\n    IVault private immutable _vault;\\r\\n    bytes32 private immutable _poolId;\\r\\n    uint256 private immutable _totalTokens;\\r\\n\\r\\n    IERC20 internal immutable _token0;\\r\\n    IERC20 internal immutable _token1;\\r\\n    IERC20 internal immutable _token2;\\r\\n    IERC20 internal immutable _token3;\\r\\n    IERC20 internal immutable _token4;\\r\\n    IERC20 internal immutable _token5;\\r\\n    IERC20 internal immutable _token6;\\r\\n    IERC20 internal immutable _token7;\\r\\n\\r\\n    // All token balances are normalized to behave as if the token had 18 decimals. We assume a token's decimals will\\r\\n    // not change throughout its lifetime, and store the corresponding scaling factor for each at construction time.\\r\\n    // These factors are always greater than or equal to one: tokens with more than 18 decimals are not supported.\\r\\n\\r\\n    uint256 internal immutable _scalingFactor0;\\r\\n    uint256 internal immutable _scalingFactor1;\\r\\n    uint256 internal immutable _scalingFactor2;\\r\\n    uint256 internal immutable _scalingFactor3;\\r\\n    uint256 internal immutable _scalingFactor4;\\r\\n    uint256 internal immutable _scalingFactor5;\\r\\n    uint256 internal immutable _scalingFactor6;\\r\\n    uint256 internal immutable _scalingFactor7;\\r\\n\\r\\n    event SwapFeePercentageChanged(uint256 swapFeePercentage);\\r\\n\\r\\n    constructor(\\r\\n        IVault vault,\\r\\n        IVault.PoolSpecialization specialization,\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        IERC20[] memory tokens,\\r\\n        uint256 swapFeePercentage,\\r\\n        uint256 pauseWindowDuration,\\r\\n        uint256 bufferPeriodDuration,\\r\\n        address owner\\r\\n    )\\r\\n        // Base Pools are expected to be deployed using factories. By using the factory address as the action\\r\\n        // disambiguator, we make all Pools deployed by the same factory share action identifiers. This allows for\\r\\n        // simpler management of permissions (such as being able to manage granting the 'set fee percentage' action in\\r\\n        // any Pool created by the same factory), while still making action identifiers unique among different factories\\r\\n        // if the selectors match, preventing accidental errors.\\r\\n        Authentication(bytes32(uint256(msg.sender)))\\r\\n        BalancerPoolToken(name, symbol)\\r\\n        BasePoolAuthorization(owner)\\r\\n        TemporarilyPausable(pauseWindowDuration, bufferPeriodDuration)\\r\\n    {\\r\\n        _require(tokens.length >= _MIN_TOKENS, Errors.MIN_TOKENS);\\r\\n        _require(tokens.length <= _MAX_TOKENS, Errors.MAX_TOKENS);\\r\\n\\r\\n        // The Vault only requires the token list to be ordered for the Two Token Pools specialization. However,\\r\\n        // to make the developer experience consistent, we are requiring this condition for all the native pools.\\r\\n        // Also, since these Pools will register tokens only once, we can ensure the Pool tokens will follow the same\\r\\n        // order. We rely on this property to make Pools simpler to write, as it lets us assume that the\\r\\n        // order of token-specific parameters (such as token weights) will not change.\\r\\n        InputHelpers.ensureArrayIsSorted(tokens);\\r\\n\\r\\n        _setSwapFeePercentage(swapFeePercentage);\\r\\n\\r\\n        bytes32 poolId = vault.registerPool(specialization);\\r\\n\\r\\n        // Pass in zero addresses for Asset Managers\\r\\n        vault.registerTokens(poolId, tokens, new address[](tokens.length));\\r\\n\\r\\n        // Set immutable state variables - these cannot be read from during construction\\r\\n        _vault = vault;\\r\\n        _poolId = poolId;\\r\\n        _totalTokens = tokens.length;\\r\\n\\r\\n        // Immutable variables cannot be initialized inside an if statement, so we must do conditional assignments\\r\\n        _token0 = tokens.length > 0 ? tokens[0] : IERC20(0);\\r\\n        _token1 = tokens.length > 1 ? tokens[1] : IERC20(0);\\r\\n        _token2 = tokens.length > 2 ? tokens[2] : IERC20(0);\\r\\n        _token3 = tokens.length > 3 ? tokens[3] : IERC20(0);\\r\\n        _token4 = tokens.length > 4 ? tokens[4] : IERC20(0);\\r\\n        _token5 = tokens.length > 5 ? tokens[5] : IERC20(0);\\r\\n        _token6 = tokens.length > 6 ? tokens[6] : IERC20(0);\\r\\n        _token7 = tokens.length > 7 ? tokens[7] : IERC20(0);\\r\\n\\r\\n        _scalingFactor0 = tokens.length > 0 ? _computeScalingFactor(tokens[0]) : 0;\\r\\n        _scalingFactor1 = tokens.length > 1 ? _computeScalingFactor(tokens[1]) : 0;\\r\\n        _scalingFactor2 = tokens.length > 2 ? _computeScalingFactor(tokens[2]) : 0;\\r\\n        _scalingFactor3 = tokens.length > 3 ? _computeScalingFactor(tokens[3]) : 0;\\r\\n        _scalingFactor4 = tokens.length > 4 ? _computeScalingFactor(tokens[4]) : 0;\\r\\n        _scalingFactor5 = tokens.length > 5 ? _computeScalingFactor(tokens[5]) : 0;\\r\\n        _scalingFactor6 = tokens.length > 6 ? _computeScalingFactor(tokens[6]) : 0;\\r\\n        _scalingFactor7 = tokens.length > 7 ? _computeScalingFactor(tokens[7]) : 0;\\r\\n    }\\r\\n\\r\\n    // Getters / Setters\\r\\n\\r\\n    function getVault() public view returns (IVault) {\\r\\n        return _vault;\\r\\n    }\\r\\n\\r\\n    function getPoolId() public view returns (bytes32) {\\r\\n        return _poolId;\\r\\n    }\\r\\n\\r\\n    function _getTotalTokens() internal view returns (uint256) {\\r\\n        return _totalTokens;\\r\\n    }\\r\\n\\r\\n    function getSwapFeePercentage() external view returns (uint256) {\\r\\n        return _swapFeePercentage;\\r\\n    }\\r\\n\\r\\n    // Caller must be approved by the Vault's Authorizer\\r\\n    function setSwapFeePercentage(uint256 swapFeePercentage) external virtual authenticate whenNotPaused {\\r\\n        _setSwapFeePercentage(swapFeePercentage);\\r\\n    }\\r\\n\\r\\n    function _setSwapFeePercentage(uint256 swapFeePercentage) private {\\r\\n        _require(swapFeePercentage >= _MIN_SWAP_FEE_PERCENTAGE, Errors.MIN_SWAP_FEE_PERCENTAGE);\\r\\n        _require(swapFeePercentage <= _MAX_SWAP_FEE_PERCENTAGE, Errors.MAX_SWAP_FEE_PERCENTAGE);\\r\\n\\r\\n        _swapFeePercentage = swapFeePercentage;\\r\\n        emit SwapFeePercentageChanged(swapFeePercentage);\\r\\n    }\\r\\n\\r\\n    // Caller must be approved by the Vault's Authorizer\\r\\n    function setPaused(bool paused) external authenticate {\\r\\n        _setPaused(paused);\\r\\n    }\\r\\n\\r\\n    // Join / Exit Hooks\\r\\n\\r\\n    modifier onlyVault(bytes32 poolId) {\\r\\n        _require(msg.sender == address(getVault()), Errors.CALLER_NOT_VAULT);\\r\\n        _require(poolId == getPoolId(), Errors.INVALID_POOL_ID);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function onJoinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external virtual override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\r\\n        uint256[] memory scalingFactors = _scalingFactors();\\r\\n\\r\\n        if (totalSupply() == 0) {\\r\\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onInitializePool(poolId, sender, recipient, userData);\\r\\n\\r\\n            // On initialization, we lock _MINIMUM_BPT by minting it for the zero address. This BPT acts as a minimum\\r\\n            // as it will never be burned, which reduces potential issues with rounding, and also prevents the Pool from\\r\\n            // ever being fully drained.\\r\\n            _require(bptAmountOut >= _MINIMUM_BPT, Errors.MINIMUM_BPT);\\r\\n            _mintPoolTokens(address(0), _MINIMUM_BPT);\\r\\n            _mintPoolTokens(recipient, bptAmountOut - _MINIMUM_BPT);\\r\\n\\r\\n            // amountsIn are amounts entering the Pool, so we round up.\\r\\n            _downscaleUpArray(amountsIn, scalingFactors);\\r\\n\\r\\n            return (amountsIn, new uint256[](_getTotalTokens()));\\r\\n        } else {\\r\\n            _upscaleArray(balances, scalingFactors);\\r\\n            (uint256 bptAmountOut, uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts) = _onJoinPool(\\r\\n                poolId,\\r\\n                sender,\\r\\n                recipient,\\r\\n                balances,\\r\\n                lastChangeBlock,\\r\\n                protocolSwapFeePercentage,\\r\\n                userData\\r\\n            );\\r\\n\\r\\n            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.\\r\\n\\r\\n            _mintPoolTokens(recipient, bptAmountOut);\\r\\n\\r\\n            // amountsIn are amounts entering the Pool, so we round up.\\r\\n            _downscaleUpArray(amountsIn, scalingFactors);\\r\\n            // dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\\r\\n            _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\\r\\n\\r\\n            return (amountsIn, dueProtocolFeeAmounts);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function onExitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external virtual override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\r\\n        uint256[] memory scalingFactors = _scalingFactors();\\r\\n        _upscaleArray(balances, scalingFactors);\\r\\n\\r\\n        (uint256 bptAmountIn, uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts) = _onExitPool(\\r\\n            poolId,\\r\\n            sender,\\r\\n            recipient,\\r\\n            balances,\\r\\n            lastChangeBlock,\\r\\n            protocolSwapFeePercentage,\\r\\n            userData\\r\\n        );\\r\\n\\r\\n        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.\\r\\n\\r\\n        _burnPoolTokens(sender, bptAmountIn);\\r\\n\\r\\n        // Both amountsOut and dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\\r\\n        _downscaleDownArray(amountsOut, scalingFactors);\\r\\n        _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\\r\\n\\r\\n        return (amountsOut, dueProtocolFeeAmounts);\\r\\n    }\\r\\n\\r\\n    // Query functions\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the\\r\\n     * Vault with the same arguments, along with the number of tokens `sender` would have to supply.\\r\\n     *\\r\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\r\\n     * data, such as the protocol swap fee percentage and Pool balances.\\r\\n     *\\r\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\r\\n     * explicitly use eth_call instead of eth_sendTransaction.\\r\\n     */\\r\\n    function queryJoin(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn) {\\r\\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\\r\\n\\r\\n        _queryAction(\\r\\n            poolId,\\r\\n            sender,\\r\\n            recipient,\\r\\n            balances,\\r\\n            lastChangeBlock,\\r\\n            protocolSwapFeePercentage,\\r\\n            userData,\\r\\n            _onJoinPool,\\r\\n            _downscaleUpArray\\r\\n        );\\r\\n\\r\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\r\\n        // and we don't need to return anything here - it just silences compiler warnings.\\r\\n        return (bptOut, amountsIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\r\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\r\\n     *\\r\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\r\\n     * data, such as the protocol swap fee percentage and Pool balances.\\r\\n     *\\r\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\r\\n     * explicitly use eth_call instead of eth_sendTransaction.\\r\\n     */\\r\\n    function queryExit(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut) {\\r\\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\\r\\n\\r\\n        _queryAction(\\r\\n            poolId,\\r\\n            sender,\\r\\n            recipient,\\r\\n            balances,\\r\\n            lastChangeBlock,\\r\\n            protocolSwapFeePercentage,\\r\\n            userData,\\r\\n            _onExitPool,\\r\\n            _downscaleDownArray\\r\\n        );\\r\\n\\r\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\r\\n        // and we don't need to return anything here - it just silences compiler warnings.\\r\\n        return (bptIn, amountsOut);\\r\\n    }\\r\\n\\r\\n    // Internal hooks to be overridden by derived contracts - all token amounts (except BPT) in these interfaces are\\r\\n    // upscaled.\\r\\n\\r\\n    /**\\r\\n     * @dev Called when the Pool is joined for the first time; that is, when the BPT total supply is zero.\\r\\n     *\\r\\n     * Returns the amount of BPT to mint, and the token amounts the Pool will receive in return.\\r\\n     *\\r\\n     * Minted BPT will be sent to `recipient`, except for _MINIMUM_BPT, which will be deducted from this amount and sent\\r\\n     * to the zero address instead. This will cause that BPT to remain forever locked there, preventing total BTP from\\r\\n     * ever dropping below that value, and ensuring `_onInitializePool` can only be called once in the entire Pool's\\r\\n     * lifetime.\\r\\n     *\\r\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\r\\n     * be downscaled (rounding up) before being returned to the Vault.\\r\\n     */\\r\\n    function _onInitializePool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        bytes memory userData\\r\\n    ) internal virtual returns (uint256 bptAmountOut, uint256[] memory amountsIn);\\r\\n\\r\\n    /**\\r\\n     * @dev Called whenever the Pool is joined after the first initialization join (see `_onInitializePool`).\\r\\n     *\\r\\n     * Returns the amount of BPT to mint, the token amounts that the Pool will receive in return, and the number of\\r\\n     * tokens to pay in protocol swap fees.\\r\\n     *\\r\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\r\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\r\\n     *\\r\\n     * Minted BPT will be sent to `recipient`.\\r\\n     *\\r\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\r\\n     * be downscaled (rounding up) before being returned to the Vault.\\r\\n     *\\r\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onJoinPool`). These\\r\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\r\\n     */\\r\\n    function _onJoinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        returns (\\r\\n            uint256 bptAmountOut,\\r\\n            uint256[] memory amountsIn,\\r\\n            uint256[] memory dueProtocolFeeAmounts\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @dev Called whenever the Pool is exited.\\r\\n     *\\r\\n     * Returns the amount of BPT to burn, the token amounts for each Pool token that the Pool will grant in return, and\\r\\n     * the number of tokens to pay in protocol swap fees.\\r\\n     *\\r\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\r\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\r\\n     *\\r\\n     * BPT will be burnt from `sender`.\\r\\n     *\\r\\n     * The Pool will grant tokens to `recipient`. These amounts are considered upscaled and will be downscaled\\r\\n     * (rounding down) before being returned to the Vault.\\r\\n     *\\r\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onExitPool`). These\\r\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\r\\n     */\\r\\n    function _onExitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        returns (\\r\\n            uint256 bptAmountIn,\\r\\n            uint256[] memory amountsOut,\\r\\n            uint256[] memory dueProtocolFeeAmounts\\r\\n        );\\r\\n\\r\\n    // Internal functions\\r\\n\\r\\n    /**\\r\\n     * @dev Adds swap fee amount to `amount`, returning a higher value.\\r\\n     */\\r\\n    function _addSwapFeeAmount(uint256 amount) internal view returns (uint256) {\\r\\n        // This returns amount + fee amount, so we round up (favoring a higher fee amount).\\r\\n        return amount.divUp(_swapFeePercentage.complement());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts swap fee amount from `amount`, returning a lower value.\\r\\n     */\\r\\n    function _subtractSwapFeeAmount(uint256 amount) internal view returns (uint256) {\\r\\n        // This returns amount - fee amount, so we round up (favoring a higher fee amount).\\r\\n        uint256 feeAmount = amount.mulUp(_swapFeePercentage);\\r\\n        return amount.sub(feeAmount);\\r\\n    }\\r\\n\\r\\n    // Scaling\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\\r\\n     * it had 18 decimals.\\r\\n     */\\r\\n    function _computeScalingFactor(IERC20 token) private view returns (uint256) {\\r\\n        // Tokens that don't implement the `decimals` method are not supported.\\r\\n        uint256 tokenDecimals = ERC20(address(token)).decimals();\\r\\n\\r\\n        // Tokens with more than 18 decimals are not supported.\\r\\n        uint256 decimalsDifference = Math.sub(18, tokenDecimals);\\r\\n        return 10**decimalsDifference;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the scaling factor for one of the Pool's tokens. Reverts if `token` is not a token registered by the\\r\\n     * Pool.\\r\\n     */\\r\\n    function _scalingFactor(IERC20 token) internal view returns (uint256) {\\r\\n        // prettier-ignore\\r\\n        if (token == _token0) { return _scalingFactor0; }\\r\\n        else if (token == _token1) { return _scalingFactor1; }\\r\\n        else if (token == _token2) { return _scalingFactor2; }\\r\\n        else if (token == _token3) { return _scalingFactor3; }\\r\\n        else if (token == _token4) { return _scalingFactor4; }\\r\\n        else if (token == _token5) { return _scalingFactor5; }\\r\\n        else if (token == _token6) { return _scalingFactor6; }\\r\\n        else if (token == _token7) { return _scalingFactor7; }\\r\\n        else {\\r\\n            _revert(Errors.INVALID_TOKEN);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns all the scaling factors in the same order as the registered tokens. The Vault will always\\r\\n     * pass balances in this order when calling any of the Pool hooks\\r\\n     */\\r\\n    function _scalingFactors() internal view returns (uint256[] memory) {\\r\\n        uint256 totalTokens = _getTotalTokens();\\r\\n        uint256[] memory scalingFactors = new uint256[](totalTokens);\\r\\n\\r\\n        // prettier-ignore\\r\\n        {\\r\\n            if (totalTokens > 0) { scalingFactors[0] = _scalingFactor0; } else { return scalingFactors; }\\r\\n            if (totalTokens > 1) { scalingFactors[1] = _scalingFactor1; } else { return scalingFactors; }\\r\\n            if (totalTokens > 2) { scalingFactors[2] = _scalingFactor2; } else { return scalingFactors; }\\r\\n            if (totalTokens > 3) { scalingFactors[3] = _scalingFactor3; } else { return scalingFactors; }\\r\\n            if (totalTokens > 4) { scalingFactors[4] = _scalingFactor4; } else { return scalingFactors; }\\r\\n            if (totalTokens > 5) { scalingFactors[5] = _scalingFactor5; } else { return scalingFactors; }\\r\\n            if (totalTokens > 6) { scalingFactors[6] = _scalingFactor6; } else { return scalingFactors; }\\r\\n            if (totalTokens > 7) { scalingFactors[7] = _scalingFactor7; } else { return scalingFactors; }\\r\\n        }\\r\\n\\r\\n        return scalingFactors;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Applies `scalingFactor` to `amount`, resulting in a larger or equal value depending on whether it needed\\r\\n     * scaling or not.\\r\\n     */\\r\\n    function _upscale(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\r\\n        return Math.mul(amount, scalingFactor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as `_upscale`, but for an entire array. This function does not return anything, but instead *mutates*\\r\\n     * the `amounts` array.\\r\\n     */\\r\\n    function _upscaleArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal view {\\r\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\r\\n            amounts[i] = Math.mul(amounts[i], scalingFactors[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\r\\n     * whether it needed scaling or not. The result is rounded down.\\r\\n     */\\r\\n    function _downscaleDown(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\r\\n        return Math.divDown(amount, scalingFactor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as `_downscaleDown`, but for an entire array. This function does not return anything, but instead\\r\\n     * *mutates* the `amounts` array.\\r\\n     */\\r\\n    function _downscaleDownArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal view {\\r\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\r\\n            amounts[i] = Math.divDown(amounts[i], scalingFactors[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\r\\n     * whether it needed scaling or not. The result is rounded up.\\r\\n     */\\r\\n    function _downscaleUp(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\r\\n        return Math.divUp(amount, scalingFactor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as `_downscaleUp`, but for an entire array. This function does not return anything, but instead\\r\\n     * *mutates* the `amounts` array.\\r\\n     */\\r\\n    function _downscaleUpArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal view {\\r\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\r\\n            amounts[i] = Math.divUp(amounts[i], scalingFactors[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getAuthorizer() internal view override returns (IAuthorizer) {\\r\\n        // Access control management is delegated to the Vault's Authorizer. This lets Balancer Governance manage which\\r\\n        // accounts can call permissioned functions: for example, to perform emergency pauses.\\r\\n        // If the owner is delegated, then *all* permissioned functions, including `setSwapFeePercentage`, will be under\\r\\n        // Governance control.\\r\\n        return getVault().getAuthorizer();\\r\\n    }\\r\\n\\r\\n    function _queryAction(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData,\\r\\n        function(bytes32, address, address, uint256[] memory, uint256, uint256, bytes memory)\\r\\n            internal\\r\\n            returns (uint256, uint256[] memory, uint256[] memory) _action,\\r\\n        function(uint256[] memory, uint256[] memory) internal view _downscaleArray\\r\\n    ) private {\\r\\n        // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed\\r\\n        // explanation.\\r\\n\\r\\n        if (msg.sender != address(this)) {\\r\\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\\r\\n            // the preceding if statement will be executed instead.\\r\\n\\r\\n            // solhint-disable-next-line avoid-low-level-calls\\r\\n            (bool success, ) = address(this).call(msg.data);\\r\\n\\r\\n            // solhint-disable-next-line no-inline-assembly\\r\\n            assembly {\\r\\n                // This call should always revert to decode the bpt and token amounts from the revert reason\\r\\n                switch success\\r\\n                    case 0 {\\r\\n                        // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\\r\\n                        // stored there as we take full control of the execution and then immediately return.\\r\\n\\r\\n                        // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\\r\\n                        // there was another revert reason and we should forward it.\\r\\n                        returndatacopy(0, 0, 0x04)\\r\\n                        let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\\r\\n\\r\\n                        // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\\r\\n                        if eq(eq(error, 0x43adbafb00000000000000000000000000000000000000000000000000000000), 0) {\\r\\n                            returndatacopy(0, 0, returndatasize())\\r\\n                            revert(0, returndatasize())\\r\\n                        }\\r\\n\\r\\n                        // The returndata contains the signature, followed by the raw memory representation of the\\r\\n                        // `bptAmount` and `tokenAmounts` (array: length + data). We need to return an ABI-encoded\\r\\n                        // representation of these.\\r\\n                        // An ABI-encoded response will include one additional field to indicate the starting offset of\\r\\n                        // the `tokenAmounts` array. The `bptAmount` will be laid out in the first word of the\\r\\n                        // returndata.\\r\\n                        //\\r\\n                        // In returndata:\\r\\n                        // [ signature ][ bptAmount ][ tokenAmounts length ][ tokenAmounts values ]\\r\\n                        // [  4 bytes  ][  32 bytes ][       32 bytes      ][ (32 * length) bytes ]\\r\\n                        //\\r\\n                        // We now need to return (ABI-encoded values):\\r\\n                        // [ bptAmount ][ tokeAmounts offset ][ tokenAmounts length ][ tokenAmounts values ]\\r\\n                        // [  32 bytes ][       32 bytes     ][       32 bytes      ][ (32 * length) bytes ]\\r\\n\\r\\n                        // We copy 32 bytes for the `bptAmount` from returndata into memory.\\r\\n                        // Note that we skip the first 4 bytes for the error signature\\r\\n                        returndatacopy(0, 0x04, 32)\\r\\n\\r\\n                        // The offsets are 32-bytes long, so the array of `tokenAmounts` will start after\\r\\n                        // the initial 64 bytes.\\r\\n                        mstore(0x20, 64)\\r\\n\\r\\n                        // We now copy the raw memory array for the `tokenAmounts` from returndata into memory.\\r\\n                        // Since bpt amount and offset take up 64 bytes, we start copying at address 0x40. We also\\r\\n                        // skip the first 36 bytes from returndata, which correspond to the signature plus bpt amount.\\r\\n                        returndatacopy(0x40, 0x24, sub(returndatasize(), 36))\\r\\n\\r\\n                        // We finally return the ABI-encoded uint256 and the array, which has a total length equal to\\r\\n                        // the size of returndata, plus the 32 bytes of the offset but without the 4 bytes of the\\r\\n                        // error signature.\\r\\n                        return(0, add(returndatasize(), 28))\\r\\n                    }\\r\\n                    default {\\r\\n                        // This call should always revert, but we fail nonetheless if that didn't happen\\r\\n                        invalid()\\r\\n                    }\\r\\n            }\\r\\n        } else {\\r\\n            uint256[] memory scalingFactors = _scalingFactors();\\r\\n            _upscaleArray(balances, scalingFactors);\\r\\n\\r\\n            (uint256 bptAmount, uint256[] memory tokenAmounts, ) = _action(\\r\\n                poolId,\\r\\n                sender,\\r\\n                recipient,\\r\\n                balances,\\r\\n                lastChangeBlock,\\r\\n                protocolSwapFeePercentage,\\r\\n                userData\\r\\n            );\\r\\n\\r\\n            _downscaleArray(tokenAmounts, scalingFactors);\\r\\n\\r\\n            // solhint-disable-next-line no-inline-assembly\\r\\n            assembly {\\r\\n                // We will return a raw representation of `bptAmount` and `tokenAmounts` in memory, which is composed of\\r\\n                // a 32-byte uint256, followed by a 32-byte for the array length, and finally the 32-byte uint256 values\\r\\n                // Because revert expects a size in bytes, we multiply the array length (stored at `tokenAmounts`) by 32\\r\\n                let size := mul(mload(tokenAmounts), 32)\\r\\n\\r\\n                // We store the `bptAmount` in the previous slot to the `tokenAmounts` array. We can make sure there\\r\\n                // will be at least one available slot due to how the memory scratch space works.\\r\\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\\r\\n                let start := sub(tokenAmounts, 0x20)\\r\\n                mstore(start, bptAmount)\\r\\n\\r\\n                // We send one extra value for the error signature \\\"QueryError(uint256,uint256[])\\\" which is 0x43adbafb\\r\\n                // We use the previous slot to `bptAmount`.\\r\\n                mstore(sub(start, 0x20), 0x0000000000000000000000000000000000000000000000000000000043adbafb)\\r\\n                start := sub(start, 0x04)\\r\\n\\r\\n                // When copying from `tokenAmounts` into returndata, we copy the additional 68 bytes to also return\\r\\n                // the `bptAmount`, the array 's length, and the error signature.\\r\\n                revert(start, add(size, 68))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f5fb3a9cc6020e12bf17ecc6e16f3d5284a08881a21143a2f660494d3c4bd00\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BasePoolAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../lib/helpers/Authentication.sol\\\";\\r\\nimport \\\"../vault/interfaces/IAuthorizer.sol\\\";\\r\\n\\r\\nimport \\\"./BasePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Base authorization layer implementation for Pools.\\r\\n *\\r\\n * The owner account can call some of the permissioned functions - access control of the rest is delegated to the\\r\\n * Authorizer. Note that this owner is immutable: more sophisticated permission schemes, such as multiple ownership,\\r\\n * granular roles, etc., could be built on top of this by making the owner a smart contract.\\r\\n *\\r\\n * Access control of all other permissioned functions is delegated to an Authorizer. It is also possible to delegate\\r\\n * control of *all* permissioned functions to the Authorizer by setting the owner address to `_DELEGATE_OWNER`.\\r\\n */\\r\\nabstract contract BasePoolAuthorization is Authentication {\\r\\n    address private immutable _owner;\\r\\n\\r\\n    address private constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;\\r\\n\\r\\n    constructor(address owner) {\\r\\n        _owner = owner;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function getAuthorizer() external view returns (IAuthorizer) {\\r\\n        return _getAuthorizer();\\r\\n    }\\r\\n\\r\\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\\r\\n        if ((getOwner() != _DELEGATE_OWNER) && _isOwnerOnlyAction(actionId)) {\\r\\n            // Only the owner can perform \\\"owner only\\\" actions, unless the owner is delegated.\\r\\n            return msg.sender == getOwner();\\r\\n        } else {\\r\\n            // Non-owner actions are always processed via the Authorizer, as \\\"owner only\\\" ones are when delegated.\\r\\n            return _getAuthorizer().canPerform(actionId, account, address(this));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isOwnerOnlyAction(bytes32 actionId) private view returns (bool) {\\r\\n        // This implementation hardcodes the setSwapFeePercentage action identifier.\\r\\n        return actionId == getActionId(BasePool.setSwapFeePercentage.selector);\\r\\n    }\\r\\n\\r\\n    function _getAuthorizer() internal view virtual returns (IAuthorizer);\\r\\n}\\r\\n\",\"keccak256\":\"0xd8674e516c419e5390389da84de57b352810e9e0d72a48550d49e3c04758637b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/factories/BasePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../../vault/interfaces/IVault.sol\\\";\\r\\nimport \\\"../../vault/interfaces/IBasePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Base contract for Pool factories.\\r\\n *\\r\\n * Pools are deployed from factories to allow third parties to reason about them. Unknown Pools may have arbitrary\\r\\n * logic: being able to assert that a Pool's behavior follows certain rules (those imposed by the contracts created by\\r\\n * the factory) is very powerful.\\r\\n */\\r\\nabstract contract BasePoolFactory {\\r\\n    IVault private immutable _vault;\\r\\n    mapping(address => bool) private _isPoolFromFactory;\\r\\n\\r\\n    event PoolCreated(address indexed pool);\\r\\n\\r\\n    constructor(IVault vault) {\\r\\n        _vault = vault;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Vault's address.\\r\\n     */\\r\\n    function getVault() public view returns (IVault) {\\r\\n        return _vault;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `pool` was created by this factory.\\r\\n     */\\r\\n    function isPoolFromFactory(address pool) external view returns (bool) {\\r\\n        return _isPoolFromFactory[pool];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers a new created pool.\\r\\n     *\\r\\n     * Emits a `PoolCreated` event.\\r\\n     */\\r\\n    function _register(address pool) internal {\\r\\n        _isPoolFromFactory[pool] = true;\\r\\n        emit PoolCreated(pool);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9262011a2a205dab88999abb234b788b73052aaf5e048130e9274b91ab0bf24a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/factories/FactoryWidePauseWindow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @dev Utility to create Pool factories for Pools that use the `TemporarilyPausable` contract.\\r\\n *\\r\\n * By calling `TemporarilyPausable`'s constructor with the result of `getPauseConfiguration`, all Pools created by this\\r\\n * factory will share the same Pause Window end time, after which both old and new Pools will not be pausable.\\r\\n */\\r\\ncontract FactoryWidePauseWindow {\\r\\n    // This contract relies on timestamps in a similar way as `TemporarilyPausable` does - the same caveats apply.\\r\\n    // solhint-disable not-rely-on-time\\r\\n\\r\\n    uint256 private constant _INITIAL_PAUSE_WINDOW_DURATION = 90 days;\\r\\n    uint256 private constant _BUFFER_PERIOD_DURATION = 30 days;\\r\\n\\r\\n    // Time when the pause window for all created Pools expires, and the pause window duration of new Pools becomes\\r\\n    // zero.\\r\\n    uint256 private immutable _poolsPauseWindowEndTime;\\r\\n\\r\\n    constructor() {\\r\\n        _poolsPauseWindowEndTime = block.timestamp + _INITIAL_PAUSE_WINDOW_DURATION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current `TemporarilyPausable` configuration that will be applied to Pools created by this\\r\\n     * factory.\\r\\n     *\\r\\n     * `pauseWindowDuration` will decrease over time until it reaches zero, at which point both it and\\r\\n     * `bufferPeriodDuration` will be zero forever, meaning deployed Pools will not be pausable.\\r\\n     */\\r\\n    function getPauseConfiguration() public view returns (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        if (currentTime < _poolsPauseWindowEndTime) {\\r\\n            // The buffer period is always the same since its duration is related to how much time is needed to respond\\r\\n            // to a potential emergency. The Pause Window duration however decreases as the end time approaches.\\r\\n\\r\\n            pauseWindowDuration = _poolsPauseWindowEndTime - currentTime; // No need for checked arithmetic.\\r\\n            bufferPeriodDuration = _BUFFER_PERIOD_DURATION;\\r\\n        } else {\\r\\n            // After the end time, newly created Pools have no Pause Window, nor Buffer Period (since they are not\\r\\n            // pausable in the first place).\\r\\n\\r\\n            pauseWindowDuration = 0;\\r\\n            bufferPeriodDuration = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xddfc0f3fdda8238ff896867c3ce02f03ccad9667bc17693c1be1b618f3446e7d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stable/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../../lib/math/Math.sol\\\";\\r\\nimport \\\"../../lib/math/FixedPoint.sol\\\";\\r\\n\\r\\n// This is a contract to emulate file-level functions. Convert to a library\\r\\n// after the migration to solc v0.7.1.\\r\\n\\r\\n// solhint-disable private-vars-leading-underscore\\r\\n// solhint-disable var-name-mixedcase\\r\\n\\r\\ncontract StableMath {\\r\\n    using FixedPoint for uint256;\\r\\n\\r\\n    uint256 internal constant _MIN_AMP = 1e18;\\r\\n    uint256 internal constant _MAX_AMP = 5000 * (1e18);\\r\\n\\r\\n    uint256 internal constant _MAX_STABLE_TOKENS = 5;\\r\\n\\r\\n    // Computes the invariant given the current balances, using the Newton-Raphson approximation.\\r\\n    // The amplification parameter equals: A n^(n-1)\\r\\n    function _calculateInvariant(uint256 amplificationParameter, uint256[] memory balances)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        /**********************************************************************************************\\r\\n        // invariant                                                                                 //\\r\\n        // D = invariant                                                  D^(n+1)                    //\\r\\n        // A = amplification coefficient      A  n^n S + D = A D n^n + -----------                   //\\r\\n        // S = sum of balances                                             n^n P                     //\\r\\n        // P = product of balances                                                                   //\\r\\n        // n = number of tokens                                                                      //\\r\\n        *********x************************************************************************************/\\r\\n\\r\\n        // We round up the invariant.\\r\\n\\r\\n        uint256 sum = 0;\\r\\n        uint256 numTokens = balances.length;\\r\\n        for (uint256 i = 0; i < numTokens; i++) {\\r\\n            sum = sum.add(balances[i]);\\r\\n        }\\r\\n        if (sum == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 prevInvariant = 0;\\r\\n        uint256 invariant = sum;\\r\\n        uint256 ampTimesTotal = Math.mul(amplificationParameter, numTokens);\\r\\n\\r\\n        for (uint256 i = 0; i < 255; i++) {\\r\\n            uint256 P_D = Math.mul(numTokens, balances[0]);\\r\\n            for (uint256 j = 1; j < numTokens; j++) {\\r\\n                P_D = Math.divUp(Math.mul(Math.mul(P_D, balances[j]), numTokens), invariant);\\r\\n            }\\r\\n            prevInvariant = invariant;\\r\\n            invariant = Math.divUp(\\r\\n                Math.mul(Math.mul(numTokens, invariant), invariant).add(Math.mul(Math.mul(ampTimesTotal, sum), P_D)),\\r\\n                Math.mul(numTokens.add(1), invariant).add(Math.mul(ampTimesTotal.sub(1), P_D))\\r\\n            );\\r\\n\\r\\n            if (invariant > prevInvariant) {\\r\\n                if (invariant.sub(prevInvariant) <= 1) {\\r\\n                    break;\\r\\n                }\\r\\n            } else if (prevInvariant.sub(invariant) <= 1) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return invariant;\\r\\n    }\\r\\n\\r\\n    // Computes how many tokens can be taken out of a pool if `tokenAmountIn` are sent, given the current balances.\\r\\n    // The amplification parameter equals: A n^(n-1)\\r\\n    function _calcOutGivenIn(\\r\\n        uint256 amplificationParameter,\\r\\n        uint256[] memory balances,\\r\\n        uint256 tokenIndexIn,\\r\\n        uint256 tokenIndexOut,\\r\\n        uint256 tokenAmountIn\\r\\n    ) internal pure returns (uint256) {\\r\\n        /**************************************************************************************************************\\r\\n        // outGivenIn token x for y - polynomial equation to solve                                                   //\\r\\n        // ay = amount out to calculate                                                                              //\\r\\n        // by = balance token out                                                                                    //\\r\\n        // y = by - ay (finalBalanceOut)                                                                             //\\r\\n        // D = invariant                                               D                     D^(n+1)                 //\\r\\n        // A = amplification coefficient               y^2 + ( S - ----------  - D) * y -  ------------- = 0         //\\r\\n        // n = number of tokens                                    (A * n^n)               A * n^2n * P              //\\r\\n        // S = sum of final balances but y                                                                           //\\r\\n        // P = product of final balances but y                                                                       //\\r\\n        **************************************************************************************************************/\\r\\n\\r\\n        // Amount out, so we round down overall.\\r\\n\\r\\n        uint256 invariant = _calculateInvariant(amplificationParameter, balances);\\r\\n\\r\\n        balances[tokenIndexIn] = balances[tokenIndexIn].add(tokenAmountIn);\\r\\n\\r\\n        uint256 finalBalanceOut = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\r\\n            amplificationParameter,\\r\\n            balances,\\r\\n            invariant,\\r\\n            tokenIndexOut\\r\\n        );\\r\\n\\r\\n        balances[tokenIndexIn] = balances[tokenIndexIn].sub(tokenAmountIn);\\r\\n\\r\\n        return balances[tokenIndexOut].sub(finalBalanceOut).sub(1);\\r\\n    }\\r\\n\\r\\n    // Computes how many tokens must be sent to a pool if `tokenAmountOut` are sent given the\\r\\n    // current balances, using the Newton-Raphson approximation.\\r\\n    // The amplification parameter equals: A n^(n-1)\\r\\n    function _calcInGivenOut(\\r\\n        uint256 amplificationParameter,\\r\\n        uint256[] memory balances,\\r\\n        uint256 tokenIndexIn,\\r\\n        uint256 tokenIndexOut,\\r\\n        uint256 tokenAmountOut\\r\\n    ) internal pure returns (uint256) {\\r\\n        /**************************************************************************************************************\\r\\n        // inGivenOut token x for y - polynomial equation to solve                                                   //\\r\\n        // ax = amount in to calculate                                                                               //\\r\\n        // bx = balance token in                                                                                     //\\r\\n        // x = bx + ax (finalBalanceIn)                                                                              //\\r\\n        // D = invariant                                                D                     D^(n+1)                //\\r\\n        // A = amplification coefficient               x^2 + ( S - ----------  - D) * x -  ------------- = 0         //\\r\\n        // n = number of tokens                                     (A * n^n)               A * n^2n * P             //\\r\\n        // S = sum of final balances but x                                                                           //\\r\\n        // P = product of final balances but x                                                                       //\\r\\n        **************************************************************************************************************/\\r\\n\\r\\n        // Amount in, so we round up overall.\\r\\n\\r\\n        uint256 invariant = _calculateInvariant(amplificationParameter, balances);\\r\\n\\r\\n        balances[tokenIndexOut] = balances[tokenIndexOut].sub(tokenAmountOut);\\r\\n\\r\\n        uint256 finalBalanceIn = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\r\\n            amplificationParameter,\\r\\n            balances,\\r\\n            invariant,\\r\\n            tokenIndexIn\\r\\n        );\\r\\n\\r\\n        balances[tokenIndexOut] = balances[tokenIndexOut].add(tokenAmountOut);\\r\\n\\r\\n        return finalBalanceIn.sub(balances[tokenIndexIn]).add(1);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    TODO: document it correctly\\r\\n    Flow of calculations:\\r\\n    amountsTokenIn -> amountsInProportional ->\\r\\n    amountsInPercentageExcess -> amountsInAfterFee -> newInvariant -> amountBPTOut\\r\\n    TODO: remove equations below and save them to Notion documentation\\r\\n    amountInPercentageExcess = 1 - amountInProportional/amountIn (if amountIn>amountInProportional)\\r\\n    amountInAfterFee = amountIn * (1 - swapFeePercentage * amountInPercentageExcess)\\r\\n    amountInAfterFee = amountIn - fee amount\\r\\n    fee amount = (amountIn - amountInProportional) * swapFeePercentage\\r\\n    amountInAfterFee = amountIn - (amountIn - amountInProportional) * swapFeePercentage\\r\\n    amountInAfterFee = amountIn * (1 - (1 - amountInProportional/amountIn) * swapFeePercentage)\\r\\n    amountInAfterFee = amountIn * (1 - amountInPercentageExcess * swapFeePercentage)\\r\\n    */\\r\\n    function _calcBptOutGivenExactTokensIn(\\r\\n        uint256 amp,\\r\\n        uint256[] memory balances,\\r\\n        uint256[] memory amountsIn,\\r\\n        uint256 bptTotalSupply,\\r\\n        uint256 swapFeePercentage\\r\\n    ) internal pure returns (uint256) {\\r\\n        // BPT out, so we round down overall.\\r\\n\\r\\n        // Get current invariant\\r\\n        uint256 currentInvariant = _calculateInvariant(amp, balances);\\r\\n\\r\\n        // First loop calculates the sum of all token balances, which will be used to calculate\\r\\n        // the current weights of each token, relative to this sum\\r\\n        uint256 sumBalances = 0;\\r\\n        for (uint256 i = 0; i < balances.length; i++) {\\r\\n            sumBalances = sumBalances.add(balances[i]);\\r\\n        }\\r\\n\\r\\n        // Calculate the weighted balance ratio without considering fees\\r\\n        uint256[] memory tokenBalanceRatiosWithoutFee = new uint256[](amountsIn.length);\\r\\n        // The weighted sum of token balance ratios without fee\\r\\n        uint256 weightedBalanceRatio = 0;\\r\\n        for (uint256 i = 0; i < balances.length; i++) {\\r\\n            uint256 currentWeight = balances[i].divDown(sumBalances);\\r\\n            tokenBalanceRatiosWithoutFee[i] = balances[i].add(amountsIn[i]).divDown(balances[i]);\\r\\n            weightedBalanceRatio = weightedBalanceRatio.add(tokenBalanceRatiosWithoutFee[i].mulDown(currentWeight));\\r\\n        }\\r\\n\\r\\n        // Second loop calculates new amounts in, taking into account the fee on the percentage excess\\r\\n        uint256[] memory newBalances = new uint256[](balances.length);\\r\\n        for (uint256 i = 0; i < balances.length; i++) {\\r\\n            // Percentage of the amount supplied that will be implicitly swapped for other tokens in the pool\\r\\n            uint256 tokenBalancePercentageExcess;\\r\\n            // Some tokens might have amounts supplied in excess of a 'balanced' join: these are identified if\\r\\n            // the token's balance ratio without fee is larger than the weighted balance ratio, and swap fees are\\r\\n            // charged on the swap amount\\r\\n            if (weightedBalanceRatio >= tokenBalanceRatiosWithoutFee[i]) {\\r\\n                tokenBalancePercentageExcess = 0;\\r\\n            } else {\\r\\n                tokenBalancePercentageExcess = tokenBalanceRatiosWithoutFee[i].sub(weightedBalanceRatio).divUp(\\r\\n                    tokenBalanceRatiosWithoutFee[i].sub(FixedPoint.ONE)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            uint256 swapFeeExcess = swapFeePercentage.mulUp(tokenBalancePercentageExcess);\\r\\n\\r\\n            uint256 amountInAfterFee = amountsIn[i].mulDown(swapFeeExcess.complement());\\r\\n\\r\\n            newBalances[i] = balances[i].add(amountInAfterFee);\\r\\n        }\\r\\n\\r\\n        // get the new invariant, taking swap fees into account\\r\\n        uint256 newInvariant = _calculateInvariant(amp, newBalances);\\r\\n\\r\\n        // return amountBPTOut\\r\\n        return bptTotalSupply.mulDown(newInvariant.divDown(currentInvariant).sub(FixedPoint.ONE));\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    TODO: document it correctly\\r\\n    Flow of calculations:\\r\\n    amountBPTOut -> newInvariant -> (amountInProportional, amountInAfterFee) ->\\r\\n    amountInPercentageExcess -> amountIn\\r\\n    */\\r\\n    function _calcTokenInGivenExactBptOut(\\r\\n        uint256 amp,\\r\\n        uint256[] memory balances,\\r\\n        uint256 tokenIndex,\\r\\n        uint256 bptAmountOut,\\r\\n        uint256 bptTotalSupply,\\r\\n        uint256 swapFeePercentage\\r\\n    ) internal pure returns (uint256) {\\r\\n        // Token in, so we round up overall.\\r\\n\\r\\n        // Get the current invariant\\r\\n        uint256 currentInvariant = _calculateInvariant(amp, balances);\\r\\n\\r\\n        // Calculate new invariant\\r\\n        uint256 newInvariant = bptTotalSupply.add(bptAmountOut).divUp(bptTotalSupply).mulUp(currentInvariant);\\r\\n\\r\\n        // First calculate the sum of all token balances, which will be used to calculate\\r\\n        // the current weight of each token\\r\\n        uint256 sumBalances = 0;\\r\\n        for (uint256 i = 0; i < balances.length; i++) {\\r\\n            sumBalances = sumBalances.add(balances[i]);\\r\\n        }\\r\\n\\r\\n        // get amountInAfterFee\\r\\n        uint256 newBalanceTokenIndex = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\r\\n            amp,\\r\\n            balances,\\r\\n            newInvariant,\\r\\n            tokenIndex\\r\\n        );\\r\\n        uint256 amountInAfterFee = newBalanceTokenIndex.sub(balances[tokenIndex]);\\r\\n\\r\\n        // Get tokenBalancePercentageExcess\\r\\n        uint256 currentWeight = balances[tokenIndex].divDown(sumBalances);\\r\\n        uint256 tokenBalancePercentageExcess = currentWeight.complement();\\r\\n\\r\\n        uint256 swapFeeExcess = swapFeePercentage.mulUp(tokenBalancePercentageExcess);\\r\\n\\r\\n        return amountInAfterFee.divUp(swapFeeExcess.complement());\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Flow of calculations:\\r\\n    amountsTokenOut -> amountsOutProportional ->\\r\\n    amountOutPercentageExcess -> amountOutBeforeFee -> newInvariant -> amountBPTIn\\r\\n    */\\r\\n    function _calcBptInGivenExactTokensOut(\\r\\n        uint256 amp,\\r\\n        uint256[] memory balances,\\r\\n        uint256[] memory amountsOut,\\r\\n        uint256 bptTotalSupply,\\r\\n        uint256 swapFee\\r\\n    ) internal pure returns (uint256) {\\r\\n        // BPT in, so we round up overall.\\r\\n\\r\\n        // Get the current invariant\\r\\n        uint256 currentInvariant = _calculateInvariant(amp, balances);\\r\\n\\r\\n        // First loop calculates the sum of all token balances, which will be used to calculate\\r\\n        // the current weights of each token relative to this sum\\r\\n        uint256 sumBalances = 0;\\r\\n        for (uint256 i = 0; i < balances.length; i++) {\\r\\n            sumBalances = sumBalances.add(balances[i]);\\r\\n        }\\r\\n\\r\\n        // Calculate the weighted balance ratio without considering fees\\r\\n        uint256[] memory tokenBalanceRatiosWithoutFee = new uint256[](amountsOut.length);\\r\\n        uint256 weightedBalanceRatio = 0;\\r\\n        for (uint256 i = 0; i < balances.length; i++) {\\r\\n            uint256 currentWeight = balances[i].divUp(sumBalances);\\r\\n            tokenBalanceRatiosWithoutFee[i] = balances[i].sub(amountsOut[i]).divUp(balances[i]);\\r\\n            weightedBalanceRatio = weightedBalanceRatio.add(tokenBalanceRatiosWithoutFee[i].mulUp(currentWeight));\\r\\n        }\\r\\n\\r\\n        // Second loop calculates new amounts in, taking into account the fee on the percentage excess\\r\\n        uint256[] memory newBalances = new uint256[](balances.length);\\r\\n        for (uint256 i = 0; i < balances.length; i++) {\\r\\n            uint256 tokenBalancePercentageExcess;\\r\\n            // Compare each tokenBalanceRatioWithoutFee to the total weighted ratio (weightedBalanceRatio), and\\r\\n            // decrease the fee by the excess amount\\r\\n            if (weightedBalanceRatio <= tokenBalanceRatiosWithoutFee[i]) {\\r\\n                tokenBalancePercentageExcess = 0;\\r\\n            } else {\\r\\n                tokenBalancePercentageExcess = weightedBalanceRatio.sub(tokenBalanceRatiosWithoutFee[i]).divUp(\\r\\n                    tokenBalanceRatiosWithoutFee[i].complement()\\r\\n                );\\r\\n            }\\r\\n\\r\\n            uint256 swapFeeExcess = swapFee.mulUp(tokenBalancePercentageExcess);\\r\\n\\r\\n            uint256 amountOutBeforeFee = amountsOut[i].divUp(swapFeeExcess.complement());\\r\\n\\r\\n            newBalances[i] = balances[i].sub(amountOutBeforeFee);\\r\\n        }\\r\\n\\r\\n        // get the new invariant, taking into account swap fees\\r\\n        uint256 newInvariant = _calculateInvariant(amp, newBalances);\\r\\n\\r\\n        // return amountBPTIn\\r\\n        return bptTotalSupply.mulUp(newInvariant.divUp(currentInvariant).complement());\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    TODO: document it correctly\\r\\n    Flow of calculations:\\r\\n    amountBPTin -> newInvariant -> (amountOutProportional, amountOutBeforeFee) ->\\r\\n    amountOutPercentageExcess -> amountOut\\r\\n    */\\r\\n    function _calcTokenOutGivenExactBptIn(\\r\\n        uint256 amp,\\r\\n        uint256[] memory balances,\\r\\n        uint256 tokenIndex,\\r\\n        uint256 bptAmountIn,\\r\\n        uint256 bptTotalSupply,\\r\\n        uint256 swapFeePercentage\\r\\n    ) internal pure returns (uint256) {\\r\\n        // Get the current invariant\\r\\n        uint256 currentInvariant = _calculateInvariant(amp, balances);\\r\\n        // Calculate the new invariant\\r\\n        uint256 newInvariant = bptTotalSupply.sub(bptAmountIn).divUp(bptTotalSupply).mulUp(currentInvariant);\\r\\n\\r\\n        // First calculate the sum of all token balances, which will be used to calculate\\r\\n        // the current weight of each token\\r\\n        uint256 sumBalances = 0;\\r\\n        for (uint256 i = 0; i < balances.length; i++) {\\r\\n            sumBalances = sumBalances.add(balances[i]);\\r\\n        }\\r\\n\\r\\n        // get amountOutBeforeFee\\r\\n        uint256 newBalanceTokenIndex = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\r\\n            amp,\\r\\n            balances,\\r\\n            newInvariant,\\r\\n            tokenIndex\\r\\n        );\\r\\n        uint256 amountOutBeforeFee = balances[tokenIndex].sub(newBalanceTokenIndex);\\r\\n\\r\\n        // Calculate tokenBalancePercentageExcess\\r\\n        uint256 currentWeight = balances[tokenIndex].divDown(sumBalances);\\r\\n        uint256 tokenBalancePercentageExcess = currentWeight.complement();\\r\\n\\r\\n        uint256 swapFeeExcess = swapFeePercentage.mulUp(tokenBalancePercentageExcess);\\r\\n\\r\\n        return amountOutBeforeFee.mulDown(swapFeeExcess.complement());\\r\\n    }\\r\\n\\r\\n    function _calcTokensOutGivenExactBptIn(\\r\\n        uint256[] memory balances,\\r\\n        uint256 bptAmountIn,\\r\\n        uint256 bptTotalSupply\\r\\n    ) internal pure returns (uint256[] memory) {\\r\\n        /**********************************************************************************************\\r\\n        // exactBPTInForTokensOut                                                                    //\\r\\n        // (per token)                                                                               //\\r\\n        // aO = tokenAmountOut             /        bptIn         \\\\                                  //\\r\\n        // b = tokenBalance      a0 = b * | ---------------------  |                                 //\\r\\n        // bptIn = bptAmountIn             \\\\     bptTotalSupply    /                                 //\\r\\n        // bpt = bptTotalSupply                                                                      //\\r\\n        **********************************************************************************************/\\r\\n\\r\\n        // Since we're computing an amount out, we round down overall. This means rounding down on both the\\r\\n        // multiplication and division.\\r\\n\\r\\n        uint256 bptRatio = bptAmountIn.divDown(bptTotalSupply);\\r\\n\\r\\n        uint256[] memory amountsOut = new uint256[](balances.length);\\r\\n        for (uint256 i = 0; i < balances.length; i++) {\\r\\n            amountsOut[i] = balances[i].mulDown(bptRatio);\\r\\n        }\\r\\n\\r\\n        return amountsOut;\\r\\n    }\\r\\n\\r\\n    // The amplification parameter equals: A n^(n-1)\\r\\n    function _calcDueTokenProtocolSwapFeeAmount(\\r\\n        uint256 amplificationParameter,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastInvariant,\\r\\n        uint256 tokenIndex,\\r\\n        uint256 protocolSwapFeePercentage\\r\\n    ) internal pure returns (uint256) {\\r\\n        /**************************************************************************************************************\\r\\n        // oneTokenSwapFee - polynomial equation to solve                                                            //\\r\\n        // af = fee amount to calculate in one token                                                                 //\\r\\n        // bf = balance of fee token                                                                                 //\\r\\n        // f = bf - af (finalBalanceFeeToken)                                                                        //\\r\\n        // D = old invariant                                            D                     D^(n+1)                //\\r\\n        // A = amplification coefficient               f^2 + ( S - ----------  - D) * f -  ------------- = 0         //\\r\\n        // n = number of tokens                                    (A * n^n)               A * n^2n * P              //\\r\\n        // S = sum of final balances but f                                                                           //\\r\\n        // P = product of final balances but f                                                                       //\\r\\n        **************************************************************************************************************/\\r\\n\\r\\n        // Protocol swap fee amount, so we round down overall.\\r\\n\\r\\n        uint256 finalBalanceFeeToken = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\r\\n            amplificationParameter,\\r\\n            balances,\\r\\n            lastInvariant,\\r\\n            tokenIndex\\r\\n        );\\r\\n\\r\\n        // Result is rounded down\\r\\n        uint256 accumulatedTokenSwapFees = balances[tokenIndex] > finalBalanceFeeToken\\r\\n            ? balances[tokenIndex].sub(finalBalanceFeeToken)\\r\\n            : 0;\\r\\n        return accumulatedTokenSwapFees.mulDown(protocolSwapFeePercentage).divDown(FixedPoint.ONE);\\r\\n    }\\r\\n\\r\\n    // Private functions\\r\\n\\r\\n    // This function calculates the balance of a given token (tokenIndex)\\r\\n    // given all the other balances and the invariant\\r\\n    function _getTokenBalanceGivenInvariantAndAllOtherBalances(\\r\\n        uint256 amplificationParameter,\\r\\n        uint256[] memory balances,\\r\\n        uint256 invariant,\\r\\n        uint256 tokenIndex\\r\\n    ) private pure returns (uint256) {\\r\\n        // Rounds result up overall\\r\\n\\r\\n        uint256 ampTimesTotal = Math.mul(amplificationParameter, balances.length);\\r\\n        uint256 sum = balances[0];\\r\\n        uint256 P_D = Math.mul(balances.length, balances[0]);\\r\\n        for (uint256 j = 1; j < balances.length; j++) {\\r\\n            P_D = Math.divDown(Math.mul(Math.mul(P_D, balances[j]), balances.length), invariant);\\r\\n            sum = sum.add(balances[j]);\\r\\n        }\\r\\n        sum = sum.sub(balances[tokenIndex]);\\r\\n\\r\\n        uint256 c = Math.divUp(Math.mul(invariant, invariant), ampTimesTotal);\\r\\n        // We remove the balance fromm c by multiplying it\\r\\n        c = c.mulUp(balances[tokenIndex]).divUp(P_D);\\r\\n\\r\\n        uint256 b = sum.add(invariant.divDown(ampTimesTotal));\\r\\n\\r\\n        // We iterate to find the balance\\r\\n        uint256 prevTokenBalance = 0;\\r\\n        // We multiply the first iteration outside the loop with the invariant to set the value of the\\r\\n        // initial approximation.\\r\\n        uint256 tokenBalance = invariant.mulUp(invariant).add(c).divUp(invariant.add(b));\\r\\n\\r\\n        for (uint256 i = 0; i < 255; i++) {\\r\\n            prevTokenBalance = tokenBalance;\\r\\n\\r\\n            tokenBalance = tokenBalance.mulUp(tokenBalance).add(c).divUp(\\r\\n                Math.mul(tokenBalance, 2).add(b).sub(invariant)\\r\\n            );\\r\\n\\r\\n            if (tokenBalance > prevTokenBalance) {\\r\\n                if (tokenBalance.sub(prevTokenBalance) <= 1) {\\r\\n                    break;\\r\\n                }\\r\\n            } else if (prevTokenBalance.sub(tokenBalance) <= 1) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return tokenBalance;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x909454fad2e5582fdaba83a86d2087b003b7c410344236045b628ae6dd8f194d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stable/StablePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../../lib/math/FixedPoint.sol\\\";\\r\\nimport \\\"../../lib/helpers/InputHelpers.sol\\\";\\r\\n\\r\\nimport \\\"../BaseGeneralPool.sol\\\";\\r\\n\\r\\nimport \\\"./StableMath.sol\\\";\\r\\nimport \\\"./StablePoolUserDataHelpers.sol\\\";\\r\\n\\r\\ncontract StablePool is BaseGeneralPool, StableMath {\\r\\n    using FixedPoint for uint256;\\r\\n    using StablePoolUserDataHelpers for bytes;\\r\\n\\r\\n    uint256 private immutable _amplificationParameter;\\r\\n\\r\\n    uint256 private _lastInvariant;\\r\\n\\r\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT }\\r\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT }\\r\\n\\r\\n    constructor(\\r\\n        IVault vault,\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        IERC20[] memory tokens,\\r\\n        uint256 amplificationParameter,\\r\\n        uint256 swapFeePercentage,\\r\\n        uint256 pauseWindowDuration,\\r\\n        uint256 bufferPeriodDuration,\\r\\n        address owner\\r\\n    )\\r\\n        BaseGeneralPool(\\r\\n            vault,\\r\\n            name,\\r\\n            symbol,\\r\\n            tokens,\\r\\n            swapFeePercentage,\\r\\n            pauseWindowDuration,\\r\\n            bufferPeriodDuration,\\r\\n            owner\\r\\n        )\\r\\n    {\\r\\n        _require(amplificationParameter >= _MIN_AMP, Errors.MIN_AMP);\\r\\n        _require(amplificationParameter <= _MAX_AMP, Errors.MAX_AMP);\\r\\n\\r\\n        _require(tokens.length <= _MAX_STABLE_TOKENS, Errors.MAX_STABLE_TOKENS);\\r\\n\\r\\n        _amplificationParameter = amplificationParameter;\\r\\n    }\\r\\n\\r\\n    function getAmplificationParameter() external view returns (uint256) {\\r\\n        return _amplificationParameter;\\r\\n    }\\r\\n\\r\\n    // Base Pool handlers\\r\\n\\r\\n    // Swap\\r\\n\\r\\n    function _onSwapGivenIn(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) internal view virtual override whenNotPaused returns (uint256) {\\r\\n        uint256 amountOut = StableMath._calcOutGivenIn(\\r\\n            _amplificationParameter,\\r\\n            balances,\\r\\n            indexIn,\\r\\n            indexOut,\\r\\n            swapRequest.amount\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function _onSwapGivenOut(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) internal view virtual override whenNotPaused returns (uint256) {\\r\\n        uint256 amountIn = StableMath._calcInGivenOut(\\r\\n            _amplificationParameter,\\r\\n            balances,\\r\\n            indexIn,\\r\\n            indexOut,\\r\\n            swapRequest.amount\\r\\n        );\\r\\n\\r\\n        return amountIn;\\r\\n    }\\r\\n\\r\\n    // Initialize\\r\\n\\r\\n    function _onInitializePool(\\r\\n        bytes32,\\r\\n        address,\\r\\n        address,\\r\\n        bytes memory userData\\r\\n    ) internal virtual override whenNotPaused returns (uint256, uint256[] memory) {\\r\\n        StablePool.JoinKind kind = userData.joinKind();\\r\\n        _require(kind == StablePool.JoinKind.INIT, Errors.UNINITIALIZED);\\r\\n\\r\\n        uint256[] memory amountsIn = userData.initialAmountsIn();\\r\\n        InputHelpers.ensureInputLengthMatch(amountsIn.length, _getTotalTokens());\\r\\n        _upscaleArray(amountsIn, _scalingFactors());\\r\\n\\r\\n        uint256 invariantAfterJoin = StableMath._calculateInvariant(_amplificationParameter, amountsIn);\\r\\n        uint256 bptAmountOut = invariantAfterJoin;\\r\\n\\r\\n        _lastInvariant = invariantAfterJoin;\\r\\n\\r\\n        return (bptAmountOut, amountsIn);\\r\\n    }\\r\\n\\r\\n    // Join\\r\\n\\r\\n    function _onJoinPool(\\r\\n        bytes32,\\r\\n        address,\\r\\n        address,\\r\\n        uint256[] memory balances,\\r\\n        uint256,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n        whenNotPaused\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256[] memory,\\r\\n            uint256[] memory\\r\\n        )\\r\\n    {\\r\\n        // Due protocol swap fee amounts are computed by measuring the growth of the invariant between the previous join\\r\\n        // or exit event and now - the invariant's growth is due exclusively to swap fees. This avoids spending gas to\\r\\n        // calculate the fee amounts during each individual swap.\\r\\n        uint256[] memory dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(\\r\\n            balances,\\r\\n            _lastInvariant,\\r\\n            protocolSwapFeePercentage\\r\\n        );\\r\\n\\r\\n        // Update the balances by subtracting the protocol fee amounts that will be charged by the Vault once this\\r\\n        // function returns.\\r\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\r\\n            balances[i] = balances[i].sub(dueProtocolFeeAmounts[i]);\\r\\n        }\\r\\n\\r\\n        (uint256 bptAmountOut, uint256[] memory amountsIn) = _doJoin(balances, userData);\\r\\n\\r\\n        // Update the invariant with the balances the Pool will have after the join, in order to compute the\\r\\n        // protocol swap fee amounts due in future joins and exits.\\r\\n        _lastInvariant = _invariantAfterJoin(balances, amountsIn);\\r\\n\\r\\n        return (bptAmountOut, amountsIn, dueProtocolFeeAmounts);\\r\\n    }\\r\\n\\r\\n    function _doJoin(uint256[] memory balances, bytes memory userData)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256, uint256[] memory)\\r\\n    {\\r\\n        JoinKind kind = userData.joinKind();\\r\\n\\r\\n        if (kind == JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\\r\\n            return _joinExactTokensInForBPTOut(balances, userData);\\r\\n        } else if (kind == JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {\\r\\n            return _joinTokenInForExactBPTOut(balances, userData);\\r\\n        } else {\\r\\n            _revert(Errors.UNHANDLED_JOIN_KIND);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _joinExactTokensInForBPTOut(uint256[] memory balances, bytes memory userData)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256, uint256[] memory)\\r\\n    {\\r\\n        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData.exactTokensInForBptOut();\\r\\n        InputHelpers.ensureInputLengthMatch(_getTotalTokens(), amountsIn.length);\\r\\n        _upscaleArray(amountsIn, _scalingFactors());\\r\\n\\r\\n        uint256 bptAmountOut = StableMath._calcBptOutGivenExactTokensIn(\\r\\n            _amplificationParameter,\\r\\n            balances,\\r\\n            amountsIn,\\r\\n            totalSupply(),\\r\\n            _swapFeePercentage\\r\\n        );\\r\\n\\r\\n        _require(bptAmountOut >= minBPTAmountOut, Errors.BPT_OUT_MIN_AMOUNT);\\r\\n\\r\\n        return (bptAmountOut, amountsIn);\\r\\n    }\\r\\n\\r\\n    function _joinTokenInForExactBPTOut(uint256[] memory balances, bytes memory userData)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256, uint256[] memory)\\r\\n    {\\r\\n        (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();\\r\\n\\r\\n        uint256 amountIn = StableMath._calcTokenInGivenExactBptOut(\\r\\n            _amplificationParameter,\\r\\n            balances,\\r\\n            tokenIndex,\\r\\n            bptAmountOut,\\r\\n            totalSupply(),\\r\\n            _swapFeePercentage\\r\\n        );\\r\\n\\r\\n        // We are joining with a single token, so initialize downscaledAmountsIn with zeros, and\\r\\n        // only set downscaledAmountsIn[tokenIndex]\\r\\n        uint256[] memory downscaledAmountsIn = new uint256[](_getTotalTokens());\\r\\n        downscaledAmountsIn[tokenIndex] = amountIn;\\r\\n\\r\\n        return (bptAmountOut, downscaledAmountsIn);\\r\\n    }\\r\\n\\r\\n    // Exit\\r\\n\\r\\n    function _onExitPool(\\r\\n        bytes32,\\r\\n        address,\\r\\n        address,\\r\\n        uint256[] memory balances,\\r\\n        uint256,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n        returns (\\r\\n            uint256 bptAmountIn,\\r\\n            uint256[] memory amountsOut,\\r\\n            uint256[] memory dueProtocolFeeAmounts\\r\\n        )\\r\\n    {\\r\\n        if (_isNotPaused()) {\\r\\n            // Due protocol swap fee amounts are computed by measuring the growth of the invariant between the previous\\r\\n            // join or exit event and now - the invariant's growth is due exclusively to swap fees. This avoids\\r\\n            // spending gas calculating fee amounts during each individual swap\\r\\n            dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(balances, _lastInvariant, protocolSwapFeePercentage);\\r\\n\\r\\n            // Update the balances by subtracting the protocol fee amounts that will be charged by the Vault once this\\r\\n            // function returns.\\r\\n            for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\r\\n                balances[i] = balances[i].sub(dueProtocolFeeAmounts[i]);\\r\\n            }\\r\\n        } else {\\r\\n            // To avoid extra calculations, swap protocol fee amounts are not charged when the contract is paused.\\r\\n            dueProtocolFeeAmounts = new uint256[](_getTotalTokens());\\r\\n        }\\r\\n\\r\\n        (bptAmountIn, amountsOut) = _doExit(balances, userData);\\r\\n\\r\\n        // Update the invariant with the balances the Pool will have after the exit, in order to compute the\\r\\n        // protocol swap fee amounts due in future joins and exits.\\r\\n        _lastInvariant = _invariantAfterExit(balances, amountsOut);\\r\\n\\r\\n        return (bptAmountIn, amountsOut, dueProtocolFeeAmounts);\\r\\n    }\\r\\n\\r\\n    function _doExit(uint256[] memory balances, bytes memory userData)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256, uint256[] memory)\\r\\n    {\\r\\n        ExitKind kind = userData.exitKind();\\r\\n\\r\\n        if (kind == ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {\\r\\n            return _exitExactBPTInForTokenOut(balances, userData);\\r\\n        } else if (kind == ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT) {\\r\\n            return _exitExactBPTInForTokensOut(balances, userData);\\r\\n        } else {\\r\\n            // ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT\\r\\n            return _exitBPTInForExactTokensOut(balances, userData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _exitExactBPTInForTokenOut(uint256[] memory balances, bytes memory userData)\\r\\n        private\\r\\n        view\\r\\n        whenNotPaused\\r\\n        returns (uint256, uint256[] memory)\\r\\n    {\\r\\n        // This exit function is disabled if the contract is paused.\\r\\n        uint256 totalTokens = _getTotalTokens();\\r\\n        (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();\\r\\n        _require(tokenIndex < totalTokens, Errors.OUT_OF_BOUNDS);\\r\\n\\r\\n        // We exit in a single token, so initialize amountsOut with zeros and only set amountsOut[tokenIndex]\\r\\n        uint256[] memory amountsOut = new uint256[](totalTokens);\\r\\n\\r\\n        amountsOut[tokenIndex] = StableMath._calcTokenOutGivenExactBptIn(\\r\\n            _amplificationParameter,\\r\\n            balances,\\r\\n            tokenIndex,\\r\\n            bptAmountIn,\\r\\n            totalSupply(),\\r\\n            _swapFeePercentage\\r\\n        );\\r\\n\\r\\n        return (bptAmountIn, amountsOut);\\r\\n    }\\r\\n\\r\\n    function _exitExactBPTInForTokensOut(uint256[] memory balances, bytes memory userData)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256, uint256[] memory)\\r\\n    {\\r\\n        // This exit function is the only one that is not disabled if the contract is paused: it remains unrestricted\\r\\n        // in an attempt to provide users with a mechanism to retrieve their tokens in case of an emergency.\\r\\n        // This particular exit function is the only one that remains available because it is the simplest one, and\\r\\n        // therefore the one with the lowest likelihood of errors.\\r\\n        uint256 bptAmountIn = userData.exactBptInForTokensOut();\\r\\n\\r\\n        uint256[] memory amountsOut = StableMath._calcTokensOutGivenExactBptIn(balances, bptAmountIn, totalSupply());\\r\\n\\r\\n        return (bptAmountIn, amountsOut);\\r\\n    }\\r\\n\\r\\n    function _exitBPTInForExactTokensOut(uint256[] memory balances, bytes memory userData)\\r\\n        private\\r\\n        view\\r\\n        whenNotPaused\\r\\n        returns (uint256, uint256[] memory)\\r\\n    {\\r\\n        // This exit function is disabled if the contract is paused.\\r\\n\\r\\n        (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();\\r\\n        InputHelpers.ensureInputLengthMatch(amountsOut.length, _getTotalTokens());\\r\\n\\r\\n        _upscaleArray(amountsOut, _scalingFactors());\\r\\n\\r\\n        uint256 bptAmountIn = StableMath._calcBptInGivenExactTokensOut(\\r\\n            _amplificationParameter,\\r\\n            balances,\\r\\n            amountsOut,\\r\\n            totalSupply(),\\r\\n            _swapFeePercentage\\r\\n        );\\r\\n\\r\\n        _require(bptAmountIn <= maxBPTAmountIn, Errors.BPT_IN_MAX_AMOUNT);\\r\\n\\r\\n        return (bptAmountIn, amountsOut);\\r\\n    }\\r\\n\\r\\n    // Helpers\\r\\n\\r\\n    function _getDueProtocolFeeAmounts(\\r\\n        uint256[] memory balances,\\r\\n        uint256 previousInvariant,\\r\\n        uint256 protocolSwapFeePercentage\\r\\n    ) private view returns (uint256[] memory) {\\r\\n        // Initialize with zeros\\r\\n        uint256[] memory dueProtocolFeeAmounts = new uint256[](_getTotalTokens());\\r\\n\\r\\n        // Early exit if there is no protocol swap fee\\r\\n        if (protocolSwapFeePercentage == 0) {\\r\\n            return dueProtocolFeeAmounts;\\r\\n        }\\r\\n\\r\\n        // Instead of paying the protocol swap fee in all tokens proportionally, we will pay it in a single one. This\\r\\n        // will reduce gas costs for single asset joins and exits, as at most only two Pool balances will change (the\\r\\n        // token joined/exited, and the token in which fees will be paid).\\r\\n\\r\\n        // The protocol fee is charged using the token with the highest balance in the pool.\\r\\n        uint256 chosenTokenIndex = 0;\\r\\n        uint256 maxBalance = balances[0];\\r\\n        for (uint256 i = 1; i < _getTotalTokens(); ++i) {\\r\\n            uint256 currentBalance = balances[i];\\r\\n            if (currentBalance > maxBalance) {\\r\\n                chosenTokenIndex = i;\\r\\n                maxBalance = currentBalance;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Set the fee amount to pay in the selected token\\r\\n        dueProtocolFeeAmounts[chosenTokenIndex] = StableMath._calcDueTokenProtocolSwapFeeAmount(\\r\\n            _amplificationParameter,\\r\\n            balances,\\r\\n            previousInvariant,\\r\\n            chosenTokenIndex,\\r\\n            protocolSwapFeePercentage\\r\\n        );\\r\\n\\r\\n        return dueProtocolFeeAmounts;\\r\\n    }\\r\\n\\r\\n    function _invariantAfterJoin(uint256[] memory balances, uint256[] memory amountsIn) private view returns (uint256) {\\r\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\r\\n            balances[i] = balances[i].add(amountsIn[i]);\\r\\n        }\\r\\n\\r\\n        return StableMath._calculateInvariant(_amplificationParameter, balances);\\r\\n    }\\r\\n\\r\\n    function _invariantAfterExit(uint256[] memory balances, uint256[] memory amountsOut)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\\r\\n            balances[i] = balances[i].sub(amountsOut[i]);\\r\\n        }\\r\\n\\r\\n        return StableMath._calculateInvariant(_amplificationParameter, balances);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the appreciation of one BPT relative to the\\r\\n     * underlying tokens. This starts at 1 when the pool is created and grows over time\\r\\n     */\\r\\n    function getRate() public view returns (uint256) {\\r\\n        (, uint256[] memory balances, ) = getVault().getPoolTokens(getPoolId());\\r\\n        return StableMath._calculateInvariant(_amplificationParameter, balances).divDown(totalSupply());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xecd2cd8bdd20ff333fa238949370709db939096725b2050c00029ded12323626\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stable/StablePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../../vault/interfaces/IVault.sol\\\";\\r\\n\\r\\nimport \\\"../factories/BasePoolFactory.sol\\\";\\r\\nimport \\\"../factories/FactoryWidePauseWindow.sol\\\";\\r\\n\\r\\nimport \\\"./StablePool.sol\\\";\\r\\n\\r\\ncontract StablePoolFactory is BasePoolFactory, FactoryWidePauseWindow {\\r\\n    constructor(IVault vault) BasePoolFactory(vault) {\\r\\n        // solhint-disable-previous-line no-empty-blocks\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deploys a new `StablePool`.\\r\\n     */\\r\\n    function create(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        IERC20[] memory tokens,\\r\\n        uint256 amplificationParameter,\\r\\n        uint256 swapFeePercentage,\\r\\n        address owner\\r\\n    ) external returns (address) {\\r\\n        (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) = getPauseConfiguration();\\r\\n\\r\\n        address pool = address(\\r\\n            new StablePool(\\r\\n                getVault(),\\r\\n                name,\\r\\n                symbol,\\r\\n                tokens,\\r\\n                amplificationParameter,\\r\\n                swapFeePercentage,\\r\\n                pauseWindowDuration,\\r\\n                bufferPeriodDuration,\\r\\n                owner\\r\\n            )\\r\\n        );\\r\\n        _register(pool);\\r\\n        return pool;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x798fefe8445575f957e865315b460bbe0bb72875ee2e1cb6b2c583dabecdf341\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stable/StablePoolUserDataHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./StablePool.sol\\\";\\r\\n\\r\\nlibrary StablePoolUserDataHelpers {\\r\\n    function joinKind(bytes memory self) internal pure returns (StablePool.JoinKind) {\\r\\n        return abi.decode(self, (StablePool.JoinKind));\\r\\n    }\\r\\n\\r\\n    function exitKind(bytes memory self) internal pure returns (StablePool.ExitKind) {\\r\\n        return abi.decode(self, (StablePool.ExitKind));\\r\\n    }\\r\\n\\r\\n    function initialAmountsIn(bytes memory self) internal pure returns (uint256[] memory amountsIn) {\\r\\n        (, amountsIn) = abi.decode(self, (StablePool.JoinKind, uint256[]));\\r\\n    }\\r\\n\\r\\n    function exactTokensInForBptOut(bytes memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[] memory amountsIn, uint256 minBPTAmountIn)\\r\\n    {\\r\\n        (, amountsIn, minBPTAmountIn) = abi.decode(self, (StablePool.JoinKind, uint256[], uint256));\\r\\n    }\\r\\n\\r\\n    function tokenInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut, uint256 tokenIndex) {\\r\\n        (, bptAmountOut, tokenIndex) = abi.decode(self, (StablePool.JoinKind, uint256, uint256));\\r\\n    }\\r\\n\\r\\n    function exactBptInForTokenOut(bytes memory self) internal pure returns (uint256 bptAmountIn, uint256 tokenIndex) {\\r\\n        (, bptAmountIn, tokenIndex) = abi.decode(self, (StablePool.ExitKind, uint256, uint256));\\r\\n    }\\r\\n\\r\\n    function exactBptInForTokensOut(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\r\\n        (, bptAmountIn) = abi.decode(self, (StablePool.ExitKind, uint256));\\r\\n    }\\r\\n\\r\\n    function bptInForExactTokensOut(bytes memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[] memory amountsOut, uint256 maxBPTAmountIn)\\r\\n    {\\r\\n        (, amountsOut, maxBPTAmountIn) = abi.decode(self, (StablePool.ExitKind, uint256[], uint256));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcf9abd3cb4e159004a69206d7116a92c08b7bd3f815a7bcaef0cad4fc13d3bea\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/ProtocolFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../lib/openzeppelin/IERC20.sol\\\";\\r\\nimport \\\"../lib/helpers/InputHelpers.sol\\\";\\r\\nimport \\\"../lib/helpers/Authentication.sol\\\";\\r\\nimport \\\"../lib/openzeppelin/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../lib/openzeppelin/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IVault.sol\\\";\\r\\nimport \\\"./interfaces/IAuthorizer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the\\r\\n * Vault performs to reduce its overall bytecode size.\\r\\n *\\r\\n * The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are\\r\\n * sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated\\r\\n * to the Vault's own authorizer.\\r\\n */\\r\\ncontract ProtocolFeesCollector is Authentication, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Absolute maximum fee percentages (1e18 = 100%, 1e16 = 1%).\\r\\n    uint256 private constant _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE = 50e16; // 50%\\r\\n    uint256 private constant _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE = 1e16; // 1%\\r\\n\\r\\n    IVault public immutable vault;\\r\\n\\r\\n    // All fee percentages are 18-decimal fixed point numbers.\\r\\n\\r\\n    // The swap fee is charged whenever a swap occurs, as a percentage of the fee charged by the Pool. These are not\\r\\n    // actually charged on each individual swap: the `Vault` relies on the Pools being honest and reporting fees due\\r\\n    // when users join and exit them.\\r\\n    uint256 private _swapFeePercentage;\\r\\n\\r\\n    // The flash loan fee is charged whenever a flash loan occurs, as a percentage of the tokens lent.\\r\\n    uint256 private _flashLoanFeePercentage;\\r\\n\\r\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\r\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\r\\n\\r\\n    constructor(IVault _vault)\\r\\n        // The ProtocolFeesCollector is a singleton, so it simply uses its own address to disambiguate action\\r\\n        // identifiers.\\r\\n        Authentication(bytes32(uint256(address(this))))\\r\\n    {\\r\\n        vault = _vault;\\r\\n    }\\r\\n\\r\\n    function withdrawCollectedFees(\\r\\n        IERC20[] calldata tokens,\\r\\n        uint256[] calldata amounts,\\r\\n        address recipient\\r\\n    ) external nonReentrant authenticate {\\r\\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\\r\\n\\r\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\r\\n            IERC20 token = tokens[i];\\r\\n            uint256 amount = amounts[i];\\r\\n            token.safeTransfer(recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {\\r\\n        _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH);\\r\\n        _swapFeePercentage = newSwapFeePercentage;\\r\\n        emit SwapFeePercentageChanged(newSwapFeePercentage);\\r\\n    }\\r\\n\\r\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {\\r\\n        _require(\\r\\n            newFlashLoanFeePercentage <= _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE,\\r\\n            Errors.FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH\\r\\n        );\\r\\n        _flashLoanFeePercentage = newFlashLoanFeePercentage;\\r\\n        emit FlashLoanFeePercentageChanged(newFlashLoanFeePercentage);\\r\\n    }\\r\\n\\r\\n    function getSwapFeePercentage() external view returns (uint256) {\\r\\n        return _swapFeePercentage;\\r\\n    }\\r\\n\\r\\n    function getFlashLoanFeePercentage() external view returns (uint256) {\\r\\n        return _flashLoanFeePercentage;\\r\\n    }\\r\\n\\r\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {\\r\\n        feeAmounts = new uint256[](tokens.length);\\r\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\r\\n            feeAmounts[i] = tokens[i].balanceOf(address(this));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAuthorizer() external view returns (IAuthorizer) {\\r\\n        return _getAuthorizer();\\r\\n    }\\r\\n\\r\\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\\r\\n        return _getAuthorizer().canPerform(actionId, account, address(this));\\r\\n    }\\r\\n\\r\\n    function _getAuthorizer() internal view returns (IAuthorizer) {\\r\\n        return vault.getAuthorizer();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x07ad2d6031a731509b5aac8269838f73f3fc2fc2fca268ec9170aaf7f204514b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\r\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\r\\n * types.\\r\\n *\\r\\n * This concept is unrelated to a Pool's Asset Managers.\\r\\n */\\r\\ninterface IAsset {\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n}\\r\\n\",\"keccak256\":\"0x70a12f1a3a4d6315ac7d1c6ba128b11f88e89519931d954dc4c901098aa67692\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\ninterface IAuthorizer {\\r\\n    /**\\r\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\r\\n     */\\r\\n    function canPerform(\\r\\n        bytes32 actionId,\\r\\n        address account,\\r\\n        address where\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x1ec7a717ee759cde3ac4f13ab32cf3d82cd199c15598b68a8f4d4cb522c9bcdb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IVault.sol\\\";\\r\\nimport \\\"./IPoolSwapStructs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\r\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\r\\n * either IGeneralPool or IMinimalSwapInfoPool\\r\\n */\\r\\ninterface IBasePool is IPoolSwapStructs {\\r\\n    /**\\r\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\r\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\r\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\r\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\r\\n     *\\r\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\r\\n     *\\r\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\r\\n     * designated to receive any benefits (typically pool shares). `currentBalances` contains the total balances\\r\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\r\\n     *\\r\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\r\\n     * balance.\\r\\n     *\\r\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\r\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\r\\n     *\\r\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\r\\n     * state-changing operations, such as minting pool shares.\\r\\n     */\\r\\n    function onJoinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\r\\n\\r\\n    /**\\r\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\r\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\r\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\r\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\r\\n     * `protocolSwapFeePercentage`.\\r\\n     *\\r\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\r\\n     *\\r\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\r\\n     * to which the Vault will send the proceeds. `currentBalances` contains the total token balances for each token\\r\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\r\\n     *\\r\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\r\\n     * balance.\\r\\n     *\\r\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\r\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\r\\n     *\\r\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\r\\n     * state-changing operations, such as burning pool shares.\\r\\n     */\\r\\n    function onExitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x30a3e650ed43fbe5f1f0c7d069d1c0f46cb249f4c950bcba14495712f4914de6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\r\\n\\r\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\r\\n\\r\\ninterface IFlashLoanRecipient {\\r\\n    /**\\r\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\r\\n     *\\r\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\r\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\r\\n     * Vault, or else the entire flash loan will revert.\\r\\n     *\\r\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\r\\n     */\\r\\n    function receiveFlashLoan(\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory amounts,\\r\\n        uint256[] memory feeAmounts,\\r\\n        bytes memory userData\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xfb62a601ba0a4dd514c74a151aeeb31086f56d58d82bc150858bc61058a5a066\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IBasePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev IPools with the General specialization setting should implement this interface.\\r\\n *\\r\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\r\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\r\\n * grant to the pool in a 'given out' swap.\\r\\n *\\r\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\r\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\r\\n * indeed the Vault.\\r\\n */\\r\\ninterface IGeneralPool is IBasePool {\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) external returns (uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x5fbf07c49e2e8799ae7f88069f291f7b9a1b2b61271598e53f94df61bf223e43\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./IVault.sol\\\";\\r\\n\\r\\ninterface IPoolSwapStructs {\\r\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\r\\n    // IMinimalSwapInfoPool.\\r\\n    //\\r\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\r\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\r\\n    //\\r\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\r\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\r\\n    //\\r\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\r\\n    // some Pools.\\r\\n    //\\r\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\r\\n    // one Pool.\\r\\n    //\\r\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\r\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\r\\n    //    balance.\\r\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\r\\n    //\\r\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\r\\n    // where the Pool sends the outgoing tokens.\\r\\n    //\\r\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\r\\n    struct SwapRequest {\\r\\n        IVault.SwapKind kind;\\r\\n        IERC20 tokenIn;\\r\\n        IERC20 tokenOut;\\r\\n        uint256 amount;\\r\\n        // Misc data\\r\\n        bytes32 poolId;\\r\\n        uint256 lastChangeBlock;\\r\\n        address from;\\r\\n        address to;\\r\\n        bytes userData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa28e98ddf985ac5571a0a94dc79f6769b93a13dc3bf1b1b9302e6e6c46e9a686\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./IAsset.sol\\\";\\r\\nimport \\\"./IAuthorizer.sol\\\";\\r\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\r\\nimport \\\"../ProtocolFeesCollector.sol\\\";\\r\\n\\r\\nimport \\\"../../lib/helpers/ISignaturesValidator.sol\\\";\\r\\nimport \\\"../../lib/helpers/ITemporarilyPausable.sol\\\";\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\r\\n * don't override one of these declarations.\\r\\n */\\r\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\\r\\n    // Generalities about the Vault:\\r\\n    //\\r\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\r\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\r\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\r\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\r\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\r\\n    //\\r\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\r\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\r\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\r\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\r\\n    //\\r\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\r\\n\\r\\n    // Authorizer\\r\\n    //\\r\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\r\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\r\\n    // can perform a given action.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Vault's Authorizer.\\r\\n     */\\r\\n    function getAuthorizer() external view returns (IAuthorizer);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\r\\n     *\\r\\n     * Emits an `AuthorizerChanged` event.\\r\\n     */\\r\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\r\\n     */\\r\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\r\\n\\r\\n    // Relayers\\r\\n    //\\r\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\r\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\r\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\r\\n    // this power, two things must occur:\\r\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\r\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\r\\n    //    functions.\\r\\n    //  - Each user must approve the relayer to act on their behalf.\\r\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\r\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\r\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\r\\n     */\\r\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\r\\n     *\\r\\n     * Emits a `RelayerApprovalChanged` event.\\r\\n     */\\r\\n    function setRelayerApproval(\\r\\n        address sender,\\r\\n        address relayer,\\r\\n        bool approved\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\r\\n     */\\r\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\r\\n\\r\\n    // Internal Balance\\r\\n    //\\r\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\r\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\r\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\r\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\r\\n    //\\r\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\r\\n    // operations of different kinds, with different senders and recipients, at once.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\r\\n     */\\r\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\r\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\r\\n     * it lets integrators reuse a user's Vault allowance.\\r\\n     *\\r\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     */\\r\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\r\\n     without manual WETH wrapping or unwrapping.\\r\\n     */\\r\\n    struct UserBalanceOp {\\r\\n        UserBalanceOpKind kind;\\r\\n        IAsset asset;\\r\\n        uint256 amount;\\r\\n        address sender;\\r\\n        address payable recipient;\\r\\n    }\\r\\n\\r\\n    // There are four possible operations in `manageUserBalance`:\\r\\n    //\\r\\n    // - DEPOSIT_INTERNAL\\r\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\r\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\r\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\r\\n    // relevant for relayers).\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - WITHDRAW_INTERNAL\\r\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\r\\n    // it to the recipient as ETH.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_INTERNAL\\r\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_EXTERNAL\\r\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\r\\n    // relayers, as it lets them reuse a user's Vault allowance.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `ExternalBalanceTransfer` event.\\r\\n\\r\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\r\\n     * interacting with Pools using Internal Balance.\\r\\n     *\\r\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\r\\n     * address.\\r\\n     */\\r\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\r\\n     */\\r\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\r\\n\\r\\n    // Pools\\r\\n    //\\r\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\r\\n    // functionality:\\r\\n    //\\r\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\r\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\r\\n    // which increase with the number of registered tokens.\\r\\n    //\\r\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\r\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\r\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\r\\n    // independent of the number of registered tokens.\\r\\n    //\\r\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\r\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\r\\n\\r\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\r\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\r\\n     * changed.\\r\\n     *\\r\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\r\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\r\\n     *\\r\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\r\\n     * multiple Pools may share the same contract.\\r\\n     *\\r\\n     * Emits a `PoolRegistered` event.\\r\\n     */\\r\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\r\\n     */\\r\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's contract address and specialization setting.\\r\\n     */\\r\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\r\\n\\r\\n    /**\\r\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\r\\n     *\\r\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\r\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\r\\n     *\\r\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\r\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\r\\n     * ascending order.\\r\\n     *\\r\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\r\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\r\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\r\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\r\\n     * Asset Manager should not be made lightly.\\r\\n     *\\r\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\r\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\r\\n     * different Asset Manager.\\r\\n     *\\r\\n     * Emits a `TokensRegistered` event.\\r\\n     */\\r\\n    function registerTokens(\\r\\n        bytes32 poolId,\\r\\n        IERC20[] memory tokens,\\r\\n        address[] memory assetManagers\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\r\\n     */\\r\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\r\\n\\r\\n    /**\\r\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\r\\n     *\\r\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\r\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\r\\n     * must be deregistered in the same `deregisterTokens` call.\\r\\n     *\\r\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\r\\n     *\\r\\n     * Emits a `TokensDeregistered` event.\\r\\n     */\\r\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\r\\n     */\\r\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns detailed information for a Pool's registered token.\\r\\n     *\\r\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\r\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\r\\n     * equals the sum of `cash` and `managed`.\\r\\n     *\\r\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\r\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\r\\n     *\\r\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\r\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\r\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\r\\n     * change for this purpose, and will update `lastChangeBlock`.\\r\\n     *\\r\\n     * `assetManager` is the Pool's token Asset Manager.\\r\\n     */\\r\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 cash,\\r\\n            uint256 managed,\\r\\n            uint256 lastChangeBlock,\\r\\n            address assetManager\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\r\\n     * the tokens' `balances` changed.\\r\\n     *\\r\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\r\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\r\\n     *\\r\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\r\\n     * order as passed to `registerTokens`.\\r\\n     *\\r\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\r\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\r\\n     * instead.\\r\\n     */\\r\\n    function getPoolTokens(bytes32 poolId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            IERC20[] memory tokens,\\r\\n            uint256[] memory balances,\\r\\n            uint256 lastChangeBlock\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\r\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\r\\n     * Pool shares.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\r\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\r\\n     * these maximums.\\r\\n     *\\r\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\r\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\r\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\r\\n     * back to the caller (not the sender, which is important for relayers).\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\r\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\r\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\r\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\r\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\r\\n     * directly to the Pool's contract, as is `recipient`.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function joinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        JoinPoolRequest memory request\\r\\n    ) external payable;\\r\\n\\r\\n    struct JoinPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] maxAmountsIn;\\r\\n        bytes userData;\\r\\n        bool fromInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\r\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\r\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\r\\n     * `getPoolTokenInfo`).\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\r\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\r\\n     * it just enforces these minimums.\\r\\n     *\\r\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\r\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\r\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\r\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\r\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\r\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\r\\n     * do so will trigger a revert.\\r\\n     *\\r\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\r\\n     * `tokens` array. This array must match the Pool's registered tokens.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\r\\n     * passed directly to the Pool's contract.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function exitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        ExitPoolRequest memory request\\r\\n    ) external;\\r\\n\\r\\n    struct ExitPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] minAmountsOut;\\r\\n        bytes userData;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\r\\n     */\\r\\n    event PoolBalanceChanged(\\r\\n        bytes32 indexed poolId,\\r\\n        address indexed liquidityProvider,\\r\\n        IERC20[] tokens,\\r\\n        int256[] deltas,\\r\\n        uint256[] protocolFeeAmounts\\r\\n    );\\r\\n\\r\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\r\\n\\r\\n    // Swaps\\r\\n    //\\r\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\r\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\r\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\r\\n    //\\r\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\r\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\r\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\r\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\r\\n    // individual swaps.\\r\\n    //\\r\\n    // There are two swap kinds:\\r\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\r\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\r\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\r\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\r\\n    //\\r\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\r\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\r\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\r\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\r\\n    // the final intended token.\\r\\n    //\\r\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\r\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\r\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\r\\n    // much less gas than they would otherwise.\\r\\n    //\\r\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\r\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\r\\n    // updating the Pool's internal accounting).\\r\\n    //\\r\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\r\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\r\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\r\\n    //\\r\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\r\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\r\\n    //\\r\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\r\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\r\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\r\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\r\\n    //\\r\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\r\\n\\r\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a swap with a single Pool.\\r\\n     *\\r\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\r\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\r\\n     *\\r\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\r\\n     * sent to the Pool, which must be less than or equal to `limit`.\\r\\n     *\\r\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\r\\n     *\\r\\n     * Emits a `Swap` event.\\r\\n     */\\r\\n    function swap(\\r\\n        SingleSwap memory singleSwap,\\r\\n        FundManagement memory funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\r\\n     * the `kind` value.\\r\\n     *\\r\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\r\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct SingleSwap {\\r\\n        bytes32 poolId;\\r\\n        SwapKind kind;\\r\\n        IAsset assetIn;\\r\\n        IAsset assetOut;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\r\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\r\\n     *\\r\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\r\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\r\\n     * the same index in the `assets` array.\\r\\n     *\\r\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\r\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\r\\n     * `amountOut` depending on the swap kind.\\r\\n     *\\r\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\r\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\r\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\r\\n     *\\r\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\r\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\r\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\r\\n     * or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\r\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\r\\n     *\\r\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\r\\n     * equivalent `swap` call.\\r\\n     *\\r\\n     * Emits `Swap` events.\\r\\n     */\\r\\n    function batchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        IAsset[] memory assets,\\r\\n        FundManagement memory funds,\\r\\n        int256[] memory limits,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (int256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\r\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\r\\n     *\\r\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\r\\n     * from the previous swap, depending on the swap kind.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct BatchSwapStep {\\r\\n        bytes32 poolId;\\r\\n        uint256 assetInIndex;\\r\\n        uint256 assetOutIndex;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\r\\n     */\\r\\n    event Swap(\\r\\n        bytes32 indexed poolId,\\r\\n        IERC20 indexed tokenIn,\\r\\n        IERC20 indexed tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\r\\n     * `recipient` account.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\r\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\r\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\r\\n     * `joinPool`.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\r\\n     * transferred. This matches the behavior of `exitPool`.\\r\\n     *\\r\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\r\\n     * revert.\\r\\n     */\\r\\n    struct FundManagement {\\r\\n        address sender;\\r\\n        bool fromInternalBalance;\\r\\n        address payable recipient;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\r\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\r\\n     *\\r\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\r\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\r\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\r\\n     *\\r\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\r\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\r\\n     * approve them for the Vault, or even know a user's address.\\r\\n     *\\r\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\r\\n     * eth_call instead of eth_sendTransaction.\\r\\n     */\\r\\n    function queryBatchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        IAsset[] memory assets,\\r\\n        FundManagement memory funds\\r\\n    ) external returns (int256[] memory assetDeltas);\\r\\n\\r\\n    // Flash Loans\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\r\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\r\\n     *\\r\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\r\\n     * for each token contract. `tokens` must be sorted in ascending order.\\r\\n     *\\r\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\r\\n     * `receiveFlashLoan` call.\\r\\n     *\\r\\n     * Emits `FlashLoan` events.\\r\\n     */\\r\\n    function flashLoan(\\r\\n        IFlashLoanRecipient recipient,\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory userData\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\r\\n     */\\r\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\r\\n\\r\\n    // Asset Management\\r\\n    //\\r\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\r\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\r\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\r\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\r\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\r\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\r\\n    //\\r\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\r\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\r\\n    //\\r\\n    // This concept is unrelated to the IAsset interface.\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\r\\n     *\\r\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\r\\n     * operations of different kinds, with different Pools and tokens, at once.\\r\\n     *\\r\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\r\\n     */\\r\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\r\\n\\r\\n    struct PoolBalanceOp {\\r\\n        PoolBalanceOpKind kind;\\r\\n        bytes32 poolId;\\r\\n        IERC20 token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\r\\n     *\\r\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\r\\n     *\\r\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\r\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\r\\n     */\\r\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\r\\n     */\\r\\n    event PoolBalanceManaged(\\r\\n        bytes32 indexed poolId,\\r\\n        address indexed assetManager,\\r\\n        IERC20 indexed token,\\r\\n        int256 cashDelta,\\r\\n        int256 managedDelta\\r\\n    );\\r\\n\\r\\n    // Protocol Fees\\r\\n    //\\r\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\r\\n    // permissioned accounts.\\r\\n    //\\r\\n    // There are two kinds of protocol fees:\\r\\n    //\\r\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\r\\n    //\\r\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\r\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\r\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\r\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\r\\n    // exiting a Pool in debt without first paying their share.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current protocol fee module.\\r\\n     */\\r\\n    function getProtocolFeesCollector() external view returns (ProtocolFeesCollector);\\r\\n\\r\\n    /**\\r\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\r\\n     * error in some part of the system.\\r\\n     *\\r\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\r\\n     *\\r\\n     * While the contract is paused, the following features are disabled:\\r\\n     * - depositing and transferring internal balance\\r\\n     * - transferring external balance (using the Vault's allowance)\\r\\n     * - swaps\\r\\n     * - joining Pools\\r\\n     * - Asset Manager interactions\\r\\n     *\\r\\n     * Internal Balance can still be withdrawn, and Pools exited.\\r\\n     */\\r\\n    function setPaused(bool paused) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Vault's WETH instance.\\r\\n     */\\r\\n    function WETH() external view returns (IWETH);\\r\\n    // solhint-disable-previous-line func-name-mixedcase\\r\\n}\\r\\n\",\"keccak256\":\"0xd184367705695002815ef202052d9a23b0c3506d8cad6d47b70c017c905a0a8e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\\r\\n * sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\\r\\n */\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x747daa8953d8104f49b3ab1d82921a09eb0efa6e011811964bf8b208d1f6253c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161529638038061529683398101604081905261002f9161004d565b60601b6001600160601b0319166080526276a700420160a05261007b565b60006020828403121561005e578081fd5b81516001600160a01b0381168114610074578182fd5b9392505050565b60805160601c60a0516151f16100a56000398060d652806101005250806101ea52506151f16000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c80632da47c4014620000575780636634b753146200007a5780637932c7f314620000a05780638d928af814620000c6575b600080fd5b62000061620000d0565b60405162000071929190620005f4565b60405180910390f35b620000916200008b36600462000330565b6200013c565b60405162000071919062000522565b620000b7620000b136600462000356565b62000167565b60405162000071919062000501565b620000b7620001e8565b600080427f00000000000000000000000000000000000000000000000000000000000000008110156200012e57807f000000000000000000000000000000000000000000000000000000000000000003925062278d00915062000137565b60009250600091505b509091565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b600080600062000176620000d0565b91509150600062000186620001e8565b8a8a8a8a8a88888c6040516200019c9062000283565b620001b0999897969594939291906200052d565b604051809103906000f080158015620001cd573d6000803e3d6000fd5b509050620001db816200020c565b9998505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b73ffffffffffffffffffffffffffffffffffffffff811660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f83a48fbcfc991335314e74d0496aab6a1987e992ddc85dddbcc4d6dd6ef2e9fc9190a250565b614b52806200066a83390190565b80356200029e8162000643565b92915050565b600082601f830112620002b5578081fd5b813567ffffffffffffffff811115620002cc578182fd5b620002ff60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162000602565b91508082528360208285010111156200031757600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121562000342578081fd5b81356200034f8162000643565b9392505050565b60008060008060008060c087890312156200036f578182fd5b863567ffffffffffffffff8082111562000387578384fd5b620003958a838b01620002a4565b9750602091508189013581811115620003ac578485fd5b620003ba8b828c01620002a4565b975050604089013581811115620003cf578485fd5b8901601f81018b13620003e0578485fd5b803582811115620003ef578586fd5b83810292506200040184840162000602565b8181528481019083860185850187018f10156200041c578889fd5b8895505b838610156200044a57620004358f8262000291565b83526001959095019491860191860162000420565b509850505050606089013594505050608087013591506200046f8860a0890162000291565b90509295509295509295565b73ffffffffffffffffffffffffffffffffffffffff169052565b60008151808452815b81811015620004bc576020818501810151868301820152016200049e565b81811115620004ce5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b600061012073ffffffffffffffffffffffffffffffffffffffff8c16835260208181850152620005608285018d62000495565b9150838203604085015262000576828c62000495565b84810360608601528a51808252828c01935090820190845b81811015620005b657620005a385516200062a565b835293830193918301916001016200058e565b50508093505050508660808301528560a08301528460c08301528360e0830152620005e66101008301846200047b565b9a9950505050505050505050565b918252602082015260400190565b60405181810167ffffffffffffffff811182821017156200062257600080fd5b604052919050565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff811681146200066657600080fd5b5056fe6104006040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162004b5238038062004b528339810160408190526200005a9162000a9a565b6040805180820190915260018152603160f81b6020808301918252336080526001600160601b0319606085901b1660a0528a51908b0190812060c0529151902060e0527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6101005288518a918a918a918a91899189918991899189916000918a918a918a918a918a918a918a91849184918a918a91620000fe9160039190620008b8565b50805162000114906004906020840190620008b8565b506200012c9150506276a70083111561019462000689565b6200014062278d0082111561019562000689565b429091016101408190520161016052845162000162906002111560c862000689565b6200017a60088651111560c96200068960201b60201c565b62000190856200069e60201b62000daf1760201c565b6200019b84620006aa565b6040516309b2760f60e01b81526000906001600160a01b038b16906309b2760f90620001cc908c9060040162000c3d565b602060405180830381600087803b158015620001e757600080fd5b505af1158015620001fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000222919062000a81565b9050896001600160a01b03166366a9c7d2828889516001600160401b03811180156200024d57600080fd5b5060405190808252806020026020018201604052801562000278578160200160208202803683370190505b506040518463ffffffff1660e01b8152600401620002999392919062000ba1565b600060405180830381600087803b158015620002b457600080fd5b505af1158015620002c9573d6000803e3d6000fd5b5050506001600160601b031960608c901b1661018052506101a081905285516101c0528551620002fb57600062000312565b856000815181106200030957fe5b60200260200101515b60601b6001600160601b0319166101e0528551600110620003355760006200034c565b856001815181106200034357fe5b60200260200101515b60601b6001600160601b0319166102005285516002106200036f57600062000386565b856002815181106200037d57fe5b60200260200101515b60601b6001600160601b031916610220528551600310620003a9576000620003c0565b85600381518110620003b757fe5b60200260200101515b60601b6001600160601b031916610240528551600410620003e3576000620003fa565b85600481518110620003f157fe5b60200260200101515b60601b6001600160601b0319166102605285516005106200041d57600062000434565b856005815181106200042b57fe5b60200260200101515b60601b6001600160601b031916610280528551600610620004575760006200046e565b856006815181106200046557fe5b60200260200101515b60601b6001600160601b0319166102a052855160071062000491576000620004a8565b856007815181106200049f57fe5b60200260200101515b60601b6001600160601b0319166102c0528551620004c8576000620004ee565b620004ee86600081518110620004da57fe5b60200260200101516200071960201b60201c565b6102e05285516001106200050457600062000516565b6200051686600181518110620004da57fe5b6103005285516002106200052c5760006200053e565b6200053e86600281518110620004da57fe5b6103205285516003106200055457600062000566565b6200056686600381518110620004da57fe5b6103405285516004106200057c5760006200058e565b6200058e86600481518110620004da57fe5b610360528551600510620005a4576000620005b6565b620005b686600581518110620004da57fe5b610380528551600610620005cc576000620005de565b620005de86600681518110620004da57fe5b6103a0528551600710620005f457600062000606565b6200060686600781518110620004da57fe5b6103c081815250505050505050505050505050505050505050506200063f670de0b6b3a764000086101561012c6200068960201b60201c565b6200065a69010f0cf064dd5920000086111561012d62000689565b6200067360058751111561012f6200068960201b60201c565b5050506103e0919091525062000ca49350505050565b816200069a576200069a81620007bb565b5050565b806200069a816200080e565b620006bf64e8d4a5100082101560cb62000689565b620006d767016345785d8a000082111560ca62000689565b60078190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc906200070e90839062000c52565b60405180910390a150565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200075657600080fd5b505afa1580156200076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000791919062000b77565b60ff1690506000620007b06012836200089b60201b62000dbd1760201c565b600a0a949350505050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6002815110156200081f5762000898565b6000816000815181106200082f57fe5b602002602001015190506000600190505b8251811015620008955760008382815181106200085957fe5b602002602001015190506200088a816001600160a01b0316846001600160a01b03161060656200068960201b60201c565b915060010162000840565b50505b50565b6000620008ad83831115600162000689565b508082035b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008fb57805160ff19168380011785556200092b565b828001600101855582156200092b579182015b828111156200092b5782518255916020019190600101906200090e565b50620009399291506200093d565b5090565b5b808211156200093957600081556001016200093e565b8051620008b28162000c8e565b600082601f83011262000972578081fd5b81516001600160401b0381111562000988578182fd5b60208082026200099a82820162000c5b565b83815293508184018583018287018401881015620009b757600080fd5b600092505b84831015620009e7578051620009d28162000c8e565b825260019290920191908301908301620009bc565b505050505092915050565b600082601f83011262000a03578081fd5b81516001600160401b0381111562000a19578182fd5b602062000a2f601f8301601f1916820162000c5b565b9250818352848183860101111562000a4657600080fd5b60005b8281101562000a6657848101820151848201830152810162000a49565b8281111562000a785760008284860101525b50505092915050565b60006020828403121562000a93578081fd5b5051919050565b60008060008060008060008060006101208a8c03121562000ab9578485fd5b62000ac58b8b62000954565b60208b01519099506001600160401b038082111562000ae2578687fd5b62000af08d838e01620009f2565b995060408c015191508082111562000b06578687fd5b62000b148d838e01620009f2565b985060608c015191508082111562000b2a578687fd5b5062000b398c828d0162000961565b96505060808a0151945060a08a0151935060c08a0151925060e08a0151915062000b688b6101008c0162000954565b90509295985092959850929598565b60006020828403121562000b89578081fd5b815160ff8116811462000b9a578182fd5b9392505050565b60006060820185835260206060818501528186518084526080860191508288019350845b8181101562000bed5762000bda855162000c82565b8352938301939183019160010162000bc5565b505084810360408601528551808252908201925081860190845b8181101562000c2f5762000c1c835162000c82565b8552938301939183019160010162000c07565b509298975050505050505050565b602081016003831062000c4c57fe5b91905290565b90815260200190565b6040518181016001600160401b038111828210171562000c7a57600080fd5b604052919050565b6001600160a01b031690565b6001600160a01b03811681146200089857600080fd5b60805160a05160601c60c05160e051610100516101205161014051610160516101805160601c6101a0516101c0516101e05160601c6102005160601c6102205160601c6102405160601c6102605160601c6102805160601c6102a05160601c6102c05160601c6102e05161030051610320516103405161036051610380516103a0516103c0516103e051613d6062000df2600039806107d052806108035280611d3d5280611ef55280611f795280612206528061231552806127ad528061287352806128f95280612955525080611053525080611010525080610fcd525080610f8a525080610f47525080610f04525080610ec1525080610e705250505050505050505080610dd55250806106575250806109cf5250806113045250806112e0525080610ac952508061143b52508061147d52508061145c5250806109ab5250806109355250613d606000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80636daccffa116101045780638d928af8116100a2578063d505accf11610071578063d505accf146103b5578063d5c096c4146103c8578063d73dd623146103db578063dd62ed3e146103ee576101da565b80638d928af81461038a57806395d89b4114610392578063a9059cbb1461039a578063aaabadc5146103ad576101da565b80637ecebe00116100de5780637ecebe001461033c578063851c1bb31461034f57806387ec681714610362578063893d20e814610375576101da565b80636daccffa1461030057806370a082311461030857806374f3b0091461031b576101da565b8063313ce5671161017c57806355c676281161014b57806355c67628146102bc5780636028bfd4146102c457806366188463146102e5578063679aefce146102f8576101da565b8063313ce567146102845780633644e5151461029957806338e9922e146102a157806338fff2d0146102b4576101da565b806316c38b3c116101b857806316c38b3c1461023d57806318160ddd146102525780631c0de0511461025a57806323b872dd14610271576101da565b806301ec954a146101df57806306fdde0314610208578063095ea7b31461021d575b600080fd5b6101f26101ed3660046138fe565b610401565b6040516101ff9190613b57565b60405180910390f35b61021061045e565b6040516101ff9190613c24565b61023061022b3660046135bb565b610513565b6040516101ff9190613b34565b61025061024b3660046136b2565b61052a565b005b6101f261053e565b610262610544565b6040516101ff93929190613b3f565b61023061027f366004613506565b61056d565b61028c610628565b6040516101ff9190613c98565b6101f261062d565b6102506102af366004613a1d565b61063c565b6101f2610655565b6101f2610679565b6102d76102d23660046136ea565b61067f565b6040516101ff929190613c77565b6102306102f33660046135bb565b6106b6565b6101f261071d565b6101f2610801565b6101f26103163660046134b2565b610825565b61032e6103293660046136ea565b61084d565b6040516101ff929190613b06565b6101f261034a3660046134b2565b610909565b6101f261035d36600461378d565b610931565b6102d76103703660046136ea565b610983565b61037d6109a9565b6040516101ff9190613ae5565b61037d6109cd565b6102106109f1565b6102306103a83660046135bb565b610a70565b61037d610a7d565b6102506103c3366004613546565b610a87565b61032e6103d63660046136ea565b610c11565b6102306103e93660046135bb565b610d34565b6101f26103fc3660046134ce565b610d77565b60006104158383610410610dd3565b610df7565b606061041f610e14565b905060008651600181111561043057fe5b14610447576104428686868685611091565b610454565b6104548686868685611106565b9695505050505050565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105085780601f106104dd57610100808354040283529160200191610508565b820191906000526020600020905b8154815290600101906020018083116104eb57829003601f168201915b505050505090505b90565b600061052033848461116a565b5060015b92915050565b6105326111df565b61053b81611225565b50565b60025490565b60008060006105516112c1565b15925061055c6112de565b9150610566611302565b9050909192565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260016020908152604080832033808552925282205491926105b89114806105b05750838210155b610197611326565b6105c3858585611334565b3373ffffffffffffffffffffffffffffffffffffffff86161480159061060957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b1561061b5761061b853385840361116a565b60019150505b9392505050565b601290565b6000610637611437565b905090565b6106446111df565b61064c6114d4565b61053b816114e9565b7f000000000000000000000000000000000000000000000000000000000000000090565b60075490565b600060606106958651610690610dd3565b611547565b6106aa8989898989898961155461165a6116bb565b97509795505050505050565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091528120548083106106ff576106fa3385600061116a565b610713565b610713338561070e8487610dbd565b61116a565b5060019392505050565b600060606107296109cd565b73ffffffffffffffffffffffffffffffffffffffff1663f94d466861074c610655565b6040518263ffffffff1660e01b81526004016107689190613b57565b60006040518083038186803b15801561078057600080fd5b505afa158015610794573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107bc91908101906135e6565b509150506107fb6107cb61053e565b6107f57f000000000000000000000000000000000000000000000000000000000000000084611857565b906119d1565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000090565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6060808861089161085c6109cd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161460cd611326565b6108a661089c610655565b82146101f4611326565b60606108b0610e14565b90506108bc8882611a22565b60006060806108d08e8e8e8e8e8e8e611554565b9250925092506108e08d84611a76565b6108ea828561165a565b6108f4818561165a565b909550935050505b5097509795505050505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205490565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001610966929190613a6f565b604051602081830303815290604052805190602001209050919050565b600060606109948651610690610dd3565b6106aa89898989898989611b30611bd56116bb565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105085780601f106104dd57610100808354040283529160200191610508565b6000610520338484611334565b6000610637611c36565b610a958442111560d1611326565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600560209081526040808320549051909291610af9917f0000000000000000000000000000000000000000000000000000000000000000918c918c918c9188918d9101613b8c565b6040516020818303038152906040528051906020012090506000610b1c82611cbd565b9050600060018288888860405160008152602001604052604051610b439493929190613c06565b6020604051602081039080840390855afa158015610b65573d6000803e3d6000fd5b5050604051601f1901519150610bce905073ffffffffffffffffffffffffffffffffffffffff821615801590610bc657508b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6101f8611326565b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600560205260409020600185019055610c048b8b8b61116a565b5050505050505050505050565b60608088610c2061085c6109cd565b610c2b61089c610655565b6060610c35610e14565b9050610c3f61053e565b610ce55760006060610c538d8d8d8a611cd9565b91509150610c68620f424083101560cc611326565b610c766000620f4240611d76565b610c858b620f42408403611d76565b610c8f8184611bd5565b80610c98610dd3565b67ffffffffffffffff81118015610cae57600080fd5b50604051908082528060200260200182016040528015610cd8578160200160208202803683370190505b50955095505050506108fc565b610cef8882611a22565b6000606080610d038e8e8e8e8e8e8e611b30565b925092509250610d138c84611d76565b610d1d8285611bd5565b610d27818561165a565b90955093506108fc915050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161052091859061070e9086611e33565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b80610db981611e45565b5050565b6000610dcd838311156001611326565b50900390565b7f000000000000000000000000000000000000000000000000000000000000000090565b610e0f8184108015610e0857508183105b6064611326565b505050565b60606000610e20610dd3565b905060608167ffffffffffffffff81118015610e3b57600080fd5b50604051908082528060200260200182016040528015610e65578160200160208202803683370190505b5090508115610ead577f000000000000000000000000000000000000000000000000000000000000000081600081518110610e9c57fe5b602002602001018181525050610eb6565b91506105109050565b6001821115610ead577f000000000000000000000000000000000000000000000000000000000000000081600181518110610eed57fe5b6020026020010181815250506002821115610ead577f000000000000000000000000000000000000000000000000000000000000000081600281518110610f3057fe5b6020026020010181815250506003821115610ead577f000000000000000000000000000000000000000000000000000000000000000081600381518110610f7357fe5b6020026020010181815250506004821115610ead577f000000000000000000000000000000000000000000000000000000000000000081600481518110610fb657fe5b6020026020010181815250506005821115610ead577f000000000000000000000000000000000000000000000000000000000000000081600581518110610ff957fe5b6020026020010181815250506006821115610ead577f00000000000000000000000000000000000000000000000000000000000000008160068151811061103c57fe5b6020026020010181815250506007821115610ead577f00000000000000000000000000000000000000000000000000000000000000008160078151811061107f57fe5b60200260200101818152505091505090565b600061109d8583611a22565b6110be86606001518385815181106110b157fe5b6020026020010151611ed8565b606087015260006110d187878787611ee4565b90506110f0818487815181106110e357fe5b6020026020010151611f21565b90506110fb81611f2d565b979650505050505050565b60006111158660600151611f44565b60608701526111248583611a22565b61113886606001518386815181106110b157fe5b6060870152600061114b87878787611f68565b90506110fb8184868151811061115d57fe5b6020026020010151611fa5565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906111d2908590613b57565b60405180910390a3505050565b600061120e6000357fffffffff0000000000000000000000000000000000000000000000000000000016610931565b905061053b61121d8233611fb1565b610191611326565b8015611245576112406112366112de565b4210610193611326565b61125a565b61125a611250611302565b42106101a9611326565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790556040517f9e3a5e37224532dea67b89face185703738a228a6e8a23dee546960180d3be64906112b6908390613b34565b60405180910390a150565b60006112cb611302565b42118061063757505060065460ff161590565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b81610db957610db9816120d5565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205461136982821015610196611326565b61138d73ffffffffffffffffffffffffffffffffffffffff84161515610199611326565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082208585039055918516815220546113ca9083611e33565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526020819052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611429908690613b57565b60405180910390a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006114a4612142565b306040516020016114b9959493929190613bcd565b60405160208183030381529060405280519060200120905090565b6114e76114df6112c1565b610192611326565b565b6114fc64e8d4a5100082101560cb611326565b61151267016345785d8a000082111560ca611326565b60078190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc906112b6908390613b57565b610db98183146067611326565b60006060806115616112c1565b156115e5576115738760085487612146565b905060005b611580610dd3565b8110156115df576115c082828151811061159657fe5b60200260200101518983815181106115aa57fe5b6020026020010151610dbd90919063ffffffff16565b8882815181106115cc57fe5b6020908102919091010152600101611578565b50611631565b6115ed610dd3565b67ffffffffffffffff8111801561160357600080fd5b5060405190808252806020026020018201604052801561162d578160200160208202803683370190505b5090505b61163b8785612250565b909350915061164a87836122ba565b6008559750975097945050505050565b60005b611665610dd3565b811015610e0f5761169c83828151811061167b57fe5b602002602001015183838151811061168f57fe5b602002602001015161233a565b8382815181106116a857fe5b602090810291909101015260010161165d565b3330146117b75760003073ffffffffffffffffffffffffffffffffffffffff166000366040516116ec929190613a9f565b6000604051808303816000865af19150503d8060008114611729576040519150601f19603f3d011682016040523d82523d6000602084013e61172e565b606091505b50509050806000811461173d57fe5b60046000803e6000517fffffffff00000000000000000000000000000000000000000000000000000000167f43adbafb000000000000000000000000000000000000000000000000000000008114611799573d6000803e3d6000fd5b506020600460003e604060205260243d03602460403e601c3d016000f35b60606117c1610e14565b90506117cd8782611a22565b600060606117e48c8c8c8c8c8c8c8c63ffffffff16565b50915091506117f781848663ffffffff16565b8051601f1982018390526343adbafb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08301526020027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc82016044820181fd5b80516000908190815b818110156118985761188e85828151811061187757fe5b602002602001015184611e3390919063ffffffff16565b9250600101611860565b50816118a957600092505050610524565b600082816118b7888561235a565b905060005b60ff8110156119c45760006118e5868a6000815181106118d857fe5b602002602001015161235a565b905060015b8681101561191e5761191461190e611908848d85815181106118d857fe5b8961235a565b8661237e565b91506001016118ea565b5083945061197e61195461193b611935868b61235a565b8461235a565b61194e6119488a8961235a565b8861235a565b90611e33565b61197961196b611965876001610dbd565b8561235a565b61194e6119088b6001611e33565b61237e565b9350848411156119a45760016119948587610dbd565b1161199f57506119c4565b6119bb565b60016119b08686610dbd565b116119bb57506119c4565b506001016118bc565b5090979650505050505050565b60006119e08215156004611326565b826119ed57506000610524565b670de0b6b3a764000083810290611a1090858381611a0757fe5b04146005611326565b828181611a1957fe5b04915050610524565b60005b611a2d610dd3565b811015610e0f57611a57838281518110611a4357fe5b60200260200101518383815181106118d857fe5b838281518110611a6357fe5b6020908102919091010152600101611a25565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611aab82821015610196611326565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090208282039055600254611ae29083610dbd565b60025560405160009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111d2908690613b57565b6000606080611b3d6114d4565b6060611b4c8860085488612146565b905060005b611b59610dd3565b811015611ba257611b83828281518110611b6f57fe5b60200260200101518a83815181106115aa57fe5b898281518110611b8f57fe5b6020908102919091010152600101611b51565b5060006060611bb18a886123b1565b91509150611bbf8a82612409565b600855909c909b50909950975050505050505050565b60005b611be0610dd3565b811015610e0f57611c17838281518110611bf657fe5b6020026020010151838381518110611c0a57fe5b602002602001015161237e565b838281518110611c2357fe5b6020908102919091010152600101611bd8565b6000611c406109cd565b73ffffffffffffffffffffffffffffffffffffffff1663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8557600080fd5b505afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063791906137cd565b6000611cc7611437565b82604051602001610966929190613aaf565b60006060611ce56114d4565b6000611cf084612474565b9050611d0b6000826002811115611d0357fe5b1460ce611326565b6060611d168561248a565b9050611d258151610690610dd3565b611d3681611d31610e14565b611a22565b6000611d627f000000000000000000000000000000000000000000000000000000000000000083611857565b600881905599919850909650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611da69082611e33565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902055600254611dd99082611e33565b60025560405173ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611e27908590613b57565b60405180910390a35050565b60008282016106218482101583611326565b600281511015611e545761053b565b600081600081518110611e6357fe5b602002602001015190506000600190505b8251811015610e0f576000838281518110611e8b57fe5b60200260200101519050611ece8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106065611326565b9150600101611e74565b6000610621838361235a565b6000611eee6114d4565b60006104547f00000000000000000000000000000000000000000000000000000000000000008686868a606001516124a0565b6000610621838361237e565b6000610524611f3d600754612546565b839061256c565b600080611f5c600754846125ba90919063ffffffff16565b90506106218382610dbd565b6000611f726114d4565b60006104547f00000000000000000000000000000000000000000000000000000000000000008686868a60600151612614565b6000610621838361233a565b600073ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b611fd06109a9565b73ffffffffffffffffffffffffffffffffffffffff1614158015611ff85750611ff88361269e565b1561203a576120056109a9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16149050610524565b612042611c36565b73ffffffffffffffffffffffffffffffffffffffff16639be2a8848484306040518463ffffffff1660e01b815260040161207e93929190613b60565b60206040518083038186803b15801561209657600080fd5b505afa1580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce91906136ce565b9050610524565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b4690565b606080612151610dd3565b67ffffffffffffffff8111801561216757600080fd5b50604051908082528060200260200182016040528015612191578160200160208202803683370190505b509050826121a0579050610621565b600080866000815181106121b057fe5b602002602001015190506000600190505b6121c9610dd3565b8110156122005760008882815181106121de57fe5b60200260200101519050828111156121f7578193508092505b506001016121c1565b5061222e7f0000000000000000000000000000000000000000000000000000000000000000888885896126d1565b83838151811061223a57fe5b6020908102919091010152509095945050505050565b60006060600061225f84612474565b9050600081600281111561226f57fe5b14156122895761227f858561272d565b92509250506122b3565b600181600281111561229757fe5b14156122a75761227f8585612804565b61227f8585612836565b505b9250929050565b6000805b6122c6610dd3565b81101561230f576122f08382815181106122dc57fe5b60200260200101518583815181106115aa57fe5b8482815181106122fc57fe5b60209081029190910101526001016122be565b506106217f000000000000000000000000000000000000000000000000000000000000000084611857565b60006123498215156004611326565b81838161235257fe5b049392505050565b600082820261062184158061237757508385838161237457fe5b04145b6003611326565b600061238d8215156004611326565b8261239a57506000610524565b8160018403816123a657fe5b046001019050610524565b6000606060006123c084612474565b905060018160028111156123d057fe5b14156123e05761227f85856128c0565b60028160028111156123ee57fe5b14156123fe5761227f858561293a565b6122b16101366120d5565b6000805b612415610dd3565b81101561230f5761245583828151811061242b57fe5b602002602001015185838151811061243f57fe5b6020026020010151611e3390919063ffffffff16565b84828151811061246157fe5b602090810291909101015260010161240d565b60008180602001905181019061052491906137e9565b60608180602001905181019061062191906138af565b6000806124ad8787611857565b90506124bf838786815181106115aa57fe5b8685815181106124cb57fe5b60200260200101818152505060006124e5888884896129fc565b90506124f78488878151811061243f57fe5b87868151811061250357fe5b60200260200101818152505061253a600161194e89898151811061252357fe5b602002602001015184610dbd90919063ffffffff16565b98975050505050505050565b6000670de0b6b3a7640000821061255e576000610524565b50670de0b6b3a76400000390565b600061257b8215156004611326565b8261258857506000610524565b670de0b6b3a7640000838102906125a290858381611a0757fe5b8260018203816125ae57fe5b04600101915050610524565b60008282026125d484158061237757508385838161237457fe5b806125e3576000915050610524565b670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016125ae565b6000806126218787611857565b90506126338387878151811061243f57fe5b86868151811061263f57fe5b6020026020010181815250506000612659888884886129fc565b905061266b848888815181106115aa57fe5b87878151811061267757fe5b60200260200101818152505061253a6001612698838a89815181106115aa57fe5b90610dbd565b60006126c97f38e9922e00000000000000000000000000000000000000000000000000000000610931565b909114919050565b6000806126e0878787876129fc565b90506000818786815181106126f157fe5b602002602001015111612705576000612715565b612715828887815181106115aa57fe5b905061253a670de0b6b3a76400006107f58387612bb5565b600060606127396114d4565b6000612743610dd3565b905060008061275186612be1565b915091506127628382106064611326565b60608367ffffffffffffffff8111801561277b57600080fd5b506040519080825280602002602001820160405280156127a5578160200160208202803683370190505b5090506127df7f00000000000000000000000000000000000000000000000000000000000000008984866127d761053e565b600754612c03565b8183815181106127eb57fe5b6020908102919091010152919791965090945050505050565b60006060600061281384612cfb565b90506060612829868361282461053e565b612d11565b9196919550909350505050565b600060606128426114d4565b6060600061284f85612dc3565b915091506128608251610690610dd3565b61286c82611d31610e14565b60006128a47f0000000000000000000000000000000000000000000000000000000000000000888561289c61053e565b600754612ddb565b90506128b48282111560cf611326565b96919550909350505050565b600060608060006128d085612dc3565b915091506128e66128df610dd3565b8351611547565b6128f282611d31610e14565b600061292a7f0000000000000000000000000000000000000000000000000000000000000000888561292261053e565b600754613073565b90506128b48282101560d0611326565b6000606060008061294a85612be1565b9150915060006129877f000000000000000000000000000000000000000000000000000000000000000088848661297f61053e565b6007546132b2565b90506060612993610dd3565b67ffffffffffffffff811180156129a957600080fd5b506040519080825280602002602001820160405280156129d3578160200160208202803683370190505b509050818184815181106129e357fe5b6020908102919091010152929792965091945050505050565b600080612a0a86865161235a565b9050600085600081518110612a1b57fe5b602002602001015190506000612a398751886000815181106118d857fe5b905060015b8751811015612a8557612a6a612a64612a5d848b85815181106118d857fe5b8a5161235a565b8861233a565b9150612a7b88828151811061187757fe5b9250600101612a3e565b50612aac878681518110612a9557fe5b602002602001015183610dbd90919063ffffffff16565b91506000612ac3612abd888961235a565b8561237e565b9050612af582612aef8a8981518110612ad857fe5b6020026020010151846125ba90919063ffffffff16565b9061256c565b90506000612b0d612b0689876119d1565b8590611e33565b9050600080612b2d612b1f8b85611e33565b612aef8661194e8e806125ba565b905060005b60ff811015612ba557819250612b62612b548c6126988761194e87600261235a565b612aef8761194e86806125ba565b915082821115612b87576001612b788385610dbd565b11612b8257612ba5565b612b9d565b6001612b938484610dbd565b11612b9d57612ba5565b600101612b32565b509b9a5050505050505050505050565b6000828202612bcf84158061237757508385838161237457fe5b670de0b6b3a764000090049392505050565b60008082806020019051810190612bf89190613879565b909590945092505050565b600080612c108888611857565b90506000612c2c82612c2687612aef818b610dbd565b906125ba565b90506000805b8951811015612c6b57612c618a8281518110612c4a57fe5b602002602001015183611e3390919063ffffffff16565b9150600101612c32565b506000612c7a8b8b858c6129fc565b90506000612c8e828c8c815181106115aa57fe5b90506000612cb8848d8d81518110612ca257fe5b60200260200101516119d190919063ffffffff16565b90506000612cc582612546565b90506000612cd38a836125ba565b9050612ce8612ce182612546565b8590612bb5565b9f9e505050505050505050505050505050565b600081806020019051810190610621919061384c565b60606000612d1f84846119d1565b90506060855167ffffffffffffffff81118015612d3b57600080fd5b50604051908082528060200260200182016040528015612d65578160200160208202803683370190505b50905060005b8651811015612db957612d9a83888381518110612d8457fe5b6020026020010151612bb590919063ffffffff16565b828281518110612da657fe5b6020908102919091010152600101612d6b565b5095945050505050565b6060600082806020019051810190612bf89190613805565b600080612de88787611857565b90506000805b8751811015612e1057612e06888281518110612c4a57fe5b9150600101612dee565b506060865167ffffffffffffffff81118015612e2b57600080fd5b50604051908082528060200260200182016040528015612e55578160200160208202803683370190505b5090506000805b8951811015612f1c576000612e8d858c8481518110612e7757fe5b602002602001015161256c90919063ffffffff16565b9050612ec98b8381518110612e9e57fe5b6020026020010151612aef8c8581518110612eb557fe5b60200260200101518e86815181106115aa57fe5b848381518110612ed557fe5b602002602001018181525050612f11612f0a82868581518110612ef457fe5b60200260200101516125ba90919063ffffffff16565b8490611e33565b925050600101612e5c565b506060895167ffffffffffffffff81118015612f3757600080fd5b50604051908082528060200260200182016040528015612f61578160200160208202803683370190505b50905060005b8a51811015613038576000848281518110612f7e57fe5b60200260200101518411612f9457506000612fdc565b612fd9612fb3868481518110612fa657fe5b6020026020010151612546565b612aef878581518110612fc257fe5b602002602001015187610dbd90919063ffffffff16565b90505b6000612fe88a836125ba565b90506000613004612ff883612546565b8e8681518110612e7757fe5b9050613016818f86815181106115aa57fe5b85858151811061302257fe5b6020908102919091010152505050600101612f67565b5060006130458c83611857565b905061306361305c613057838961256c565b612546565b8a906125ba565b9c9b505050505050505050505050565b6000806130808787611857565b90506000805b87518110156130a85761309e888281518110612c4a57fe5b9150600101613086565b506060865167ffffffffffffffff811180156130c357600080fd5b506040519080825280602002602001820160405280156130ed578160200160208202803683370190505b5090506000805b895181101561318157600061310f858c8481518110612ca257fe5b905061314b8b838151811061312057fe5b60200260200101516107f58c858151811061313757fe5b60200260200101518e868151811061243f57fe5b84838151811061315757fe5b602002602001018181525050613176612f0a82868581518110612d8457fe5b9250506001016130f4565b506060895167ffffffffffffffff8111801561319c57600080fd5b506040519080825280602002602001820160405280156131c6578160200160208202803683370190505b50905060005b8a518110156132835760008482815181106131e357fe5b602002602001015184106131f957506000613227565b613224613214670de0b6b3a76400008785815181106115aa57fe5b612aef868886815181106115aa57fe5b90505b60006132338a836125ba565b9050600061324f61324383612546565b8e8681518110612d8457fe5b9050613261818f868151811061243f57fe5b85858151811061326d57fe5b60209081029190910101525050506001016131cc565b5060006132908c83611857565b90506130636132ab670de0b6b3a7640000612698848a6119d1565b8a90612bb5565b6000806132bf8888611857565b905060006132d582612c2687612aef818b611e33565b90506000805b89518110156132fd576132f38a8281518110612c4a57fe5b91506001016132db565b50600061330c8b8b858c6129fc565b9050600061331f8b8b81518110612a9557fe5b90506000613333848d8d81518110612ca257fe5b9050600061334082612546565b9050600061334e8a836125ba565b9050612ce861335c82612546565b859061256c565b803561052481613ced565b600082601f83011261337e578081fd5b813561339161338c82613ccd565b613ca6565b8181529150602080830190848101818402860182018710156133b257600080fd5b60005b848110156133d1578135845292820192908201906001016133b5565b505050505092915050565b600082601f8301126133ec578081fd5b81516133fa61338c82613ccd565b81815291506020808301908481018184028601820187101561341b57600080fd5b60005b848110156133d15781518452928201929082019060010161341e565b600082601f83011261344a578081fd5b813567ffffffffffffffff811115613460578182fd5b6134736020601f19601f84011601613ca6565b915080825283602082850101111561348a57600080fd5b8060208401602084013760009082016020015292915050565b80356002811061052457600080fd5b6000602082840312156134c3578081fd5b813561062181613ced565b600080604083850312156134e0578081fd5b82356134eb81613ced565b915060208301356134fb81613ced565b809150509250929050565b60008060006060848603121561351a578081fd5b833561352581613ced565b9250602084013561353581613ced565b929592945050506040919091013590565b600080600080600080600060e0888a031215613560578283fd5b873561356b81613ced565b9650602088013561357b81613ced565b95506040880135945060608801359350608088013560ff8116811461359e578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156135cd578182fd5b82356135d881613ced565b946020939093013593505050565b6000806000606084860312156135fa578081fd5b835167ffffffffffffffff80821115613611578283fd5b818601915086601f830112613624578283fd5b815161363261338c82613ccd565b80828252602080830192508086018b828387028901011115613652578788fd5b8796505b8487101561367d57805161366981613ced565b845260019690960195928101928101613656565b508901519097509350505080821115613694578283fd5b506136a1868287016133dc565b925050604084015190509250925092565b6000602082840312156136c3578081fd5b813561062181613d0f565b6000602082840312156136df578081fd5b815161062181613d0f565b600080600080600080600060e0888a031215613704578081fd5b87359650602088013561371681613ced565b9550604088013561372681613ced565b9450606088013567ffffffffffffffff80821115613742578283fd5b61374e8b838c0161336e565b955060808a0135945060a08a0135935060c08a0135915080821115613771578283fd5b5061377e8a828b0161343a565b91505092959891949750929550565b60006020828403121561379e578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610621578182fd5b6000602082840312156137de578081fd5b815161062181613ced565b6000602082840312156137fa578081fd5b815161062181613d1d565b600080600060608486031215613819578081fd5b835161382481613d1d565b602085015190935067ffffffffffffffff811115613840578182fd5b6136a1868287016133dc565b6000806040838503121561385e578182fd5b825161386981613d1d565b6020939093015192949293505050565b60008060006060848603121561388d578081fd5b835161389881613d1d565b602085015160409095015190969495509392505050565b600080604083850312156138c1578182fd5b82516138cc81613d1d565b602084015190925067ffffffffffffffff8111156138e8578182fd5b6138f4858286016133dc565b9150509250929050565b60008060008060808587031215613913578182fd5b843567ffffffffffffffff8082111561392a578384fd5b818701915061012080838a031215613940578485fd5b61394981613ca6565b905061395589846134a3565b81526139648960208501613363565b60208201526139768960408501613363565b6040820152606083013560608201526080830135608082015260a083013560a08201526139a68960c08501613363565b60c08201526139b88960e08501613363565b60e082015261010080840135838111156139d0578687fd5b6139dc8b82870161343a565b8284015250508096505060208701359150808211156139f9578384fd5b50613a068782880161336e565b949794965050505060408301359260600135919050565b600060208284031215613a2e578081fd5b5035919050565b6000815180845260208085019450808401835b83811015613a6457815187529582019590820190600101613a48565b509495945050505050565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260240190565b6000828483379101908152919050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060408252613b196040830185613a35565b8281036020840152613b2b8185613a35565b95945050505050565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b95865273ffffffffffffffffffffffffffffffffffffffff94851660208701529290931660408501526060840152608083019190915260a082015260c00190565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015613c5057858101830151858201604001528201613c34565b81811115613c615783604083870101525b50601f01601f1916929092016040019392505050565b600083825260406020830152613c906040830184613a35565b949350505050565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715613cc557600080fd5b604052919050565b600067ffffffffffffffff821115613ce3578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461053b57600080fd5b801515811461053b57600080fd5b6003811061053b57600080fdfea264697066735822122014a5fbb719429ddb47ed86f6e1d6bd96b67bc78c618d8ee357ae7c46063e9b0e64736f6c63430007010033a2646970667358221220907ac3386d194cde076c762ea86b7731a4c8ebc5417277a2f0c4c43b558b8d2064736f6c63430007010033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000525760003560e01c80632da47c4014620000575780636634b753146200007a5780637932c7f314620000a05780638d928af814620000c6575b600080fd5b62000061620000d0565b60405162000071929190620005f4565b60405180910390f35b620000916200008b36600462000330565b6200013c565b60405162000071919062000522565b620000b7620000b136600462000356565b62000167565b60405162000071919062000501565b620000b7620001e8565b600080427f00000000000000000000000000000000000000000000000000000000000000008110156200012e57807f000000000000000000000000000000000000000000000000000000000000000003925062278d00915062000137565b60009250600091505b509091565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b600080600062000176620000d0565b91509150600062000186620001e8565b8a8a8a8a8a88888c6040516200019c9062000283565b620001b0999897969594939291906200052d565b604051809103906000f080158015620001cd573d6000803e3d6000fd5b509050620001db816200020c565b9998505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b73ffffffffffffffffffffffffffffffffffffffff811660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f83a48fbcfc991335314e74d0496aab6a1987e992ddc85dddbcc4d6dd6ef2e9fc9190a250565b614b52806200066a83390190565b80356200029e8162000643565b92915050565b600082601f830112620002b5578081fd5b813567ffffffffffffffff811115620002cc578182fd5b620002ff60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162000602565b91508082528360208285010111156200031757600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121562000342578081fd5b81356200034f8162000643565b9392505050565b60008060008060008060c087890312156200036f578182fd5b863567ffffffffffffffff8082111562000387578384fd5b620003958a838b01620002a4565b9750602091508189013581811115620003ac578485fd5b620003ba8b828c01620002a4565b975050604089013581811115620003cf578485fd5b8901601f81018b13620003e0578485fd5b803582811115620003ef578586fd5b83810292506200040184840162000602565b8181528481019083860185850187018f10156200041c578889fd5b8895505b838610156200044a57620004358f8262000291565b83526001959095019491860191860162000420565b509850505050606089013594505050608087013591506200046f8860a0890162000291565b90509295509295509295565b73ffffffffffffffffffffffffffffffffffffffff169052565b60008151808452815b81811015620004bc576020818501810151868301820152016200049e565b81811115620004ce5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b600061012073ffffffffffffffffffffffffffffffffffffffff8c16835260208181850152620005608285018d62000495565b9150838203604085015262000576828c62000495565b84810360608601528a51808252828c01935090820190845b81811015620005b657620005a385516200062a565b835293830193918301916001016200058e565b50508093505050508660808301528560a08301528460c08301528360e0830152620005e66101008301846200047b565b9a9950505050505050505050565b918252602082015260400190565b60405181810167ffffffffffffffff811182821017156200062257600080fd5b604052919050565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff811681146200066657600080fd5b5056fe6104006040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162004b5238038062004b528339810160408190526200005a9162000a9a565b6040805180820190915260018152603160f81b6020808301918252336080526001600160601b0319606085901b1660a0528a51908b0190812060c0529151902060e0527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6101005288518a918a918a918a91899189918991899189916000918a918a918a918a918a918a918a91849184918a918a91620000fe9160039190620008b8565b50805162000114906004906020840190620008b8565b506200012c9150506276a70083111561019462000689565b6200014062278d0082111561019562000689565b429091016101408190520161016052845162000162906002111560c862000689565b6200017a60088651111560c96200068960201b60201c565b62000190856200069e60201b62000daf1760201c565b6200019b84620006aa565b6040516309b2760f60e01b81526000906001600160a01b038b16906309b2760f90620001cc908c9060040162000c3d565b602060405180830381600087803b158015620001e757600080fd5b505af1158015620001fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000222919062000a81565b9050896001600160a01b03166366a9c7d2828889516001600160401b03811180156200024d57600080fd5b5060405190808252806020026020018201604052801562000278578160200160208202803683370190505b506040518463ffffffff1660e01b8152600401620002999392919062000ba1565b600060405180830381600087803b158015620002b457600080fd5b505af1158015620002c9573d6000803e3d6000fd5b5050506001600160601b031960608c901b1661018052506101a081905285516101c0528551620002fb57600062000312565b856000815181106200030957fe5b60200260200101515b60601b6001600160601b0319166101e0528551600110620003355760006200034c565b856001815181106200034357fe5b60200260200101515b60601b6001600160601b0319166102005285516002106200036f57600062000386565b856002815181106200037d57fe5b60200260200101515b60601b6001600160601b031916610220528551600310620003a9576000620003c0565b85600381518110620003b757fe5b60200260200101515b60601b6001600160601b031916610240528551600410620003e3576000620003fa565b85600481518110620003f157fe5b60200260200101515b60601b6001600160601b0319166102605285516005106200041d57600062000434565b856005815181106200042b57fe5b60200260200101515b60601b6001600160601b031916610280528551600610620004575760006200046e565b856006815181106200046557fe5b60200260200101515b60601b6001600160601b0319166102a052855160071062000491576000620004a8565b856007815181106200049f57fe5b60200260200101515b60601b6001600160601b0319166102c0528551620004c8576000620004ee565b620004ee86600081518110620004da57fe5b60200260200101516200071960201b60201c565b6102e05285516001106200050457600062000516565b6200051686600181518110620004da57fe5b6103005285516002106200052c5760006200053e565b6200053e86600281518110620004da57fe5b6103205285516003106200055457600062000566565b6200056686600381518110620004da57fe5b6103405285516004106200057c5760006200058e565b6200058e86600481518110620004da57fe5b610360528551600510620005a4576000620005b6565b620005b686600581518110620004da57fe5b610380528551600610620005cc576000620005de565b620005de86600681518110620004da57fe5b6103a0528551600710620005f457600062000606565b6200060686600781518110620004da57fe5b6103c081815250505050505050505050505050505050505050506200063f670de0b6b3a764000086101561012c6200068960201b60201c565b6200065a69010f0cf064dd5920000086111561012d62000689565b6200067360058751111561012f6200068960201b60201c565b5050506103e0919091525062000ca49350505050565b816200069a576200069a81620007bb565b5050565b806200069a816200080e565b620006bf64e8d4a5100082101560cb62000689565b620006d767016345785d8a000082111560ca62000689565b60078190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc906200070e90839062000c52565b60405180910390a150565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200075657600080fd5b505afa1580156200076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000791919062000b77565b60ff1690506000620007b06012836200089b60201b62000dbd1760201c565b600a0a949350505050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6002815110156200081f5762000898565b6000816000815181106200082f57fe5b602002602001015190506000600190505b8251811015620008955760008382815181106200085957fe5b602002602001015190506200088a816001600160a01b0316846001600160a01b03161060656200068960201b60201c565b915060010162000840565b50505b50565b6000620008ad83831115600162000689565b508082035b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008fb57805160ff19168380011785556200092b565b828001600101855582156200092b579182015b828111156200092b5782518255916020019190600101906200090e565b50620009399291506200093d565b5090565b5b808211156200093957600081556001016200093e565b8051620008b28162000c8e565b600082601f83011262000972578081fd5b81516001600160401b0381111562000988578182fd5b60208082026200099a82820162000c5b565b83815293508184018583018287018401881015620009b757600080fd5b600092505b84831015620009e7578051620009d28162000c8e565b825260019290920191908301908301620009bc565b505050505092915050565b600082601f83011262000a03578081fd5b81516001600160401b0381111562000a19578182fd5b602062000a2f601f8301601f1916820162000c5b565b9250818352848183860101111562000a4657600080fd5b60005b8281101562000a6657848101820151848201830152810162000a49565b8281111562000a785760008284860101525b50505092915050565b60006020828403121562000a93578081fd5b5051919050565b60008060008060008060008060006101208a8c03121562000ab9578485fd5b62000ac58b8b62000954565b60208b01519099506001600160401b038082111562000ae2578687fd5b62000af08d838e01620009f2565b995060408c015191508082111562000b06578687fd5b62000b148d838e01620009f2565b985060608c015191508082111562000b2a578687fd5b5062000b398c828d0162000961565b96505060808a0151945060a08a0151935060c08a0151925060e08a0151915062000b688b6101008c0162000954565b90509295985092959850929598565b60006020828403121562000b89578081fd5b815160ff8116811462000b9a578182fd5b9392505050565b60006060820185835260206060818501528186518084526080860191508288019350845b8181101562000bed5762000bda855162000c82565b8352938301939183019160010162000bc5565b505084810360408601528551808252908201925081860190845b8181101562000c2f5762000c1c835162000c82565b8552938301939183019160010162000c07565b509298975050505050505050565b602081016003831062000c4c57fe5b91905290565b90815260200190565b6040518181016001600160401b038111828210171562000c7a57600080fd5b604052919050565b6001600160a01b031690565b6001600160a01b03811681146200089857600080fd5b60805160a05160601c60c05160e051610100516101205161014051610160516101805160601c6101a0516101c0516101e05160601c6102005160601c6102205160601c6102405160601c6102605160601c6102805160601c6102a05160601c6102c05160601c6102e05161030051610320516103405161036051610380516103a0516103c0516103e051613d6062000df2600039806107d052806108035280611d3d5280611ef55280611f795280612206528061231552806127ad528061287352806128f95280612955525080611053525080611010525080610fcd525080610f8a525080610f47525080610f04525080610ec1525080610e705250505050505050505080610dd55250806106575250806109cf5250806113045250806112e0525080610ac952508061143b52508061147d52508061145c5250806109ab5250806109355250613d606000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80636daccffa116101045780638d928af8116100a2578063d505accf11610071578063d505accf146103b5578063d5c096c4146103c8578063d73dd623146103db578063dd62ed3e146103ee576101da565b80638d928af81461038a57806395d89b4114610392578063a9059cbb1461039a578063aaabadc5146103ad576101da565b80637ecebe00116100de5780637ecebe001461033c578063851c1bb31461034f57806387ec681714610362578063893d20e814610375576101da565b80636daccffa1461030057806370a082311461030857806374f3b0091461031b576101da565b8063313ce5671161017c57806355c676281161014b57806355c67628146102bc5780636028bfd4146102c457806366188463146102e5578063679aefce146102f8576101da565b8063313ce567146102845780633644e5151461029957806338e9922e146102a157806338fff2d0146102b4576101da565b806316c38b3c116101b857806316c38b3c1461023d57806318160ddd146102525780631c0de0511461025a57806323b872dd14610271576101da565b806301ec954a146101df57806306fdde0314610208578063095ea7b31461021d575b600080fd5b6101f26101ed3660046138fe565b610401565b6040516101ff9190613b57565b60405180910390f35b61021061045e565b6040516101ff9190613c24565b61023061022b3660046135bb565b610513565b6040516101ff9190613b34565b61025061024b3660046136b2565b61052a565b005b6101f261053e565b610262610544565b6040516101ff93929190613b3f565b61023061027f366004613506565b61056d565b61028c610628565b6040516101ff9190613c98565b6101f261062d565b6102506102af366004613a1d565b61063c565b6101f2610655565b6101f2610679565b6102d76102d23660046136ea565b61067f565b6040516101ff929190613c77565b6102306102f33660046135bb565b6106b6565b6101f261071d565b6101f2610801565b6101f26103163660046134b2565b610825565b61032e6103293660046136ea565b61084d565b6040516101ff929190613b06565b6101f261034a3660046134b2565b610909565b6101f261035d36600461378d565b610931565b6102d76103703660046136ea565b610983565b61037d6109a9565b6040516101ff9190613ae5565b61037d6109cd565b6102106109f1565b6102306103a83660046135bb565b610a70565b61037d610a7d565b6102506103c3366004613546565b610a87565b61032e6103d63660046136ea565b610c11565b6102306103e93660046135bb565b610d34565b6101f26103fc3660046134ce565b610d77565b60006104158383610410610dd3565b610df7565b606061041f610e14565b905060008651600181111561043057fe5b14610447576104428686868685611091565b610454565b6104548686868685611106565b9695505050505050565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105085780601f106104dd57610100808354040283529160200191610508565b820191906000526020600020905b8154815290600101906020018083116104eb57829003601f168201915b505050505090505b90565b600061052033848461116a565b5060015b92915050565b6105326111df565b61053b81611225565b50565b60025490565b60008060006105516112c1565b15925061055c6112de565b9150610566611302565b9050909192565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260016020908152604080832033808552925282205491926105b89114806105b05750838210155b610197611326565b6105c3858585611334565b3373ffffffffffffffffffffffffffffffffffffffff86161480159061060957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b1561061b5761061b853385840361116a565b60019150505b9392505050565b601290565b6000610637611437565b905090565b6106446111df565b61064c6114d4565b61053b816114e9565b7f000000000000000000000000000000000000000000000000000000000000000090565b60075490565b600060606106958651610690610dd3565b611547565b6106aa8989898989898961155461165a6116bb565b97509795505050505050565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091528120548083106106ff576106fa3385600061116a565b610713565b610713338561070e8487610dbd565b61116a565b5060019392505050565b600060606107296109cd565b73ffffffffffffffffffffffffffffffffffffffff1663f94d466861074c610655565b6040518263ffffffff1660e01b81526004016107689190613b57565b60006040518083038186803b15801561078057600080fd5b505afa158015610794573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107bc91908101906135e6565b509150506107fb6107cb61053e565b6107f57f000000000000000000000000000000000000000000000000000000000000000084611857565b906119d1565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000090565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6060808861089161085c6109cd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161460cd611326565b6108a661089c610655565b82146101f4611326565b60606108b0610e14565b90506108bc8882611a22565b60006060806108d08e8e8e8e8e8e8e611554565b9250925092506108e08d84611a76565b6108ea828561165a565b6108f4818561165a565b909550935050505b5097509795505050505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205490565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001610966929190613a6f565b604051602081830303815290604052805190602001209050919050565b600060606109948651610690610dd3565b6106aa89898989898989611b30611bd56116bb565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105085780601f106104dd57610100808354040283529160200191610508565b6000610520338484611334565b6000610637611c36565b610a958442111560d1611326565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600560209081526040808320549051909291610af9917f0000000000000000000000000000000000000000000000000000000000000000918c918c918c9188918d9101613b8c565b6040516020818303038152906040528051906020012090506000610b1c82611cbd565b9050600060018288888860405160008152602001604052604051610b439493929190613c06565b6020604051602081039080840390855afa158015610b65573d6000803e3d6000fd5b5050604051601f1901519150610bce905073ffffffffffffffffffffffffffffffffffffffff821615801590610bc657508b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6101f8611326565b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600560205260409020600185019055610c048b8b8b61116a565b5050505050505050505050565b60608088610c2061085c6109cd565b610c2b61089c610655565b6060610c35610e14565b9050610c3f61053e565b610ce55760006060610c538d8d8d8a611cd9565b91509150610c68620f424083101560cc611326565b610c766000620f4240611d76565b610c858b620f42408403611d76565b610c8f8184611bd5565b80610c98610dd3565b67ffffffffffffffff81118015610cae57600080fd5b50604051908082528060200260200182016040528015610cd8578160200160208202803683370190505b50955095505050506108fc565b610cef8882611a22565b6000606080610d038e8e8e8e8e8e8e611b30565b925092509250610d138c84611d76565b610d1d8285611bd5565b610d27818561165a565b90955093506108fc915050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161052091859061070e9086611e33565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b80610db981611e45565b5050565b6000610dcd838311156001611326565b50900390565b7f000000000000000000000000000000000000000000000000000000000000000090565b610e0f8184108015610e0857508183105b6064611326565b505050565b60606000610e20610dd3565b905060608167ffffffffffffffff81118015610e3b57600080fd5b50604051908082528060200260200182016040528015610e65578160200160208202803683370190505b5090508115610ead577f000000000000000000000000000000000000000000000000000000000000000081600081518110610e9c57fe5b602002602001018181525050610eb6565b91506105109050565b6001821115610ead577f000000000000000000000000000000000000000000000000000000000000000081600181518110610eed57fe5b6020026020010181815250506002821115610ead577f000000000000000000000000000000000000000000000000000000000000000081600281518110610f3057fe5b6020026020010181815250506003821115610ead577f000000000000000000000000000000000000000000000000000000000000000081600381518110610f7357fe5b6020026020010181815250506004821115610ead577f000000000000000000000000000000000000000000000000000000000000000081600481518110610fb657fe5b6020026020010181815250506005821115610ead577f000000000000000000000000000000000000000000000000000000000000000081600581518110610ff957fe5b6020026020010181815250506006821115610ead577f00000000000000000000000000000000000000000000000000000000000000008160068151811061103c57fe5b6020026020010181815250506007821115610ead577f00000000000000000000000000000000000000000000000000000000000000008160078151811061107f57fe5b60200260200101818152505091505090565b600061109d8583611a22565b6110be86606001518385815181106110b157fe5b6020026020010151611ed8565b606087015260006110d187878787611ee4565b90506110f0818487815181106110e357fe5b6020026020010151611f21565b90506110fb81611f2d565b979650505050505050565b60006111158660600151611f44565b60608701526111248583611a22565b61113886606001518386815181106110b157fe5b6060870152600061114b87878787611f68565b90506110fb8184868151811061115d57fe5b6020026020010151611fa5565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906111d2908590613b57565b60405180910390a3505050565b600061120e6000357fffffffff0000000000000000000000000000000000000000000000000000000016610931565b905061053b61121d8233611fb1565b610191611326565b8015611245576112406112366112de565b4210610193611326565b61125a565b61125a611250611302565b42106101a9611326565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790556040517f9e3a5e37224532dea67b89face185703738a228a6e8a23dee546960180d3be64906112b6908390613b34565b60405180910390a150565b60006112cb611302565b42118061063757505060065460ff161590565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b81610db957610db9816120d5565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205461136982821015610196611326565b61138d73ffffffffffffffffffffffffffffffffffffffff84161515610199611326565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082208585039055918516815220546113ca9083611e33565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526020819052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611429908690613b57565b60405180910390a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006114a4612142565b306040516020016114b9959493929190613bcd565b60405160208183030381529060405280519060200120905090565b6114e76114df6112c1565b610192611326565b565b6114fc64e8d4a5100082101560cb611326565b61151267016345785d8a000082111560ca611326565b60078190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc906112b6908390613b57565b610db98183146067611326565b60006060806115616112c1565b156115e5576115738760085487612146565b905060005b611580610dd3565b8110156115df576115c082828151811061159657fe5b60200260200101518983815181106115aa57fe5b6020026020010151610dbd90919063ffffffff16565b8882815181106115cc57fe5b6020908102919091010152600101611578565b50611631565b6115ed610dd3565b67ffffffffffffffff8111801561160357600080fd5b5060405190808252806020026020018201604052801561162d578160200160208202803683370190505b5090505b61163b8785612250565b909350915061164a87836122ba565b6008559750975097945050505050565b60005b611665610dd3565b811015610e0f5761169c83828151811061167b57fe5b602002602001015183838151811061168f57fe5b602002602001015161233a565b8382815181106116a857fe5b602090810291909101015260010161165d565b3330146117b75760003073ffffffffffffffffffffffffffffffffffffffff166000366040516116ec929190613a9f565b6000604051808303816000865af19150503d8060008114611729576040519150601f19603f3d011682016040523d82523d6000602084013e61172e565b606091505b50509050806000811461173d57fe5b60046000803e6000517fffffffff00000000000000000000000000000000000000000000000000000000167f43adbafb000000000000000000000000000000000000000000000000000000008114611799573d6000803e3d6000fd5b506020600460003e604060205260243d03602460403e601c3d016000f35b60606117c1610e14565b90506117cd8782611a22565b600060606117e48c8c8c8c8c8c8c8c63ffffffff16565b50915091506117f781848663ffffffff16565b8051601f1982018390526343adbafb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08301526020027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc82016044820181fd5b80516000908190815b818110156118985761188e85828151811061187757fe5b602002602001015184611e3390919063ffffffff16565b9250600101611860565b50816118a957600092505050610524565b600082816118b7888561235a565b905060005b60ff8110156119c45760006118e5868a6000815181106118d857fe5b602002602001015161235a565b905060015b8681101561191e5761191461190e611908848d85815181106118d857fe5b8961235a565b8661237e565b91506001016118ea565b5083945061197e61195461193b611935868b61235a565b8461235a565b61194e6119488a8961235a565b8861235a565b90611e33565b61197961196b611965876001610dbd565b8561235a565b61194e6119088b6001611e33565b61237e565b9350848411156119a45760016119948587610dbd565b1161199f57506119c4565b6119bb565b60016119b08686610dbd565b116119bb57506119c4565b506001016118bc565b5090979650505050505050565b60006119e08215156004611326565b826119ed57506000610524565b670de0b6b3a764000083810290611a1090858381611a0757fe5b04146005611326565b828181611a1957fe5b04915050610524565b60005b611a2d610dd3565b811015610e0f57611a57838281518110611a4357fe5b60200260200101518383815181106118d857fe5b838281518110611a6357fe5b6020908102919091010152600101611a25565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611aab82821015610196611326565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090208282039055600254611ae29083610dbd565b60025560405160009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111d2908690613b57565b6000606080611b3d6114d4565b6060611b4c8860085488612146565b905060005b611b59610dd3565b811015611ba257611b83828281518110611b6f57fe5b60200260200101518a83815181106115aa57fe5b898281518110611b8f57fe5b6020908102919091010152600101611b51565b5060006060611bb18a886123b1565b91509150611bbf8a82612409565b600855909c909b50909950975050505050505050565b60005b611be0610dd3565b811015610e0f57611c17838281518110611bf657fe5b6020026020010151838381518110611c0a57fe5b602002602001015161237e565b838281518110611c2357fe5b6020908102919091010152600101611bd8565b6000611c406109cd565b73ffffffffffffffffffffffffffffffffffffffff1663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8557600080fd5b505afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063791906137cd565b6000611cc7611437565b82604051602001610966929190613aaf565b60006060611ce56114d4565b6000611cf084612474565b9050611d0b6000826002811115611d0357fe5b1460ce611326565b6060611d168561248a565b9050611d258151610690610dd3565b611d3681611d31610e14565b611a22565b6000611d627f000000000000000000000000000000000000000000000000000000000000000083611857565b600881905599919850909650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611da69082611e33565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902055600254611dd99082611e33565b60025560405173ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611e27908590613b57565b60405180910390a35050565b60008282016106218482101583611326565b600281511015611e545761053b565b600081600081518110611e6357fe5b602002602001015190506000600190505b8251811015610e0f576000838281518110611e8b57fe5b60200260200101519050611ece8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106065611326565b9150600101611e74565b6000610621838361235a565b6000611eee6114d4565b60006104547f00000000000000000000000000000000000000000000000000000000000000008686868a606001516124a0565b6000610621838361237e565b6000610524611f3d600754612546565b839061256c565b600080611f5c600754846125ba90919063ffffffff16565b90506106218382610dbd565b6000611f726114d4565b60006104547f00000000000000000000000000000000000000000000000000000000000000008686868a60600151612614565b6000610621838361233a565b600073ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b611fd06109a9565b73ffffffffffffffffffffffffffffffffffffffff1614158015611ff85750611ff88361269e565b1561203a576120056109a9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16149050610524565b612042611c36565b73ffffffffffffffffffffffffffffffffffffffff16639be2a8848484306040518463ffffffff1660e01b815260040161207e93929190613b60565b60206040518083038186803b15801561209657600080fd5b505afa1580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce91906136ce565b9050610524565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b4690565b606080612151610dd3565b67ffffffffffffffff8111801561216757600080fd5b50604051908082528060200260200182016040528015612191578160200160208202803683370190505b509050826121a0579050610621565b600080866000815181106121b057fe5b602002602001015190506000600190505b6121c9610dd3565b8110156122005760008882815181106121de57fe5b60200260200101519050828111156121f7578193508092505b506001016121c1565b5061222e7f0000000000000000000000000000000000000000000000000000000000000000888885896126d1565b83838151811061223a57fe5b6020908102919091010152509095945050505050565b60006060600061225f84612474565b9050600081600281111561226f57fe5b14156122895761227f858561272d565b92509250506122b3565b600181600281111561229757fe5b14156122a75761227f8585612804565b61227f8585612836565b505b9250929050565b6000805b6122c6610dd3565b81101561230f576122f08382815181106122dc57fe5b60200260200101518583815181106115aa57fe5b8482815181106122fc57fe5b60209081029190910101526001016122be565b506106217f000000000000000000000000000000000000000000000000000000000000000084611857565b60006123498215156004611326565b81838161235257fe5b049392505050565b600082820261062184158061237757508385838161237457fe5b04145b6003611326565b600061238d8215156004611326565b8261239a57506000610524565b8160018403816123a657fe5b046001019050610524565b6000606060006123c084612474565b905060018160028111156123d057fe5b14156123e05761227f85856128c0565b60028160028111156123ee57fe5b14156123fe5761227f858561293a565b6122b16101366120d5565b6000805b612415610dd3565b81101561230f5761245583828151811061242b57fe5b602002602001015185838151811061243f57fe5b6020026020010151611e3390919063ffffffff16565b84828151811061246157fe5b602090810291909101015260010161240d565b60008180602001905181019061052491906137e9565b60608180602001905181019061062191906138af565b6000806124ad8787611857565b90506124bf838786815181106115aa57fe5b8685815181106124cb57fe5b60200260200101818152505060006124e5888884896129fc565b90506124f78488878151811061243f57fe5b87868151811061250357fe5b60200260200101818152505061253a600161194e89898151811061252357fe5b602002602001015184610dbd90919063ffffffff16565b98975050505050505050565b6000670de0b6b3a7640000821061255e576000610524565b50670de0b6b3a76400000390565b600061257b8215156004611326565b8261258857506000610524565b670de0b6b3a7640000838102906125a290858381611a0757fe5b8260018203816125ae57fe5b04600101915050610524565b60008282026125d484158061237757508385838161237457fe5b806125e3576000915050610524565b670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016125ae565b6000806126218787611857565b90506126338387878151811061243f57fe5b86868151811061263f57fe5b6020026020010181815250506000612659888884886129fc565b905061266b848888815181106115aa57fe5b87878151811061267757fe5b60200260200101818152505061253a6001612698838a89815181106115aa57fe5b90610dbd565b60006126c97f38e9922e00000000000000000000000000000000000000000000000000000000610931565b909114919050565b6000806126e0878787876129fc565b90506000818786815181106126f157fe5b602002602001015111612705576000612715565b612715828887815181106115aa57fe5b905061253a670de0b6b3a76400006107f58387612bb5565b600060606127396114d4565b6000612743610dd3565b905060008061275186612be1565b915091506127628382106064611326565b60608367ffffffffffffffff8111801561277b57600080fd5b506040519080825280602002602001820160405280156127a5578160200160208202803683370190505b5090506127df7f00000000000000000000000000000000000000000000000000000000000000008984866127d761053e565b600754612c03565b8183815181106127eb57fe5b6020908102919091010152919791965090945050505050565b60006060600061281384612cfb565b90506060612829868361282461053e565b612d11565b9196919550909350505050565b600060606128426114d4565b6060600061284f85612dc3565b915091506128608251610690610dd3565b61286c82611d31610e14565b60006128a47f0000000000000000000000000000000000000000000000000000000000000000888561289c61053e565b600754612ddb565b90506128b48282111560cf611326565b96919550909350505050565b600060608060006128d085612dc3565b915091506128e66128df610dd3565b8351611547565b6128f282611d31610e14565b600061292a7f0000000000000000000000000000000000000000000000000000000000000000888561292261053e565b600754613073565b90506128b48282101560d0611326565b6000606060008061294a85612be1565b9150915060006129877f000000000000000000000000000000000000000000000000000000000000000088848661297f61053e565b6007546132b2565b90506060612993610dd3565b67ffffffffffffffff811180156129a957600080fd5b506040519080825280602002602001820160405280156129d3578160200160208202803683370190505b509050818184815181106129e357fe5b6020908102919091010152929792965091945050505050565b600080612a0a86865161235a565b9050600085600081518110612a1b57fe5b602002602001015190506000612a398751886000815181106118d857fe5b905060015b8751811015612a8557612a6a612a64612a5d848b85815181106118d857fe5b8a5161235a565b8861233a565b9150612a7b88828151811061187757fe5b9250600101612a3e565b50612aac878681518110612a9557fe5b602002602001015183610dbd90919063ffffffff16565b91506000612ac3612abd888961235a565b8561237e565b9050612af582612aef8a8981518110612ad857fe5b6020026020010151846125ba90919063ffffffff16565b9061256c565b90506000612b0d612b0689876119d1565b8590611e33565b9050600080612b2d612b1f8b85611e33565b612aef8661194e8e806125ba565b905060005b60ff811015612ba557819250612b62612b548c6126988761194e87600261235a565b612aef8761194e86806125ba565b915082821115612b87576001612b788385610dbd565b11612b8257612ba5565b612b9d565b6001612b938484610dbd565b11612b9d57612ba5565b600101612b32565b509b9a5050505050505050505050565b6000828202612bcf84158061237757508385838161237457fe5b670de0b6b3a764000090049392505050565b60008082806020019051810190612bf89190613879565b909590945092505050565b600080612c108888611857565b90506000612c2c82612c2687612aef818b610dbd565b906125ba565b90506000805b8951811015612c6b57612c618a8281518110612c4a57fe5b602002602001015183611e3390919063ffffffff16565b9150600101612c32565b506000612c7a8b8b858c6129fc565b90506000612c8e828c8c815181106115aa57fe5b90506000612cb8848d8d81518110612ca257fe5b60200260200101516119d190919063ffffffff16565b90506000612cc582612546565b90506000612cd38a836125ba565b9050612ce8612ce182612546565b8590612bb5565b9f9e505050505050505050505050505050565b600081806020019051810190610621919061384c565b60606000612d1f84846119d1565b90506060855167ffffffffffffffff81118015612d3b57600080fd5b50604051908082528060200260200182016040528015612d65578160200160208202803683370190505b50905060005b8651811015612db957612d9a83888381518110612d8457fe5b6020026020010151612bb590919063ffffffff16565b828281518110612da657fe5b6020908102919091010152600101612d6b565b5095945050505050565b6060600082806020019051810190612bf89190613805565b600080612de88787611857565b90506000805b8751811015612e1057612e06888281518110612c4a57fe5b9150600101612dee565b506060865167ffffffffffffffff81118015612e2b57600080fd5b50604051908082528060200260200182016040528015612e55578160200160208202803683370190505b5090506000805b8951811015612f1c576000612e8d858c8481518110612e7757fe5b602002602001015161256c90919063ffffffff16565b9050612ec98b8381518110612e9e57fe5b6020026020010151612aef8c8581518110612eb557fe5b60200260200101518e86815181106115aa57fe5b848381518110612ed557fe5b602002602001018181525050612f11612f0a82868581518110612ef457fe5b60200260200101516125ba90919063ffffffff16565b8490611e33565b925050600101612e5c565b506060895167ffffffffffffffff81118015612f3757600080fd5b50604051908082528060200260200182016040528015612f61578160200160208202803683370190505b50905060005b8a51811015613038576000848281518110612f7e57fe5b60200260200101518411612f9457506000612fdc565b612fd9612fb3868481518110612fa657fe5b6020026020010151612546565b612aef878581518110612fc257fe5b602002602001015187610dbd90919063ffffffff16565b90505b6000612fe88a836125ba565b90506000613004612ff883612546565b8e8681518110612e7757fe5b9050613016818f86815181106115aa57fe5b85858151811061302257fe5b6020908102919091010152505050600101612f67565b5060006130458c83611857565b905061306361305c613057838961256c565b612546565b8a906125ba565b9c9b505050505050505050505050565b6000806130808787611857565b90506000805b87518110156130a85761309e888281518110612c4a57fe5b9150600101613086565b506060865167ffffffffffffffff811180156130c357600080fd5b506040519080825280602002602001820160405280156130ed578160200160208202803683370190505b5090506000805b895181101561318157600061310f858c8481518110612ca257fe5b905061314b8b838151811061312057fe5b60200260200101516107f58c858151811061313757fe5b60200260200101518e868151811061243f57fe5b84838151811061315757fe5b602002602001018181525050613176612f0a82868581518110612d8457fe5b9250506001016130f4565b506060895167ffffffffffffffff8111801561319c57600080fd5b506040519080825280602002602001820160405280156131c6578160200160208202803683370190505b50905060005b8a518110156132835760008482815181106131e357fe5b602002602001015184106131f957506000613227565b613224613214670de0b6b3a76400008785815181106115aa57fe5b612aef868886815181106115aa57fe5b90505b60006132338a836125ba565b9050600061324f61324383612546565b8e8681518110612d8457fe5b9050613261818f868151811061243f57fe5b85858151811061326d57fe5b60209081029190910101525050506001016131cc565b5060006132908c83611857565b90506130636132ab670de0b6b3a7640000612698848a6119d1565b8a90612bb5565b6000806132bf8888611857565b905060006132d582612c2687612aef818b611e33565b90506000805b89518110156132fd576132f38a8281518110612c4a57fe5b91506001016132db565b50600061330c8b8b858c6129fc565b9050600061331f8b8b81518110612a9557fe5b90506000613333848d8d81518110612ca257fe5b9050600061334082612546565b9050600061334e8a836125ba565b9050612ce861335c82612546565b859061256c565b803561052481613ced565b600082601f83011261337e578081fd5b813561339161338c82613ccd565b613ca6565b8181529150602080830190848101818402860182018710156133b257600080fd5b60005b848110156133d1578135845292820192908201906001016133b5565b505050505092915050565b600082601f8301126133ec578081fd5b81516133fa61338c82613ccd565b81815291506020808301908481018184028601820187101561341b57600080fd5b60005b848110156133d15781518452928201929082019060010161341e565b600082601f83011261344a578081fd5b813567ffffffffffffffff811115613460578182fd5b6134736020601f19601f84011601613ca6565b915080825283602082850101111561348a57600080fd5b8060208401602084013760009082016020015292915050565b80356002811061052457600080fd5b6000602082840312156134c3578081fd5b813561062181613ced565b600080604083850312156134e0578081fd5b82356134eb81613ced565b915060208301356134fb81613ced565b809150509250929050565b60008060006060848603121561351a578081fd5b833561352581613ced565b9250602084013561353581613ced565b929592945050506040919091013590565b600080600080600080600060e0888a031215613560578283fd5b873561356b81613ced565b9650602088013561357b81613ced565b95506040880135945060608801359350608088013560ff8116811461359e578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156135cd578182fd5b82356135d881613ced565b946020939093013593505050565b6000806000606084860312156135fa578081fd5b835167ffffffffffffffff80821115613611578283fd5b818601915086601f830112613624578283fd5b815161363261338c82613ccd565b80828252602080830192508086018b828387028901011115613652578788fd5b8796505b8487101561367d57805161366981613ced565b845260019690960195928101928101613656565b508901519097509350505080821115613694578283fd5b506136a1868287016133dc565b925050604084015190509250925092565b6000602082840312156136c3578081fd5b813561062181613d0f565b6000602082840312156136df578081fd5b815161062181613d0f565b600080600080600080600060e0888a031215613704578081fd5b87359650602088013561371681613ced565b9550604088013561372681613ced565b9450606088013567ffffffffffffffff80821115613742578283fd5b61374e8b838c0161336e565b955060808a0135945060a08a0135935060c08a0135915080821115613771578283fd5b5061377e8a828b0161343a565b91505092959891949750929550565b60006020828403121561379e578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610621578182fd5b6000602082840312156137de578081fd5b815161062181613ced565b6000602082840312156137fa578081fd5b815161062181613d1d565b600080600060608486031215613819578081fd5b835161382481613d1d565b602085015190935067ffffffffffffffff811115613840578182fd5b6136a1868287016133dc565b6000806040838503121561385e578182fd5b825161386981613d1d565b6020939093015192949293505050565b60008060006060848603121561388d578081fd5b835161389881613d1d565b602085015160409095015190969495509392505050565b600080604083850312156138c1578182fd5b82516138cc81613d1d565b602084015190925067ffffffffffffffff8111156138e8578182fd5b6138f4858286016133dc565b9150509250929050565b60008060008060808587031215613913578182fd5b843567ffffffffffffffff8082111561392a578384fd5b818701915061012080838a031215613940578485fd5b61394981613ca6565b905061395589846134a3565b81526139648960208501613363565b60208201526139768960408501613363565b6040820152606083013560608201526080830135608082015260a083013560a08201526139a68960c08501613363565b60c08201526139b88960e08501613363565b60e082015261010080840135838111156139d0578687fd5b6139dc8b82870161343a565b8284015250508096505060208701359150808211156139f9578384fd5b50613a068782880161336e565b949794965050505060408301359260600135919050565b600060208284031215613a2e578081fd5b5035919050565b6000815180845260208085019450808401835b83811015613a6457815187529582019590820190600101613a48565b509495945050505050565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260240190565b6000828483379101908152919050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060408252613b196040830185613a35565b8281036020840152613b2b8185613a35565b95945050505050565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b95865273ffffffffffffffffffffffffffffffffffffffff94851660208701529290931660408501526060840152608083019190915260a082015260c00190565b94855260208501939093526040840191909152606083015273ffffffffffffffffffffffffffffffffffffffff16608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015613c5057858101830151858201604001528201613c34565b81811115613c615783604083870101525b50601f01601f1916929092016040019392505050565b600083825260406020830152613c906040830184613a35565b949350505050565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715613cc557600080fd5b604052919050565b600067ffffffffffffffff821115613ce3578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461053b57600080fd5b801515811461053b57600080fd5b6003811061053b57600080fdfea264697066735822122014a5fbb719429ddb47ed86f6e1d6bd96b67bc78c618d8ee357ae7c46063e9b0e64736f6c63430007010033a2646970667358221220907ac3386d194cde076c762ea86b7731a4c8ebc5417277a2f0c4c43b558b8d2064736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(string,string,address[],uint256,uint256,address)": {
        "details": "Deploys a new `StablePool`."
      },
      "getPauseConfiguration()": {
        "details": "Returns the current `TemporarilyPausable` configuration that will be applied to Pools created by this factory. `pauseWindowDuration` will decrease over time until it reaches zero, at which point both it and `bufferPeriodDuration` will be zero forever, meaning deployed Pools will not be pausable."
      },
      "getVault()": {
        "details": "Returns the Vault's address."
      },
      "isPoolFromFactory(address)": {
        "details": "Returns true if `pool` was created by this factory."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7936,
        "contract": "contracts/pools/stable/StablePoolFactory.sol:StablePoolFactory",
        "label": "_isPoolFromFactory",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}