{
  "address": "0x85a71B4A98E252FBF3b07212AF3C702E9DDcd17e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destinatary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xde57fd36cabef9d6fe32994f52de643b4300f7a9537461da20e62dbbb583f250",
  "receipt": {
    "to": null,
    "from": "0x3A54802752fEFDc1aF2CD0b6DFA4F24694bDEE33",
    "contractAddress": "0x85a71B4A98E252FBF3b07212AF3C702E9DDcd17e",
    "transactionIndex": 0,
    "gasUsed": "1224118",
    "logsBloom": "0x
    "blockHash": "0xb1d6d95cd35ca02ec55e0a9cf65f9997bb7a166cc3660bf1fb87d6bd67c11f06",
    "transactionHash": "0xde57fd36cabef9d6fe32994f52de643b4300f7a9537461da20e62dbbb583f250",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20310247,
        "transactionHash": "0xde57fd36cabef9d6fe32994f52de643b4300f7a9537461da20e62dbbb583f250",
        "address": "0x85a71B4A98E252FBF3b07212AF3C702E9DDcd17e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003a54802752fefdc1af2cd0b6dfa4f24694bdee33",
          "0x0000000000000000000000003a54802752fefdc1af2cd0b6dfa4f24694bdee33"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb1d6d95cd35ca02ec55e0a9cf65f9997bb7a166cc3660bf1fb87d6bd67c11f06"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20310247,
        "transactionHash": "0xde57fd36cabef9d6fe32994f52de643b4300f7a9537461da20e62dbbb583f250",
        "address": "0x85a71B4A98E252FBF3b07212AF3C702E9DDcd17e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000003a54802752fefdc1af2cd0b6dfa4f24694bdee33",
          "0x0000000000000000000000003a54802752fefdc1af2cd0b6dfa4f24694bdee33"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb1d6d95cd35ca02ec55e0a9cf65f9997bb7a166cc3660bf1fb87d6bd67c11f06"
      }
    ],
    "blockNumber": 20310247,
    "cumulativeGasUsed": "1224118",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3A54802752fEFDc1aF2CD0b6DFA4F24694bDEE33"
  ],
  "solcInputHash": "9be518e37de930f4cb2c00751324c113",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destinatary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had already been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"stateVariables\":{\"allowance\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"balanceOf\":{\"details\":\"Returns the amount of tokens owned by `account`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/WETH.sol\":\"WETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n// solhint-disable\\r\\n\\r\\n/**\\r\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\r\\n * supported.\\r\\n */\\r\\nfunction _require(bool condition, uint256 errorCode) pure {\\r\\n    if (!condition) _revert(errorCode);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\r\\n */\\r\\nfunction _revert(uint256 errorCode) pure {\\r\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\r\\n    // 'BAL#{errorCode}'\\r\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\r\\n    //\\r\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\r\\n    // number (8 to 16 bits) than the individual string characters.\\r\\n    //\\r\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\r\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\r\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\r\\n    assembly {\\r\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\r\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\r\\n        // the '0' character.\\r\\n\\r\\n        let units := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        errorCode := div(errorCode, 10)\\r\\n        let tenths := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        errorCode := div(errorCode, 10)\\r\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\r\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\r\\n        // characters to it, each shifted by a multiple of 8.\\r\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\r\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\r\\n        // array).\\r\\n\\r\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\r\\n\\r\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\r\\n        // message will have the following layout:\\r\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\r\\n\\r\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\r\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\r\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\r\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\r\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\r\\n        // The string length is fixed: 7 characters.\\r\\n        mstore(0x24, 7)\\r\\n        // Finally, the string itself is stored.\\r\\n        mstore(0x44, revertReason)\\r\\n\\r\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\r\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\r\\n        revert(0, 100)\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Errors {\\r\\n    // Math\\r\\n    uint256 internal constant ADD_OVERFLOW = 0;\\r\\n    uint256 internal constant SUB_OVERFLOW = 1;\\r\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\r\\n    uint256 internal constant MUL_OVERFLOW = 3;\\r\\n    uint256 internal constant ZERO_DIVISION = 4;\\r\\n    uint256 internal constant DIV_INTERNAL = 5;\\r\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\r\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\r\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\r\\n    uint256 internal constant INVALID_EXPONENT = 9;\\r\\n\\r\\n    // Input\\r\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\r\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\r\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\r\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\r\\n    uint256 internal constant ZERO_TOKEN = 104;\\r\\n\\r\\n    // Shared pools\\r\\n    uint256 internal constant MIN_TOKENS = 200;\\r\\n    uint256 internal constant MAX_TOKENS = 201;\\r\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\r\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\r\\n    uint256 internal constant MINIMUM_BPT = 204;\\r\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\r\\n    uint256 internal constant UNINITIALIZED = 206;\\r\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\r\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\r\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\r\\n\\r\\n    // Pools\\r\\n    uint256 internal constant MIN_AMP = 300;\\r\\n    uint256 internal constant MAX_AMP = 301;\\r\\n    uint256 internal constant MIN_WEIGHT = 302;\\r\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\r\\n    uint256 internal constant MAX_IN_RATIO = 304;\\r\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\r\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\r\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\r\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\r\\n    uint256 internal constant INVALID_TOKEN = 309;\\r\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\r\\n    uint256 internal constant ZERO_INVARIANT = 311;\\r\\n\\r\\n    // Lib\\r\\n    uint256 internal constant REENTRANCY = 400;\\r\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\r\\n    uint256 internal constant PAUSED = 402;\\r\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\r\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\r\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\r\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\r\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\r\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\r\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\r\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\r\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\r\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\r\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\r\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\r\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\r\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\r\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\r\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\r\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\r\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\r\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\r\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\r\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\r\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\r\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\r\\n\\r\\n    // Vault\\r\\n    uint256 internal constant INVALID_POOL_ID = 500;\\r\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\r\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\r\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\r\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\r\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\r\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\r\\n    uint256 internal constant SWAP_LIMIT = 507;\\r\\n    uint256 internal constant SWAP_DEADLINE = 508;\\r\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\r\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\r\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\r\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\r\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\r\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\r\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\r\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\r\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\r\\n    uint256 internal constant ETH_TRANSFER = 518;\\r\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\r\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\r\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\r\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\r\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\r\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\r\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\r\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\r\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\r\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\r\\n\\r\\n    // Fees\\r\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\r\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\r\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\r\\n}\\r\\n\",\"keccak256\":\"0x86ae8423356e088207b199c8958ddcc6238d48ca8844c55706b8e88a599c16c8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/openzeppelin/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    struct RoleData {\\r\\n        EnumerableSet.AddressSet members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\r\\n        return _roles[role].members.contains(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of accounts that have `role`. Can be used\\r\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n     */\\r\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\r\\n        return _roles[role].members.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n     *\\r\\n     * Role bearers are not sorted in any particular way, and their ordering may\\r\\n     * change at any point.\\r\\n     *\\r\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n     * you perform all queries on the same block. See the following\\r\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n     * for more information.\\r\\n     */\\r\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\r\\n        return _roles[role].members.at(index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual {\\r\\n        _require(hasRole(_roles[role].adminRole, msg.sender), Errors.GRANT_SENDER_NOT_ADMIN);\\r\\n\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had already been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual {\\r\\n        _require(hasRole(_roles[role].adminRole, msg.sender), Errors.REVOKE_SENDER_NOT_ADMIN);\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual {\\r\\n        _require(account == msg.sender, Errors.RENOUNCE_SENDER_NOT_ALLOWED);\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n    }\\r\\n\\r\\n    function _grantRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.add(account)) {\\r\\n            emit RoleGranted(role, account, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revokeRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.remove(account)) {\\r\\n            emit RoleRevoked(role, account, msg.sender);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa60e5428f7e63ffcd1095ba7bf4c7015307a544d2526ad3cdeda530594fb5972\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\r\\n\\r\\n// Based on the EnumerableSet library from OpenZeppelin contracts, altered to remove the base private functions that\\r\\n// work on bytes32, replacing them with a native implementation for address values, to reduce bytecode size and runtime\\r\\n// costs.\\r\\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\\r\\n    // AddressSet, which uses address keys natively, resulting in more dense bytecode.\\r\\n\\r\\n    struct AddressSet {\\r\\n        // Storage of set values\\r\\n        address[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(address => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        if (!contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\r\\n\\r\\n            address lastValue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastValue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        _require(set._values.length > index, Errors.OUT_OF_BOUNDS);\\r\\n        return unchecked_at(set, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\r\\n     * than {length}). O(1).\\r\\n     *\\r\\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\r\\n     * within bounds.\\r\\n     */\\r\\n    function unchecked_at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc6f6b7bb4e516ce59661403feb9534d05bebd70f2165dfba93f8f1ffe8c06c6b\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x1a55047baff95c6f63e55168d5767462a1ef6f12e131b2ad56f30b3df97b7d0e\",\"license\":\"MIT\"},\"contracts/test/WETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../lib/openzeppelin/AccessControl.sol\\\";\\r\\n\\r\\nimport \\\"../vault/interfaces/IWETH.sol\\\";\\r\\n\\r\\ncontract WETH is AccessControl, IWETH {\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    string public name = \\\"Wrapped Ether\\\";\\r\\n    string public symbol = \\\"WETH\\\";\\r\\n    uint8 public decimals = 18;\\r\\n\\r\\n    event Deposit(address indexed dst, uint256 wad);\\r\\n    event Withdrawal(address indexed src, uint256 wad);\\r\\n\\r\\n    mapping(address => uint256) public override balanceOf;\\r\\n    mapping(address => mapping(address => uint256)) public override allowance;\\r\\n\\r\\n    constructor(address minter) {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, minter);\\r\\n        _setupRole(MINTER_ROLE, minter);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        deposit();\\r\\n    }\\r\\n\\r\\n    function deposit() public payable override {\\r\\n        balanceOf[msg.sender] += msg.value;\\r\\n        emit Deposit(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 wad) public override {\\r\\n        require(balanceOf[msg.sender] >= wad, \\\"INSUFFICIENT_BALANCE\\\");\\r\\n        balanceOf[msg.sender] -= wad;\\r\\n        msg.sender.transfer(wad);\\r\\n        emit Withdrawal(msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    // For testing purposes - this creates WETH that cannot be redeemed for ETH via 'withdraw'\\r\\n    function mint(address destinatary, uint256 amount) external {\\r\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"NOT_MINTER\\\");\\r\\n        balanceOf[destinatary] += amount;\\r\\n        emit Deposit(destinatary, amount);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function approve(address guy, uint256 wad) public override returns (bool) {\\r\\n        allowance[msg.sender][guy] = wad;\\r\\n        emit Approval(msg.sender, guy, wad);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint256 wad) public override returns (bool) {\\r\\n        return transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 wad\\r\\n    ) public override returns (bool) {\\r\\n        require(balanceOf[src] >= wad, \\\"INSUFFICIENT_BALANCE\\\");\\r\\n\\r\\n        if (src != msg.sender && allowance[src][msg.sender] != uint256(-1)) {\\r\\n            require(allowance[src][msg.sender] >= wad, \\\"INSUFFICIENT_ALLOWANCE\\\");\\r\\n            allowance[src][msg.sender] -= wad;\\r\\n        }\\r\\n\\r\\n        balanceOf[src] -= wad;\\r\\n        balanceOf[dst] += wad;\\r\\n\\r\\n        emit Transfer(src, dst, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x49d38a0a82c1750b436c1fa883ec3ba74d05ed15d1f94c01a57a2fd3f8a15df1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\\r\\n * sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\\r\\n */\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x747daa8953d8104f49b3ab1d82921a09eb0efa6e011811964bf8b208d1f6253c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061016e5760003560e01c806370a08231116100cb578063a9059cbb1161007f578063d539139311610059578063d5391393146105af578063d547741f146105c4578063dd62ed3e1461060a5761017d565b8063a9059cbb14610537578063ca15c8731461057d578063d0e30db0146105a75761017d565b806391d14854116100b057806391d14854146104c757806395d89b411461050d578063a217fddf146105225761017d565b806370a082311461042e5780639010d07c1461046e5761017d565b80632e1a7d4d11610122578063313ce56711610107578063313ce5671461037757806336568abe146103a257806340c10f19146103e85761017d565b80632e1a7d4d146103075780632f2ff15d146103315761017d565b806318160ddd1161015357806318160ddd1461026657806323b872dd1461028d578063248a9ca3146102dd5761017d565b806306fdde0314610182578063095ea7b31461020c5761017d565b3661017d5761017b610652565b005b600080fd5b34801561018e57600080fd5b506101976106a1565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d15781810151838201526020016101b9565b50505050905090810190601f1680156101fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021857600080fd5b506102526004803603604081101561022f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561072e565b604080519115158252519081900360200190f35b34801561027257600080fd5b5061027b6107a2565b60408051918252519081900360200190f35b34801561029957600080fd5b50610252600480360360608110156102b057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356107a6565b3480156102e957600080fd5b5061027b6004803603602081101561030057600080fd5b50356109ec565b34801561031357600080fd5b5061017b6004803603602081101561032a57600080fd5b5035610a01565b34801561033d57600080fd5b5061017b6004803603604081101561035457600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610af8565b34801561038357600080fd5b5061038c610b2e565b6040805160ff9092168252519081900360200190f35b3480156103ae57600080fd5b5061017b600480360360408110156103c557600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610b37565b3480156103f457600080fd5b5061017b6004803603604081101561040b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610b65565b34801561043a57600080fd5b5061027b6004803603602081101561045157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c5e565b34801561047a57600080fd5b5061049e6004803603604081101561049157600080fd5b5080359060200135610c70565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156104d357600080fd5b50610252600480360360408110156104ea57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610c8f565b34801561051957600080fd5b50610197610ca7565b34801561052e57600080fd5b5061027b610cff565b34801561054357600080fd5b506102526004803603604081101561055a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610d04565b34801561058957600080fd5b5061027b600480360360208110156105a057600080fd5b5035610d11565b61017b610652565b3480156105bb57600080fd5b5061027b610d28565b3480156105d057600080fd5b5061017b600480360360408110156105e757600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff16610d4c565b34801561061657600080fd5b5061027b6004803603604081101561062d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610d74565b33600081815260046020908152604091829020805434908101909155825190815291517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9281900390910190a2565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107265780601f106106fb57610100808354040283529160200191610726565b820191906000526020600020905b81548152906001019060200180831161070957829003601f168201915b505050505081565b33600081815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b4790565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602052604081205482111561083a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e53554646494349454e545f42414c414e4345000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff84163314801590610892575073ffffffffffffffffffffffffffffffffffffffff8416600090815260056020908152604080832033845290915290205460001914155b1561096e5773ffffffffffffffffffffffffffffffffffffffff8416600090815260056020908152604080832033845290915290205482111561093657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414c4c4f57414e434500000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff841660009081526005602090815260408083203384529091529020805483900390555b73ffffffffffffffffffffffffffffffffffffffff808516600081815260046020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b60009081526020819052604090206002015490565b33600090815260046020526040902054811115610a7f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e53554646494349454e545f42414c414e4345000000000000000000000000604482015290519081900360640190fd5b33600081815260046020526040808220805485900390555183156108fc0291849190818181858888f19350505050158015610abe573d6000803e3d6000fd5b5060408051828152905133917f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65919081900360200190a250565b600082815260208190526040902060020154610b2090610b189033610c8f565b6101a6610e19565b610b2a8282610e27565b5050565b60035460ff1681565b610b5b73ffffffffffffffffffffffffffffffffffffffff821633146101a8610e19565b610b2a8282610e8d565b610b8f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610c8f565b610bfa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f4d494e54455200000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600081815260046020908152604091829020805485019055815184815291517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9281900390910190a25050565b60046020526000908152604090205481565b6000828152602081905260408120610c889083610ef3565b9392505050565b6000828152602081905260408120610c889083610f0f565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107265780601f106106fb57610100808354040283529160200191610726565b600081565b6000610c883384846107a6565b600081815260208190526040812061079c90610f3d565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b600082815260208190526040902060020154610b5b90610d6c9033610c8f565b6101a7610e19565b600560209081526000928352604080842090915290825290205481565b6000610d9d8383610f0f565b610e1157508154600180820184556000848152602080822090930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558554908252828601909352604090209190915561079c565b50600061079c565b81610b2a57610b2a81610f41565b6000828152602081905260409020610e3f9082610d91565b15610b2a57604051339073ffffffffffffffffffffffffffffffffffffffff83169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000828152602081905260409020610ea59082610fae565b15610b2a57604051339073ffffffffffffffffffffffffffffffffffffffff83169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b8154600090610f059083106064610e19565b610c888383611119565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001919091016020526040902054151590565b5490565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054801561110f5783546000198083019190810190600090879083908110610ff857fe5b600091825260209091200154875473ffffffffffffffffffffffffffffffffffffffff9091169150819088908590811061102e57fe5b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905591831681526001898101909252604090209084019055865487908061109c57fe5b60008281526020808220830160001990810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff8816825260018981019091526040822091909155945061079c9350505050565b600091505061079c565b600082600001828154811061112a57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16939250505056fea26469706673582212207dde67d022cb677bd78fb5b4e92c300f3b323d4405b0af0359d417928cc61a5964736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had already been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "stateVariables": {
      "allowance": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "balanceOf": {
        "details": "Returns the amount of tokens owned by `account`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3267,
        "contract": "contracts/test/WETH.sol:WETH",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3263_storage)"
      },
      {
        "astId": 15638,
        "contract": "contracts/test/WETH.sol:WETH",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 15641,
        "contract": "contracts/test/WETH.sol:WETH",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 15644,
        "contract": "contracts/test/WETH.sol:WETH",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 15661,
        "contract": "contracts/test/WETH.sol:WETH",
        "label": "balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15668,
        "contract": "contracts/test/WETH.sol:WETH",
        "label": "allowance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3263_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3263_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4722_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4717,
            "contract": "contracts/test/WETH.sol:WETH",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4721,
            "contract": "contracts/test/WETH.sol:WETH",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)3263_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3260,
            "contract": "contracts/test/WETH.sol:WETH",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)4722_storage"
          },
          {
            "astId": 3262,
            "contract": "contracts/test/WETH.sol:WETH",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}